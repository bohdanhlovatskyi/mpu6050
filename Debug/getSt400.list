
getSt400.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a810  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  0800a9b0  0800a9b0  0001a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac40  0800ac40  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac40  0800ac40  0001ac40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ac48  0800ac48  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac48  0800ac48  0001ac48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800ac50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000089c  20000090  0800ace0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800ace0  0002092c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c98  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004943  00000000  00000000  00043d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  000486a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  00049a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4ba  00000000  00000000  0004acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e728  00000000  00000000  0006618a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009118a  00000000  00000000  000848b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00115a3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  00115a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a998 	.word	0x0800a998

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800a998 	.word	0x0800a998

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	4b61      	ldr	r3, [pc, #388]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a60      	ldr	r2, [pc, #384]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b5e      	ldr	r3, [pc, #376]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	61bb      	str	r3, [r7, #24]
 80005b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	4b5a      	ldr	r3, [pc, #360]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a59      	ldr	r2, [pc, #356]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b57      	ldr	r3, [pc, #348]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b53      	ldr	r3, [pc, #332]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a52      	ldr	r2, [pc, #328]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b50      	ldr	r3, [pc, #320]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b4c      	ldr	r3, [pc, #304]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a4b      	ldr	r2, [pc, #300]	; (8000728 <MX_GPIO_Init+0x1a0>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b49      	ldr	r3, [pc, #292]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b45      	ldr	r3, [pc, #276]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a44      	ldr	r2, [pc, #272]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b42      	ldr	r3, [pc, #264]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b3e      	ldr	r3, [pc, #248]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a3d      	ldr	r2, [pc, #244]	; (8000728 <MX_GPIO_Init+0x1a0>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b3b      	ldr	r3, [pc, #236]	; (8000728 <MX_GPIO_Init+0x1a0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2108      	movs	r1, #8
 800064a:	4838      	ldr	r0, [pc, #224]	; (800072c <MX_GPIO_Init+0x1a4>)
 800064c:	f001 fa78 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000650:	2201      	movs	r2, #1
 8000652:	2101      	movs	r1, #1
 8000654:	4836      	ldr	r0, [pc, #216]	; (8000730 <MX_GPIO_Init+0x1a8>)
 8000656:	f001 fa73 	bl	8001b40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800065a:	2200      	movs	r2, #0
 800065c:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000660:	4834      	ldr	r0, [pc, #208]	; (8000734 <MX_GPIO_Init+0x1ac>)
 8000662:	f001 fa6d 	bl	8001b40 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000666:	2304      	movs	r3, #4
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	482c      	ldr	r0, [pc, #176]	; (800072c <MX_GPIO_Init+0x1a4>)
 800067a:	f000 ffc5 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800067e:	2308      	movs	r3, #8
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000682:	2301      	movs	r3, #1
 8000684:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	2300      	movs	r3, #0
 8000688:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068a:	2300      	movs	r3, #0
 800068c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	4619      	mov	r1, r3
 8000694:	4825      	ldr	r0, [pc, #148]	; (800072c <MX_GPIO_Init+0x1a4>)
 8000696:	f000 ffb7 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 800069a:	2332      	movs	r3, #50	; 0x32
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800069e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	481f      	ldr	r0, [pc, #124]	; (800072c <MX_GPIO_Init+0x1a4>)
 80006b0:	f000 ffaa 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80006b4:	2301      	movs	r3, #1
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4619      	mov	r1, r3
 80006ca:	4819      	ldr	r0, [pc, #100]	; (8000730 <MX_GPIO_Init+0x1a8>)
 80006cc:	f000 ff9c 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006d0:	2301      	movs	r3, #1
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4814      	ldr	r0, [pc, #80]	; (8000738 <MX_GPIO_Init+0x1b0>)
 80006e6:	f000 ff8f 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006ea:	f24f 0310 	movw	r3, #61456	; 0xf010
 80006ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	2300      	movs	r3, #0
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4619      	mov	r1, r3
 8000702:	480c      	ldr	r0, [pc, #48]	; (8000734 <MX_GPIO_Init+0x1ac>)
 8000704:	f000 ff80 	bl	8001608 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000708:	2320      	movs	r3, #32
 800070a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000714:	f107 031c 	add.w	r3, r7, #28
 8000718:	4619      	mov	r1, r3
 800071a:	4806      	ldr	r0, [pc, #24]	; (8000734 <MX_GPIO_Init+0x1ac>)
 800071c:	f000 ff74 	bl	8001608 <HAL_GPIO_Init>

}
 8000720:	bf00      	nop
 8000722:	3730      	adds	r7, #48	; 0x30
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	40023800 	.word	0x40023800
 800072c:	40021000 	.word	0x40021000
 8000730:	40020800 	.word	0x40020800
 8000734:	40020c00 	.word	0x40020c00
 8000738:	40020000 	.word	0x40020000

0800073c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x50>)
 8000742:	4a13      	ldr	r2, [pc, #76]	; (8000790 <MX_I2C1_Init+0x54>)
 8000744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x50>)
 8000748:	4a12      	ldr	r2, [pc, #72]	; (8000794 <MX_I2C1_Init+0x58>)
 800074a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_I2C1_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_I2C1_Init+0x50>)
 800075a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_I2C1_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_I2C1_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_I2C1_Init+0x50>)
 800077a:	f002 ffb7 	bl	80036ec <HAL_I2C_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000784:	f000 fb9c 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000bc 	.word	0x200000bc
 8000790:	40005400 	.word	0x40005400
 8000794:	000186a0 	.word	0x000186a0

08000798 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0314 	add.w	r3, r7, #20
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a19      	ldr	r2, [pc, #100]	; (800081c <HAL_I2C_MspInit+0x84>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d12c      	bne.n	8000814 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	4b18      	ldr	r3, [pc, #96]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a17      	ldr	r2, [pc, #92]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007d6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007dc:	2312      	movs	r3, #18
 80007de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007e8:	2304      	movs	r3, #4
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480c      	ldr	r0, [pc, #48]	; (8000824 <HAL_I2C_MspInit+0x8c>)
 80007f4:	f000 ff08 	bl	8001608 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <HAL_I2C_MspInit+0x88>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_I2C_MspInit+0x88>)
 8000802:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000806:	6413      	str	r3, [r2, #64]	; 0x40
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <HAL_I2C_MspInit+0x88>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40005400 	.word	0x40005400
 8000820:	40023800 	.word	0x40023800
 8000824:	40020400 	.word	0x40020400

08000828 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <MX_I2S2_Init+0x50>)
 800082e:	4a13      	ldr	r2, [pc, #76]	; (800087c <MX_I2S2_Init+0x54>)
 8000830:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <MX_I2S2_Init+0x50>)
 8000834:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000838:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <MX_I2S2_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_I2S2_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MX_I2S2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <MX_I2S2_Init+0x50>)
 800084e:	4a0c      	ldr	r2, [pc, #48]	; (8000880 <MX_I2S2_Init+0x58>)
 8000850:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_I2S2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <MX_I2S2_Init+0x50>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_I2S2_Init+0x50>)
 8000860:	2201      	movs	r2, #1
 8000862:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_I2S2_Init+0x50>)
 8000866:	f003 ff79 	bl	800475c <HAL_I2S_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000870:	f000 fb26 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000110 	.word	0x20000110
 800087c:	40003800 	.word	0x40003800
 8000880:	00017700 	.word	0x00017700

08000884 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000888:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_I2S3_Init+0x54>)
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <MX_I2S3_Init+0x58>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <MX_I2S3_Init+0x54>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_I2S3_Init+0x54>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_I2S3_Init+0x54>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008ac:	4a0c      	ldr	r2, [pc, #48]	; (80008e0 <MX_I2S3_Init+0x5c>)
 80008ae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <MX_I2S3_Init+0x54>)
 80008c4:	f003 ff4a 	bl	800475c <HAL_I2S_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008ce:	f000 faf7 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000158 	.word	0x20000158
 80008dc:	40003c00 	.word	0x40003c00
 80008e0:	00017700 	.word	0x00017700

080008e4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08e      	sub	sp, #56	; 0x38
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a59      	ldr	r2, [pc, #356]	; (8000a68 <HAL_I2S_MspInit+0x184>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d15b      	bne.n	80009be <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
 800090a:	4b58      	ldr	r3, [pc, #352]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a57      	ldr	r2, [pc, #348]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b55      	ldr	r3, [pc, #340]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	4b51      	ldr	r3, [pc, #324]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a50      	ldr	r2, [pc, #320]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 800092c:	f043 0304 	orr.w	r3, r3, #4
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b4e      	ldr	r3, [pc, #312]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0304 	and.w	r3, r3, #4
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
 8000942:	4b4a      	ldr	r3, [pc, #296]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a49      	ldr	r2, [pc, #292]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b47      	ldr	r3, [pc, #284]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
 8000958:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800095a:	2304      	movs	r3, #4
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800096a:	2306      	movs	r3, #6
 800096c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	4619      	mov	r1, r3
 8000974:	483e      	ldr	r0, [pc, #248]	; (8000a70 <HAL_I2S_MspInit+0x18c>)
 8000976:	f000 fe47 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4836      	ldr	r0, [pc, #216]	; (8000a70 <HAL_I2S_MspInit+0x18c>)
 8000996:	f000 fe37 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800099a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009ac:	2305      	movs	r3, #5
 80009ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	482f      	ldr	r0, [pc, #188]	; (8000a74 <HAL_I2S_MspInit+0x190>)
 80009b8:	f000 fe26 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009bc:	e04f      	b.n	8000a5e <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a2d      	ldr	r2, [pc, #180]	; (8000a78 <HAL_I2S_MspInit+0x194>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d14a      	bne.n	8000a5e <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d0:	4a26      	ldr	r2, [pc, #152]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009d6:	6413      	str	r3, [r2, #64]	; 0x40
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009e0:	617b      	str	r3, [r7, #20]
 80009e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	4b20      	ldr	r3, [pc, #128]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a1f      	ldr	r2, [pc, #124]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b1d      	ldr	r3, [pc, #116]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0301 	and.w	r3, r3, #1
 80009fc:	613b      	str	r3, [r7, #16]
 80009fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_I2S_MspInit+0x188>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0304 	and.w	r3, r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a1c:	2310      	movs	r3, #16
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a2c:	2306      	movs	r3, #6
 8000a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4811      	ldr	r0, [pc, #68]	; (8000a7c <HAL_I2S_MspInit+0x198>)
 8000a38:	f000 fde6 	bl	8001608 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4805      	ldr	r0, [pc, #20]	; (8000a70 <HAL_I2S_MspInit+0x18c>)
 8000a5a:	f000 fdd5 	bl	8001608 <HAL_GPIO_Init>
}
 8000a5e:	bf00      	nop
 8000a60:	3738      	adds	r7, #56	; 0x38
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40003800 	.word	0x40003800
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40003c00 	.word	0x40003c00
 8000a7c:	40020000 	.word	0x40020000

08000a80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b09c      	sub	sp, #112	; 0x70
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fbe9 	bl	800125c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f851 	bl	8000b30 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000a8e:	f000 f8b7 	bl	8000c00 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f7ff fd79 	bl	8000588 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a96:	f7ff fe51 	bl	800073c <MX_I2C1_Init>
  MX_I2S2_Init();
 8000a9a:	f7ff fec5 	bl	8000828 <MX_I2S2_Init>
  MX_I2S3_Init();
 8000a9e:	f7ff fef1 	bl	8000884 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000aa2:	f000 fa1d 	bl	8000ee0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000aa6:	f008 ffff 	bl	8009aa8 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000aaa:	f000 fb3b 	bl	8001124 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init();
 8000aae:	f000 f92f 	bl	8000d10 <MPU6050_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000ab2:	f009 f81f 	bl	8009af4 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // blinks green
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000aba:	481a      	ldr	r0, [pc, #104]	; (8000b24 <main+0xa4>)
 8000abc:	f001 f872 	bl	8001ba4 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 8000ac0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ac4:	f000 fc3c 	bl	8001340 <HAL_Delay>

    MPU6050_GetAllData(&Data);
 8000ac8:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 f954 	bl	8000d7a <MPU6050_GetAllData>

    err = print_DataToTerminal(&Data);
 8000ad2:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f000 f9a8 	bl	8000e2c <print_DataToTerminal>
 8000adc:	66f8      	str	r0, [r7, #108]	; 0x6c
    if (err != 0) {
 8000ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d018      	beq.n	8000b16 <main+0x96>
    	sprintf(dbg_msg, "Error has occurred: %d\n", err);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000ae8:	490f      	ldr	r1, [pc, #60]	; (8000b28 <main+0xa8>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f009 fbe0 	bl	800a2b0 <siprintf>
    	HAL_UART_Transmit(&huart2, (uint8_t *) dbg_msg, strlen(dbg_msg), HAL_MAX_DELAY);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff fb74 	bl	80001e0 <strlen>
 8000af8:	4603      	mov	r3, r0
 8000afa:	b29a      	uxth	r2, r3
 8000afc:	1d39      	adds	r1, r7, #4
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b02:	480a      	ldr	r0, [pc, #40]	; (8000b2c <main+0xac>)
 8000b04:	f005 fe1a 	bl	800673c <HAL_UART_Transmit>
    	// Error_Handler();
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b0e:	4805      	ldr	r0, [pc, #20]	; (8000b24 <main+0xa4>)
 8000b10:	f001 f816 	bl	8001b40 <HAL_GPIO_WritePin>
    	continue;
 8000b14:	e005      	b.n	8000b22 <main+0xa2>
    } else {
    	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1c:	4801      	ldr	r0, [pc, #4]	; (8000b24 <main+0xa4>)
 8000b1e:	f001 f80f 	bl	8001b40 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000b22:	e7c6      	b.n	8000ab2 <main+0x32>
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	0800a9b0 	.word	0x0800a9b0
 8000b2c:	200001f8 	.word	0x200001f8

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b094      	sub	sp, #80	; 0x50
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0320 	add.w	r3, r7, #32
 8000b3a:	2230      	movs	r2, #48	; 0x30
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f009 faf4 	bl	800a12c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b54:	2300      	movs	r3, #0
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a26      	ldr	r2, [pc, #152]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
 8000b64:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <SystemClock_Config+0xc8>)
 8000b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6c:	60bb      	str	r3, [r7, #8]
 8000b6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b70:	2300      	movs	r3, #0
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a20      	ldr	r2, [pc, #128]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <SystemClock_Config+0xcc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2301      	movs	r3, #1
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b94:	2310      	movs	r3, #16
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ba0:	2308      	movs	r3, #8
 8000ba2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ba4:	23c0      	movs	r3, #192	; 0xc0
 8000ba6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000bac:	2308      	movs	r3, #8
 8000bae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb0:	f107 0320 	add.w	r3, r7, #32
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f004 fb2f 	bl	8005218 <HAL_RCC_OscConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bc0:	f000 f97e 	bl	8000ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bd0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bda:	f107 030c 	add.w	r3, r7, #12
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fe41 	bl	8005868 <HAL_RCC_ClockConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bec:	f000 f968 	bl	8000ec0 <Error_Handler>
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	3750      	adds	r7, #80	; 0x50
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40007000 	.word	0x40007000

08000c00 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c06:	463b      	mov	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c16:	2301      	movs	r3, #1
 8000c18:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8000c1a:	23c8      	movs	r3, #200	; 0xc8
 8000c1c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 8;
 8000c1e:	2308      	movs	r3, #8
 8000c20:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 4;
 8000c22:	2304      	movs	r3, #4
 8000c24:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f005 f8c1 	bl	8005db0 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8000c34:	f000 f944 	bl	8000ec0 <Error_Handler>
  }
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <I2C_WriteBuffer>:

/* USER CODE BEGIN 4 */
int I2C_WriteBuffer(uint8_t I2C_ADDRESS, uint8_t *aTxBuffer, uint8_t TXBUFFERSIZE) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	4603      	mov	r3, r0
 8000c48:	6039      	str	r1, [r7, #0]
 8000c4a:	71fb      	strb	r3, [r7, #7]
 8000c4c:	4613      	mov	r3, r2
 8000c4e:	71bb      	strb	r3, [r7, #6]
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8000c50:	e007      	b.n	8000c62 <I2C_WriteBuffer+0x22>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8000c52:	4812      	ldr	r0, [pc, #72]	; (8000c9c <I2C_WriteBuffer+0x5c>)
 8000c54:	f003 fa48 	bl	80040e8 <HAL_I2C_GetError>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d001      	beq.n	8000c62 <I2C_WriteBuffer+0x22>
            // _Error_Handler(__FILE__, aTxBuffer[0]);
        	return 1;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e017      	b.n	8000c92 <I2C_WriteBuffer+0x52>
    while(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)I2C_ADDRESS<<1, (uint8_t*)aTxBuffer, (uint16_t)TXBUFFERSIZE, (uint32_t)1000)!= HAL_OK){
 8000c62:	79fb      	ldrb	r3, [r7, #7]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	79bb      	ldrb	r3, [r7, #6]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	4809      	ldr	r0, [pc, #36]	; (8000c9c <I2C_WriteBuffer+0x5c>)
 8000c78:	f002 ff04 	bl	8003a84 <HAL_I2C_Master_Transmit>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1e7      	bne.n	8000c52 <I2C_WriteBuffer+0x12>
        }

    }

      while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000c82:	bf00      	nop
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <I2C_WriteBuffer+0x5c>)
 8000c86:	f003 fa21 	bl	80040cc <HAL_I2C_GetState>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b20      	cmp	r3, #32
 8000c8e:	d1f9      	bne.n	8000c84 <I2C_WriteBuffer+0x44>

      return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000bc 	.word	0x200000bc

08000ca0 <I2C_ReadBuffer>:

int I2C_ReadBuffer(uint8_t I2C_ADDRESS, uint8_t RegAddr, uint8_t *aRxBuffer, uint8_t RXBUFFERSIZE){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af02      	add	r7, sp, #8
 8000ca6:	603a      	str	r2, [r7, #0]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
 8000cae:	460b      	mov	r3, r1
 8000cb0:	71bb      	strb	r3, [r7, #6]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	717b      	strb	r3, [r7, #5]

    I2C_WriteBuffer(I2C_ADDRESS, &RegAddr, 1);
 8000cb6:	1db9      	adds	r1, r7, #6
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff ffbf 	bl	8000c40 <I2C_WriteBuffer>

    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8000cc2:	e007      	b.n	8000cd4 <I2C_ReadBuffer+0x34>
        if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF){
 8000cc4:	4811      	ldr	r0, [pc, #68]	; (8000d0c <I2C_ReadBuffer+0x6c>)
 8000cc6:	f003 fa0f 	bl	80040e8 <HAL_I2C_GetError>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b04      	cmp	r3, #4
 8000cce:	d001      	beq.n	8000cd4 <I2C_ReadBuffer+0x34>
            // _Error_Handler(__FILE__, __LINE__);
        	return 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	e017      	b.n	8000d04 <I2C_ReadBuffer+0x64>
    while(HAL_I2C_Master_Receive(&hi2c1, (uint16_t)I2C_ADDRESS<<1, aRxBuffer, (uint16_t)RXBUFFERSIZE, (uint32_t)1000) != HAL_OK){
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	b299      	uxth	r1, r3
 8000cdc:	797b      	ldrb	r3, [r7, #5]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	9200      	str	r2, [sp, #0]
 8000ce6:	683a      	ldr	r2, [r7, #0]
 8000ce8:	4808      	ldr	r0, [pc, #32]	; (8000d0c <I2C_ReadBuffer+0x6c>)
 8000cea:	f002 ffc9 	bl	8003c80 <HAL_I2C_Master_Receive>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d1e7      	bne.n	8000cc4 <I2C_ReadBuffer+0x24>
        }
    }

    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY){}
 8000cf4:	bf00      	nop
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <I2C_ReadBuffer+0x6c>)
 8000cf8:	f003 f9e8 	bl	80040cc <HAL_I2C_GetState>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b20      	cmp	r3, #32
 8000d00:	d1f9      	bne.n	8000cf6 <I2C_ReadBuffer+0x56>

    return 0;
 8000d02:	2300      	movs	r3, #0
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	200000bc 	.word	0x200000bc

08000d10 <MPU6050_Init>:

int MPU6050_Init(void){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

    uint8_t buffer[7];
    int res = 0;
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]

    buffer[0] = MPU6050_RA_PWR_MGMT_1;
 8000d1a:	236b      	movs	r3, #107	; 0x6b
 8000d1c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x00;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2202      	movs	r2, #2
 8000d26:	4619      	mov	r1, r3
 8000d28:	2068      	movs	r0, #104	; 0x68
 8000d2a:	f7ff ff89 	bl	8000c40 <I2C_WriteBuffer>
 8000d2e:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MPU6050_Init+0x2a>
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	e01b      	b.n	8000d72 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_GYRO_CONFIG;
 8000d3a:	231b      	movs	r3, #27
 8000d3c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x8;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8000d42:	1d3b      	adds	r3, r7, #4
 8000d44:	2202      	movs	r2, #2
 8000d46:	4619      	mov	r1, r3
 8000d48:	2068      	movs	r0, #104	; 0x68
 8000d4a:	f7ff ff79 	bl	8000c40 <I2C_WriteBuffer>
 8000d4e:	60f8      	str	r0, [r7, #12]
    if (res != 0) return res;
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MPU6050_Init+0x4a>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	e00b      	b.n	8000d72 <MPU6050_Init+0x62>

    buffer[0] = MPU6050_RA_ACCEL_CONFIG;
 8000d5a:	231c      	movs	r3, #28
 8000d5c:	713b      	strb	r3, [r7, #4]
    buffer[1] = 0x10;
 8000d5e:	2310      	movs	r3, #16
 8000d60:	717b      	strb	r3, [r7, #5]
    res = I2C_WriteBuffer(MPU6050_ADDRESS_AD0_LOW,buffer,2);
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2202      	movs	r2, #2
 8000d66:	4619      	mov	r1, r3
 8000d68:	2068      	movs	r0, #104	; 0x68
 8000d6a:	f7ff ff69 	bl	8000c40 <I2C_WriteBuffer>
 8000d6e:	60f8      	str	r0, [r7, #12]

    return res;
 8000d70:	68fb      	ldr	r3, [r7, #12]
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <MPU6050_GetAllData>:


void MPU6050_GetAllData(int16_t *Data){
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b088      	sub	sp, #32
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]

  uint8_t accelbuffer[14];

  I2C_ReadBuffer(MPU6050_ADDRESS_AD0_LOW,MPU6050_RA_ACCEL_XOUT_H, accelbuffer, 14);
 8000d82:	f107 0208 	add.w	r2, r7, #8
 8000d86:	230e      	movs	r3, #14
 8000d88:	213b      	movs	r1, #59	; 0x3b
 8000d8a:	2068      	movs	r0, #104	; 0x68
 8000d8c:	f7ff ff88 	bl	8000ca0 <I2C_ReadBuffer>

  /* Registers 59 to 64 – Accelerometer Measurements */
  for (int i = 0; i< 3; i++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
 8000d94:	e01c      	b.n	8000dd0 <MPU6050_GetAllData+0x56>
      Data[i] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	f107 0220 	add.w	r2, r7, #32
 8000d9e:	4413      	add	r3, r2
 8000da0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	3301      	adds	r3, #1
 8000dae:	f107 0120 	add.w	r1, r7, #32
 8000db2:	440b      	add	r3, r1
 8000db4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4413      	add	r3, r2
 8000dbc:	b299      	uxth	r1, r3
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b20a      	sxth	r2, r1
 8000dc8:	801a      	strh	r2, [r3, #0]
  for (int i = 0; i< 3; i++)
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3301      	adds	r3, #1
 8000dce:	61fb      	str	r3, [r7, #28]
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	dddf      	ble.n	8000d96 <MPU6050_GetAllData+0x1c>

  /* Registers 65 and 66 – Temperature Measurement */

  /* Registers 67 to 72 – Gyroscope Measurements */
  for (int i = 4; i < 7; i++)
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	61bb      	str	r3, [r7, #24]
 8000dda:	e01f      	b.n	8000e1c <MPU6050_GetAllData+0xa2>
      Data[i - 1] = ((int16_t) ((uint16_t) accelbuffer[2 * i] << 8) + accelbuffer[2 * i + 1]);
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	f107 0220 	add.w	r2, r7, #32
 8000de4:	4413      	add	r3, r2
 8000de6:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	69bb      	ldr	r3, [r7, #24]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	3301      	adds	r3, #1
 8000df4:	f107 0120 	add.w	r1, r7, #32
 8000df8:	440b      	add	r3, r1
 8000dfa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4413      	add	r3, r2
 8000e02:	b299      	uxth	r1, r3
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	005b      	lsls	r3, r3, #1
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	b20a      	sxth	r2, r1
 8000e14:	801a      	strh	r2, [r3, #0]
  for (int i = 4; i < 7; i++)
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	dddc      	ble.n	8000ddc <MPU6050_GetAllData+0x62>

}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <print_DataToTerminal>:


int print_DataToTerminal(int16_t *Data) {
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	b0a1      	sub	sp, #132	; 0x84
 8000e30:	af04      	add	r7, sp, #16
 8000e32:	6078      	str	r0, [r7, #4]
	char msg[BUF_SIZE];
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
			Data[0], Data[1], Data[2],
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e3a:	461d      	mov	r5, r3
			Data[0], Data[1], Data[2],
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3302      	adds	r3, #2
 8000e40:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e44:	461e      	mov	r6, r3
			Data[0], Data[1], Data[2],
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e4e:	461a      	mov	r2, r3
			Data[3], Data[4], Data[5]);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3306      	adds	r3, #6
 8000e54:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e58:	4619      	mov	r1, r3
			Data[3], Data[4], Data[5]);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	3308      	adds	r3, #8
 8000e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e62:	461c      	mov	r4, r3
			Data[3], Data[4], Data[5]);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	330a      	adds	r3, #10
 8000e68:	f9b3 3000 	ldrsh.w	r3, [r3]
	sprintf(msg, "A: %d, %d, %d; G: %d, %d, %d\n",
 8000e6c:	f107 0008 	add.w	r0, r7, #8
 8000e70:	9303      	str	r3, [sp, #12]
 8000e72:	9402      	str	r4, [sp, #8]
 8000e74:	9101      	str	r1, [sp, #4]
 8000e76:	9200      	str	r2, [sp, #0]
 8000e78:	4633      	mov	r3, r6
 8000e7a:	462a      	mov	r2, r5
 8000e7c:	490e      	ldr	r1, [pc, #56]	; (8000eb8 <print_DataToTerminal+0x8c>)
 8000e7e:	f009 fa17 	bl	800a2b0 <siprintf>

	// remembet that this works as sizeof char == 1
	int err = HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f9aa 	bl	80001e0 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f107 0108 	add.w	r1, r7, #8
 8000e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <print_DataToTerminal+0x90>)
 8000e9a:	f005 fc4f 	bl	800673c <HAL_UART_Transmit>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (err != HAL_OK) return err;
 8000ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <print_DataToTerminal+0x80>
 8000ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000eaa:	e000      	b.n	8000eae <print_DataToTerminal+0x82>

	return 0;
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3774      	adds	r7, #116	; 0x74
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	0800a9c8 	.word	0x0800a9c8
 8000ebc:	200001f8 	.word	0x200001f8

08000ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec4:	b672      	cpsid	i
}
 8000ec6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <Error_Handler+0x8>

08000eca <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ee4:	4b17      	ldr	r3, [pc, #92]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ee6:	4a18      	ldr	r2, [pc, #96]	; (8000f48 <MX_SPI1_Init+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b16      	ldr	r3, [pc, #88]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000efe:	4b11      	ldr	r3, [pc, #68]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f12:	4b0c      	ldr	r3, [pc, #48]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f18:	4b0a      	ldr	r3, [pc, #40]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f24:	4b07      	ldr	r3, [pc, #28]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f2c:	220a      	movs	r2, #10
 8000f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <MX_SPI1_Init+0x64>)
 8000f32:	f005 f9b1 	bl	8006298 <HAL_SPI_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f3c:	f7ff ffc0 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f40:	bf00      	nop
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001a0 	.word	0x200001a0
 8000f48:	40013000 	.word	0x40013000

08000f4c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	; 0x28
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 0314 	add.w	r3, r7, #20
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <HAL_SPI_MspInit+0x84>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d12b      	bne.n	8000fc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f76:	4a17      	ldr	r2, [pc, #92]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a10      	ldr	r2, [pc, #64]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_SPI_MspInit+0x88>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000fa6:	23e0      	movs	r3, #224	; 0xe0
 8000fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb6:	2305      	movs	r3, #5
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_SPI_MspInit+0x8c>)
 8000fc2:	f000 fb21 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	3728      	adds	r7, #40	; 0x28
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40020000 	.word	0x40020000

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <HAL_MspInit+0x4c>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a0f      	ldr	r2, [pc, #60]	; (8001028 <HAL_MspInit+0x4c>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b0d      	ldr	r3, [pc, #52]	; (8001028 <HAL_MspInit+0x4c>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]
 8001002:	4b09      	ldr	r3, [pc, #36]	; (8001028 <HAL_MspInit+0x4c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_MspInit+0x4c>)
 8001008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100c:	6413      	str	r3, [r2, #64]	; 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_MspInit+0x4c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800101a:	2007      	movs	r0, #7
 800101c:	f000 fa84 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40023800 	.word	0x40023800

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f942 	bl	8001300 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}

08001080 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001084:	4802      	ldr	r0, [pc, #8]	; (8001090 <OTG_FS_IRQHandler+0x10>)
 8001086:	f001 f82b 	bl	80020e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800108a:	bf00      	nop
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000618 	.word	0x20000618

08001094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b086      	sub	sp, #24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800109c:	4a14      	ldr	r2, [pc, #80]	; (80010f0 <_sbrk+0x5c>)
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <_sbrk+0x60>)
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <_sbrk+0x64>)
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <_sbrk+0x68>)
 80010b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010b6:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <_sbrk+0x64>)
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4413      	add	r3, r2
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d207      	bcs.n	80010d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010c4:	f008 fff8 	bl	800a0b8 <__errno>
 80010c8:	4603      	mov	r3, r0
 80010ca:	220c      	movs	r2, #12
 80010cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010d2:	e009      	b.n	80010e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010da:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <_sbrk+0x64>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <_sbrk+0x64>)
 80010e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010e6:	68fb      	ldr	r3, [r7, #12]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20020000 	.word	0x20020000
 80010f4:	00000400 	.word	0x00000400
 80010f8:	200000ac 	.word	0x200000ac
 80010fc:	20000930 	.word	0x20000930

08001100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800112a:	4a12      	ldr	r2, [pc, #72]	; (8001174 <MX_USART2_UART_Init+0x50>)
 800112c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800113c:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800114a:	220c      	movs	r2, #12
 800114c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114e:	4b08      	ldr	r3, [pc, #32]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 8001156:	2200      	movs	r2, #0
 8001158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_USART2_UART_Init+0x4c>)
 800115c:	f005 fa38 	bl	80065d0 <HAL_UART_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001166:	f7ff feab 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200001f8 	.word	0x200001f8
 8001174:	40004400 	.word	0x40004400

08001178 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a19      	ldr	r2, [pc, #100]	; (80011fc <HAL_UART_MspInit+0x84>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d12b      	bne.n	80011f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	613b      	str	r3, [r7, #16]
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	4a17      	ldr	r2, [pc, #92]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a8:	6413      	str	r3, [r2, #64]	; 0x40
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_UART_MspInit+0x88>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011d2:	230c      	movs	r3, #12
 80011d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011e2:	2307      	movs	r3, #7
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_UART_MspInit+0x8c>)
 80011ee:	f000 fa0b 	bl	8001608 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011f2:	bf00      	nop
 80011f4:	3728      	adds	r7, #40	; 0x28
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40004400 	.word	0x40004400
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120e:	490e      	ldr	r1, [pc, #56]	; (8001248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001224:	4c0b      	ldr	r4, [pc, #44]	; (8001254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001232:	f7ff ff65 	bl	8001100 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f008 ff45 	bl	800a0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fc21 	bl	8000a80 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001240:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800124c:	0800ac50 	.word	0x0800ac50
  ldr r2, =_sbss
 8001250:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001254:	2000092c 	.word	0x2000092c

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>
	...

0800125c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001260:	4b0e      	ldr	r3, [pc, #56]	; (800129c <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <HAL_Init+0x40>)
 8001266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800126a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_Init+0x40>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_Init+0x40>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001278:	4b08      	ldr	r3, [pc, #32]	; (800129c <HAL_Init+0x40>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_Init+0x40>)
 800127e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001282:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001284:	2003      	movs	r0, #3
 8001286:	f000 f94f 	bl	8001528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 f808 	bl	80012a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001290:	f7ff fea4 	bl	8000fdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023c00 	.word	0x40023c00

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_InitTick+0x54>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_InitTick+0x58>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f996 	bl	80015f0 <HAL_SYSTICK_Config>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e00e      	b.n	80012ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b0f      	cmp	r3, #15
 80012d2:	d80a      	bhi.n	80012ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d4:	2200      	movs	r2, #0
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012dc:	f000 f944 	bl	8001568 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012e0:	4a06      	ldr	r2, [pc, #24]	; (80012fc <HAL_InitTick+0x5c>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e000      	b.n	80012ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000000 	.word	0x20000000
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000004 	.word	0x20000004

08001300 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001304:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_IncTick+0x20>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_IncTick+0x24>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4413      	add	r3, r2
 8001310:	4a04      	ldr	r2, [pc, #16]	; (8001324 <HAL_IncTick+0x24>)
 8001312:	6013      	str	r3, [r2, #0]
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008
 8001324:	2000023c 	.word	0x2000023c

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000023c 	.word	0x2000023c

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001358:	d005      	beq.n	8001366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <HAL_Delay+0x44>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	461a      	mov	r2, r3
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	4413      	add	r3, r2
 8001364:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001366:	bf00      	nop
 8001368:	f7ff ffde 	bl	8001328 <HAL_GetTick>
 800136c:	4602      	mov	r2, r0
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	429a      	cmp	r2, r3
 8001376:	d8f7      	bhi.n	8001368 <HAL_Delay+0x28>
  {
  }
}
 8001378:	bf00      	nop
 800137a:	bf00      	nop
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000008 	.word	0x20000008

08001388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139e:	68ba      	ldr	r2, [r7, #8]
 80013a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a4:	4013      	ands	r3, r2
 80013a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ba:	4a04      	ldr	r2, [pc, #16]	; (80013cc <__NVIC_SetPriorityGrouping+0x44>)
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	60d3      	str	r3, [r2, #12]
}
 80013c0:	bf00      	nop
 80013c2:	3714      	adds	r7, #20
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d4:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <__NVIC_GetPriorityGrouping+0x18>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	f003 0307 	and.w	r3, r3, #7
}
 80013de:	4618      	mov	r0, r3
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	db0b      	blt.n	8001416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fe:	79fb      	ldrb	r3, [r7, #7]
 8001400:	f003 021f 	and.w	r2, r3, #31
 8001404:	4907      	ldr	r1, [pc, #28]	; (8001424 <__NVIC_EnableIRQ+0x38>)
 8001406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140a:	095b      	lsrs	r3, r3, #5
 800140c:	2001      	movs	r0, #1
 800140e:	fa00 f202 	lsl.w	r2, r0, r2
 8001412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000e100 	.word	0xe000e100

08001428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	6039      	str	r1, [r7, #0]
 8001432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001438:	2b00      	cmp	r3, #0
 800143a:	db0a      	blt.n	8001452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	b2da      	uxtb	r2, r3
 8001440:	490c      	ldr	r1, [pc, #48]	; (8001474 <__NVIC_SetPriority+0x4c>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	0112      	lsls	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	440b      	add	r3, r1
 800144c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001450:	e00a      	b.n	8001468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	b2da      	uxtb	r2, r3
 8001456:	4908      	ldr	r1, [pc, #32]	; (8001478 <__NVIC_SetPriority+0x50>)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	3b04      	subs	r3, #4
 8001460:	0112      	lsls	r2, r2, #4
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	440b      	add	r3, r1
 8001466:	761a      	strb	r2, [r3, #24]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b480      	push	{r7}
 800147e:	b089      	sub	sp, #36	; 0x24
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f1c3 0307 	rsb	r3, r3, #7
 8001496:	2b04      	cmp	r3, #4
 8001498:	bf28      	it	cs
 800149a:	2304      	movcs	r3, #4
 800149c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3304      	adds	r3, #4
 80014a2:	2b06      	cmp	r3, #6
 80014a4:	d902      	bls.n	80014ac <NVIC_EncodePriority+0x30>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	3b03      	subs	r3, #3
 80014aa:	e000      	b.n	80014ae <NVIC_EncodePriority+0x32>
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43da      	mvns	r2, r3
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	401a      	ands	r2, r3
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43d9      	mvns	r1, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d4:	4313      	orrs	r3, r2
         );
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3724      	adds	r7, #36	; 0x24
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3b01      	subs	r3, #1
 80014f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f4:	d301      	bcc.n	80014fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f6:	2301      	movs	r3, #1
 80014f8:	e00f      	b.n	800151a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <SysTick_Config+0x40>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001502:	210f      	movs	r1, #15
 8001504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001508:	f7ff ff8e 	bl	8001428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800150c:	4b05      	ldr	r3, [pc, #20]	; (8001524 <SysTick_Config+0x40>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <SysTick_Config+0x40>)
 8001514:	2207      	movs	r2, #7
 8001516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	e000e010 	.word	0xe000e010

08001528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b07      	cmp	r3, #7
 8001534:	d00f      	beq.n	8001556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b06      	cmp	r3, #6
 800153a:	d00c      	beq.n	8001556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b05      	cmp	r3, #5
 8001540:	d009      	beq.n	8001556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b04      	cmp	r3, #4
 8001546:	d006      	beq.n	8001556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d003      	beq.n	8001556 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800154e:	2192      	movs	r1, #146	; 0x92
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001552:	f7ff fcba 	bl	8000eca <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ff16 	bl	8001388 <__NVIC_SetPriorityGrouping>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	0800a9e8 	.word	0x0800a9e8

08001568 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b0f      	cmp	r3, #15
 800157e:	d903      	bls.n	8001588 <HAL_NVIC_SetPriority+0x20>
 8001580:	21aa      	movs	r1, #170	; 0xaa
 8001582:	480e      	ldr	r0, [pc, #56]	; (80015bc <HAL_NVIC_SetPriority+0x54>)
 8001584:	f7ff fca1 	bl	8000eca <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d903      	bls.n	8001596 <HAL_NVIC_SetPriority+0x2e>
 800158e:	21ab      	movs	r1, #171	; 0xab
 8001590:	480a      	ldr	r0, [pc, #40]	; (80015bc <HAL_NVIC_SetPriority+0x54>)
 8001592:	f7ff fc9a 	bl	8000eca <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001596:	f7ff ff1b 	bl	80013d0 <__NVIC_GetPriorityGrouping>
 800159a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff ff6b 	bl	800147c <NVIC_EncodePriority>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff3a 	bl	8001428 <__NVIC_SetPriority>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	0800a9e8 	.word	0x0800a9e8

080015c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da03      	bge.n	80015da <HAL_NVIC_EnableIRQ+0x1a>
 80015d2:	21be      	movs	r1, #190	; 0xbe
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <HAL_NVIC_EnableIRQ+0x2c>)
 80015d6:	f7ff fc78 	bl	8000eca <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff04 	bl	80013ec <__NVIC_EnableIRQ>
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	0800a9e8 	.word	0x0800a9e8

080015f0 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff ff73 	bl	80014e4 <SysTick_Config>
 80015fe:	4603      	mov	r3, r0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b088      	sub	sp, #32
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a33      	ldr	r2, [pc, #204]	; (80016f0 <HAL_GPIO_Init+0xe8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d017      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a32      	ldr	r2, [pc, #200]	; (80016f4 <HAL_GPIO_Init+0xec>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d013      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4a31      	ldr	r2, [pc, #196]	; (80016f8 <HAL_GPIO_Init+0xf0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d00f      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a30      	ldr	r2, [pc, #192]	; (80016fc <HAL_GPIO_Init+0xf4>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d00b      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a2f      	ldr	r2, [pc, #188]	; (8001700 <HAL_GPIO_Init+0xf8>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d007      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a2e      	ldr	r2, [pc, #184]	; (8001704 <HAL_GPIO_Init+0xfc>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x4e>
 800164e:	21ac      	movs	r1, #172	; 0xac
 8001650:	482d      	ldr	r0, [pc, #180]	; (8001708 <HAL_GPIO_Init+0x100>)
 8001652:	f7ff fc3a 	bl	8000eca <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b29b      	uxth	r3, r3
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x64>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x6c>
 800166c:	21ad      	movs	r1, #173	; 0xad
 800166e:	4826      	ldr	r0, [pc, #152]	; (8001708 <HAL_GPIO_Init+0x100>)
 8001670:	f7ff fc2b 	bl	8000eca <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d035      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d031      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	2b11      	cmp	r3, #17
 800168a:	d02d      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d029      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b12      	cmp	r3, #18
 800169a:	d025      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 80016a4:	d020      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80016ae:	d01b      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 80016b8:	d016      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 80016c2:	d011      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 80016cc:	d00c      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 80016d6:	d007      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0xe0>
 80016e0:	21ae      	movs	r1, #174	; 0xae
 80016e2:	4809      	ldr	r0, [pc, #36]	; (8001708 <HAL_GPIO_Init+0x100>)
 80016e4:	f7ff fbf1 	bl	8000eca <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	e211      	b.n	8001b12 <HAL_GPIO_Init+0x50a>
 80016ee:	bf00      	nop
 80016f0:	40020000 	.word	0x40020000
 80016f4:	40020400 	.word	0x40020400
 80016f8:	40020800 	.word	0x40020800
 80016fc:	40020c00 	.word	0x40020c00
 8001700:	40021000 	.word	0x40021000
 8001704:	40021c00 	.word	0x40021c00
 8001708:	0800aa24 	.word	0x0800aa24
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800170c:	2201      	movs	r2, #1
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	697a      	ldr	r2, [r7, #20]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	429a      	cmp	r2, r3
 8001726:	f040 81f1 	bne.w	8001b0c <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f003 0303 	and.w	r3, r3, #3
 8001732:	2b01      	cmp	r3, #1
 8001734:	d005      	beq.n	8001742 <HAL_GPIO_Init+0x13a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173e:	2b02      	cmp	r3, #2
 8001740:	d144      	bne.n	80017cc <HAL_GPIO_Init+0x1c4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00f      	beq.n	800176a <HAL_GPIO_Init+0x162>
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d00b      	beq.n	800176a <HAL_GPIO_Init+0x162>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d007      	beq.n	800176a <HAL_GPIO_Init+0x162>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d003      	beq.n	800176a <HAL_GPIO_Init+0x162>
 8001762:	21c0      	movs	r1, #192	; 0xc0
 8001764:	489f      	ldr	r0, [pc, #636]	; (80019e4 <HAL_GPIO_Init+0x3dc>)
 8001766:	f7ff fbb0 	bl	8000eca <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017a0:	2201      	movs	r2, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4013      	ands	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	f003 0201 	and.w	r2, r3, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b03      	cmp	r3, #3
 80017d6:	d027      	beq.n	8001828 <HAL_GPIO_Init+0x220>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d00b      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d007      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x1f0>
 80017f0:	21d1      	movs	r1, #209	; 0xd1
 80017f2:	487c      	ldr	r0, [pc, #496]	; (80019e4 <HAL_GPIO_Init+0x3dc>)
 80017f4:	f7ff fb69 	bl	8000eca <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	2203      	movs	r2, #3
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	689a      	ldr	r2, [r3, #8]
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b02      	cmp	r3, #2
 8001832:	f040 80a0 	bne.w	8001976 <HAL_GPIO_Init+0x36e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d077      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d073      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d067      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d063      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	2b01      	cmp	r3, #1
 800186c:	d05f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d05b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b02      	cmp	r3, #2
 800187c:	d057      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d053      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d04f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	2b04      	cmp	r3, #4
 8001894:	d04b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	691b      	ldr	r3, [r3, #16]
 800189a:	2b04      	cmp	r3, #4
 800189c:	d047      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	d043      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b05      	cmp	r3, #5
 80018ac:	d03f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d03b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d037      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d033      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d02f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	2b05      	cmp	r3, #5
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d027      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	2b07      	cmp	r3, #7
 80018e4:	d023      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	2b07      	cmp	r3, #7
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d01b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	2b08      	cmp	r3, #8
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0x326>
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d013      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b09      	cmp	r3, #9
 800190c:	d00f      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691b      	ldr	r3, [r3, #16]
 8001912:	2b09      	cmp	r3, #9
 8001914:	d00b      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d007      	beq.n	800192e <HAL_GPIO_Init+0x326>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	2b0f      	cmp	r3, #15
 8001924:	d003      	beq.n	800192e <HAL_GPIO_Init+0x326>
 8001926:	21de      	movs	r1, #222	; 0xde
 8001928:	482e      	ldr	r0, [pc, #184]	; (80019e4 <HAL_GPIO_Init+0x3dc>)
 800192a:	f7ff face 	bl	8000eca <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	08da      	lsrs	r2, r3, #3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3208      	adds	r2, #8
 8001936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	220f      	movs	r2, #15
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4013      	ands	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	08da      	lsrs	r2, r3, #3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	3208      	adds	r2, #8
 8001970:	69b9      	ldr	r1, [r7, #24]
 8001972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	2203      	movs	r2, #3
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0203 	and.w	r2, r3, #3
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 80aa 	beq.w	8001b0c <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <HAL_GPIO_Init+0x3e0>)
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	4a09      	ldr	r2, [pc, #36]	; (80019e8 <HAL_GPIO_Init+0x3e0>)
 80019c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c6:	6453      	str	r3, [r2, #68]	; 0x44
 80019c8:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <HAL_GPIO_Init+0x3e0>)
 80019ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d4:	4a05      	ldr	r2, [pc, #20]	; (80019ec <HAL_GPIO_Init+0x3e4>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e0:	e006      	b.n	80019f0 <HAL_GPIO_Init+0x3e8>
 80019e2:	bf00      	nop
 80019e4:	0800aa24 	.word	0x0800aa24
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40013800 	.word	0x40013800
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	220f      	movs	r2, #15
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	43db      	mvns	r3, r3
 8001a02:	69ba      	ldr	r2, [r7, #24]
 8001a04:	4013      	ands	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4a46      	ldr	r2, [pc, #280]	; (8001b24 <HAL_GPIO_Init+0x51c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d019      	beq.n	8001a44 <HAL_GPIO_Init+0x43c>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <HAL_GPIO_Init+0x520>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d013      	beq.n	8001a40 <HAL_GPIO_Init+0x438>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a44      	ldr	r2, [pc, #272]	; (8001b2c <HAL_GPIO_Init+0x524>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00d      	beq.n	8001a3c <HAL_GPIO_Init+0x434>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_GPIO_Init+0x528>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d007      	beq.n	8001a38 <HAL_GPIO_Init+0x430>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_GPIO_Init+0x52c>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d101      	bne.n	8001a34 <HAL_GPIO_Init+0x42c>
 8001a30:	2304      	movs	r3, #4
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_Init+0x43e>
 8001a34:	2307      	movs	r3, #7
 8001a36:	e006      	b.n	8001a46 <HAL_GPIO_Init+0x43e>
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e004      	b.n	8001a46 <HAL_GPIO_Init+0x43e>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0x43e>
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <HAL_GPIO_Init+0x43e>
 8001a44:	2300      	movs	r3, #0
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a56:	4938      	ldr	r1, [pc, #224]	; (8001b38 <HAL_GPIO_Init+0x530>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a64:	4b35      	ldr	r3, [pc, #212]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d003      	beq.n	8001a88 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a88:	4a2c      	ldr	r2, [pc, #176]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a8e:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	43db      	mvns	r3, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ab8:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001adc:	4a17      	ldr	r2, [pc, #92]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae2:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	43db      	mvns	r3, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4013      	ands	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b06:	4a0d      	ldr	r2, [pc, #52]	; (8001b3c <HAL_GPIO_Init+0x534>)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	2b0f      	cmp	r3, #15
 8001b16:	f67f adf9 	bls.w	800170c <HAL_GPIO_Init+0x104>
      }
    }
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40020000 	.word	0x40020000
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40020800 	.word	0x40020800
 8001b30:	40020c00 	.word	0x40020c00
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40013c00 	.word	0x40013c00

08001b40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	460b      	mov	r3, r1
 8001b4a:	807b      	strh	r3, [r7, #2]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001b50:	887b      	ldrh	r3, [r7, #2]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <HAL_GPIO_WritePin+0x20>
 8001b56:	887b      	ldrh	r3, [r7, #2]
 8001b58:	0c1b      	lsrs	r3, r3, #16
 8001b5a:	041b      	lsls	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d004      	beq.n	8001b6a <HAL_GPIO_WritePin+0x2a>
 8001b60:	f240 119d 	movw	r1, #413	; 0x19d
 8001b64:	480e      	ldr	r0, [pc, #56]	; (8001ba0 <HAL_GPIO_WritePin+0x60>)
 8001b66:	f7ff f9b0 	bl	8000eca <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001b6a:	787b      	ldrb	r3, [r7, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d007      	beq.n	8001b80 <HAL_GPIO_WritePin+0x40>
 8001b70:	787b      	ldrb	r3, [r7, #1]
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d004      	beq.n	8001b80 <HAL_GPIO_WritePin+0x40>
 8001b76:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_GPIO_WritePin+0x60>)
 8001b7c:	f7ff f9a5 	bl	8000eca <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b86:	887a      	ldrh	r2, [r7, #2]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b8c:	e003      	b.n	8001b96 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b8e:	887b      	ldrh	r3, [r7, #2]
 8001b90:	041a      	lsls	r2, r3, #16
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800aa24 	.word	0x0800aa24

08001ba4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d004      	beq.n	8001bc0 <HAL_GPIO_TogglePin+0x1c>
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	0c1b      	lsrs	r3, r3, #16
 8001bba:	041b      	lsls	r3, r3, #16
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_GPIO_TogglePin+0x26>
 8001bc0:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 8001bc4:	480a      	ldr	r0, [pc, #40]	; (8001bf0 <HAL_GPIO_TogglePin+0x4c>)
 8001bc6:	f7ff f980 	bl	8000eca <assert_failed>

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bd0:	887a      	ldrh	r2, [r7, #2]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	041a      	lsls	r2, r3, #16
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	887b      	ldrh	r3, [r7, #2]
 8001bde:	400b      	ands	r3, r1
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	0800aa24 	.word	0x0800aa24

08001bf4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bf6:	b08f      	sub	sp, #60	; 0x3c
 8001bf8:	af0a      	add	r7, sp, #40	; 0x28
 8001bfa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e05d      	b.n	8001cc2 <HAL_HCD_Init+0xce>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c0e:	d003      	beq.n	8001c18 <HAL_HCD_Init+0x24>
 8001c10:	2179      	movs	r1, #121	; 0x79
 8001c12:	482e      	ldr	r0, [pc, #184]	; (8001ccc <HAL_HCD_Init+0xd8>)
 8001c14:	f7ff f959 	bl	8000eca <assert_failed>

  USBx = hhcd->Instance;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d106      	bne.n	8001c38 <HAL_HCD_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f007 ff96 	bl	8009b64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <HAL_HCD_Init+0x5e>
  {
    hhcd->Init.dma_enable = 0U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 f8ec 	bl	8006e34 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	687e      	ldr	r6, [r7, #4]
 8001c64:	466d      	mov	r5, sp
 8001c66:	f106 0410 	add.w	r4, r6, #16
 8001c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c76:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c7a:	1d33      	adds	r3, r6, #4
 8001c7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	f005 f866 	bl	8006d50 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2101      	movs	r1, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f005 f8e3 	bl	8006e56 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	687e      	ldr	r6, [r7, #4]
 8001c98:	466d      	mov	r5, sp
 8001c9a:	f106 0410 	add.w	r4, r6, #16
 8001c9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ca4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ca6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001caa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cae:	1d33      	adds	r3, r6, #4
 8001cb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cb2:	6838      	ldr	r0, [r7, #0]
 8001cb4:	f005 fa4a 	bl	800714c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	0800aa60 	.word	0x0800aa60

08001cd0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b089      	sub	sp, #36	; 0x24
 8001cd4:	af04      	add	r7, sp, #16
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	4608      	mov	r0, r1
 8001cda:	4611      	mov	r1, r2
 8001cdc:	461a      	mov	r2, r3
 8001cde:	4603      	mov	r3, r0
 8001ce0:	70fb      	strb	r3, [r7, #3]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	70bb      	strb	r3, [r7, #2]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_HC_Init+0x28>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e076      	b.n	8001de6 <HAL_HCD_HC_Init+0x116>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d00:	78fb      	ldrb	r3, [r7, #3]
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	212c      	movs	r1, #44	; 0x2c
 8001d06:	fb01 f303 	mul.w	r3, r1, r3
 8001d0a:	4413      	add	r3, r2
 8001d0c:	333d      	adds	r3, #61	; 0x3d
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	212c      	movs	r1, #44	; 0x2c
 8001d18:	fb01 f303 	mul.w	r3, r1, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3338      	adds	r3, #56	; 0x38
 8001d20:	787a      	ldrb	r2, [r7, #1]
 8001d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	212c      	movs	r1, #44	; 0x2c
 8001d2a:	fb01 f303 	mul.w	r3, r1, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	3340      	adds	r3, #64	; 0x40
 8001d32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d34:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	212c      	movs	r1, #44	; 0x2c
 8001d3c:	fb01 f303 	mul.w	r3, r1, r3
 8001d40:	4413      	add	r3, r2
 8001d42:	3339      	adds	r3, #57	; 0x39
 8001d44:	78fa      	ldrb	r2, [r7, #3]
 8001d46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d48:	78fb      	ldrb	r3, [r7, #3]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	212c      	movs	r1, #44	; 0x2c
 8001d4e:	fb01 f303 	mul.w	r3, r1, r3
 8001d52:	4413      	add	r3, r2
 8001d54:	333f      	adds	r3, #63	; 0x3f
 8001d56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d5c:	78fb      	ldrb	r3, [r7, #3]
 8001d5e:	78ba      	ldrb	r2, [r7, #2]
 8001d60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d64:	b2d0      	uxtb	r0, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	212c      	movs	r1, #44	; 0x2c
 8001d6a:	fb01 f303 	mul.w	r3, r1, r3
 8001d6e:	4413      	add	r3, r2
 8001d70:	333a      	adds	r3, #58	; 0x3a
 8001d72:	4602      	mov	r2, r0
 8001d74:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	da09      	bge.n	8001d92 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d7e:	78fb      	ldrb	r3, [r7, #3]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	212c      	movs	r1, #44	; 0x2c
 8001d84:	fb01 f303 	mul.w	r3, r1, r3
 8001d88:	4413      	add	r3, r2
 8001d8a:	333b      	adds	r3, #59	; 0x3b
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	701a      	strb	r2, [r3, #0]
 8001d90:	e008      	b.n	8001da4 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d92:	78fb      	ldrb	r3, [r7, #3]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	212c      	movs	r1, #44	; 0x2c
 8001d98:	fb01 f303 	mul.w	r3, r1, r3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	333b      	adds	r3, #59	; 0x3b
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	212c      	movs	r1, #44	; 0x2c
 8001daa:	fb01 f303 	mul.w	r3, r1, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	333c      	adds	r3, #60	; 0x3c
 8001db2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001db6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	787c      	ldrb	r4, [r7, #1]
 8001dbe:	78ba      	ldrb	r2, [r7, #2]
 8001dc0:	78f9      	ldrb	r1, [r7, #3]
 8001dc2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc4:	9302      	str	r3, [sp, #8]
 8001dc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dca:	9301      	str	r3, [sp, #4]
 8001dcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	4623      	mov	r3, r4
 8001dd4:	f005 fb34 	bl	8007440 <USB_HC_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}

08001dee <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_HCD_HC_Halt+0x1e>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e00f      	b.n	8001e2c <HAL_HCD_HC_Halt+0x3e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f005 fd70 	bl	8007902 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3710      	adds	r7, #16
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4603      	mov	r3, r0
 8001e44:	70fb      	strb	r3, [r7, #3]
 8001e46:	460b      	mov	r3, r1
 8001e48:	70bb      	strb	r3, [r7, #2]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e4e:	78fb      	ldrb	r3, [r7, #3]
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	212c      	movs	r1, #44	; 0x2c
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	333b      	adds	r3, #59	; 0x3b
 8001e5c:	78ba      	ldrb	r2, [r7, #2]
 8001e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e60:	78fb      	ldrb	r3, [r7, #3]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	212c      	movs	r1, #44	; 0x2c
 8001e66:	fb01 f303 	mul.w	r3, r1, r3
 8001e6a:	4413      	add	r3, r2
 8001e6c:	333f      	adds	r3, #63	; 0x3f
 8001e6e:	787a      	ldrb	r2, [r7, #1]
 8001e70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e72:	7c3b      	ldrb	r3, [r7, #16]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d112      	bne.n	8001e9e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e78:	78fb      	ldrb	r3, [r7, #3]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	212c      	movs	r1, #44	; 0x2c
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	4413      	add	r3, r2
 8001e84:	3342      	adds	r3, #66	; 0x42
 8001e86:	2203      	movs	r2, #3
 8001e88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	212c      	movs	r1, #44	; 0x2c
 8001e90:	fb01 f303 	mul.w	r3, r1, r3
 8001e94:	4413      	add	r3, r2
 8001e96:	333d      	adds	r3, #61	; 0x3d
 8001e98:	7f3a      	ldrb	r2, [r7, #28]
 8001e9a:	701a      	strb	r2, [r3, #0]
 8001e9c:	e008      	b.n	8001eb0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e9e:	78fb      	ldrb	r3, [r7, #3]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	212c      	movs	r1, #44	; 0x2c
 8001ea4:	fb01 f303 	mul.w	r3, r1, r3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3342      	adds	r3, #66	; 0x42
 8001eac:	2202      	movs	r2, #2
 8001eae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	f200 80c6 	bhi.w	8002044 <HAL_HCD_HC_SubmitRequest+0x210>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08002031 	.word	0x08002031
 8001ec8:	08001f35 	.word	0x08001f35
 8001ecc:	08001fb3 	.word	0x08001fb3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ed0:	7c3b      	ldrb	r3, [r7, #16]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	f040 80b8 	bne.w	8002048 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ed8:	78bb      	ldrb	r3, [r7, #2]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f040 80b4 	bne.w	8002048 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ee0:	8b3b      	ldrh	r3, [r7, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	212c      	movs	r1, #44	; 0x2c
 8001eec:	fb01 f303 	mul.w	r3, r1, r3
 8001ef0:	4413      	add	r3, r2
 8001ef2:	3355      	adds	r3, #85	; 0x55
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	212c      	movs	r1, #44	; 0x2c
 8001efe:	fb01 f303 	mul.w	r3, r1, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	3355      	adds	r3, #85	; 0x55
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d109      	bne.n	8001f20 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	212c      	movs	r1, #44	; 0x2c
 8001f12:	fb01 f303 	mul.w	r3, r1, r3
 8001f16:	4413      	add	r3, r2
 8001f18:	3342      	adds	r3, #66	; 0x42
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f1e:	e093      	b.n	8002048 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	212c      	movs	r1, #44	; 0x2c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3342      	adds	r3, #66	; 0x42
 8001f2e:	2202      	movs	r2, #2
 8001f30:	701a      	strb	r2, [r3, #0]
      break;
 8001f32:	e089      	b.n	8002048 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f34:	78bb      	ldrb	r3, [r7, #2]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11d      	bne.n	8001f76 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f3a:	78fb      	ldrb	r3, [r7, #3]
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	212c      	movs	r1, #44	; 0x2c
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	3355      	adds	r3, #85	; 0x55
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f4e:	78fb      	ldrb	r3, [r7, #3]
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	212c      	movs	r1, #44	; 0x2c
 8001f54:	fb01 f303 	mul.w	r3, r1, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	3342      	adds	r3, #66	; 0x42
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f60:	e073      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3342      	adds	r3, #66	; 0x42
 8001f70:	2202      	movs	r2, #2
 8001f72:	701a      	strb	r2, [r3, #0]
      break;
 8001f74:	e069      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	212c      	movs	r1, #44	; 0x2c
 8001f7c:	fb01 f303 	mul.w	r3, r1, r3
 8001f80:	4413      	add	r3, r2
 8001f82:	3354      	adds	r3, #84	; 0x54
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3342      	adds	r3, #66	; 0x42
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]
      break;
 8001f9c:	e055      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f9e:	78fb      	ldrb	r3, [r7, #3]
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	212c      	movs	r1, #44	; 0x2c
 8001fa4:	fb01 f303 	mul.w	r3, r1, r3
 8001fa8:	4413      	add	r3, r2
 8001faa:	3342      	adds	r3, #66	; 0x42
 8001fac:	2202      	movs	r2, #2
 8001fae:	701a      	strb	r2, [r3, #0]
      break;
 8001fb0:	e04b      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fb2:	78bb      	ldrb	r3, [r7, #2]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11d      	bne.n	8001ff4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	212c      	movs	r1, #44	; 0x2c
 8001fbe:	fb01 f303 	mul.w	r3, r1, r3
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3355      	adds	r3, #85	; 0x55
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	212c      	movs	r1, #44	; 0x2c
 8001fd2:	fb01 f303 	mul.w	r3, r1, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	3342      	adds	r3, #66	; 0x42
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fde:	e034      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	212c      	movs	r1, #44	; 0x2c
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	3342      	adds	r3, #66	; 0x42
 8001fee:	2202      	movs	r2, #2
 8001ff0:	701a      	strb	r2, [r3, #0]
      break;
 8001ff2:	e02a      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ff4:	78fb      	ldrb	r3, [r7, #3]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	212c      	movs	r1, #44	; 0x2c
 8001ffa:	fb01 f303 	mul.w	r3, r1, r3
 8001ffe:	4413      	add	r3, r2
 8002000:	3354      	adds	r3, #84	; 0x54
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d109      	bne.n	800201c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002008:	78fb      	ldrb	r3, [r7, #3]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	212c      	movs	r1, #44	; 0x2c
 800200e:	fb01 f303 	mul.w	r3, r1, r3
 8002012:	4413      	add	r3, r2
 8002014:	3342      	adds	r3, #66	; 0x42
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
      break;
 800201a:	e016      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800201c:	78fb      	ldrb	r3, [r7, #3]
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	212c      	movs	r1, #44	; 0x2c
 8002022:	fb01 f303 	mul.w	r3, r1, r3
 8002026:	4413      	add	r3, r2
 8002028:	3342      	adds	r3, #66	; 0x42
 800202a:	2202      	movs	r2, #2
 800202c:	701a      	strb	r2, [r3, #0]
      break;
 800202e:	e00c      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	212c      	movs	r1, #44	; 0x2c
 8002036:	fb01 f303 	mul.w	r3, r1, r3
 800203a:	4413      	add	r3, r2
 800203c:	3342      	adds	r3, #66	; 0x42
 800203e:	2200      	movs	r2, #0
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	e002      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002044:	bf00      	nop
 8002046:	e000      	b.n	800204a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002048:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800204a:	78fb      	ldrb	r3, [r7, #3]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	212c      	movs	r1, #44	; 0x2c
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3344      	adds	r3, #68	; 0x44
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800205c:	78fb      	ldrb	r3, [r7, #3]
 800205e:	8b3a      	ldrh	r2, [r7, #24]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	202c      	movs	r0, #44	; 0x2c
 8002064:	fb00 f303 	mul.w	r3, r0, r3
 8002068:	440b      	add	r3, r1
 800206a:	334c      	adds	r3, #76	; 0x4c
 800206c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	212c      	movs	r1, #44	; 0x2c
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	4413      	add	r3, r2
 800207a:	3360      	adds	r3, #96	; 0x60
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002080:	78fb      	ldrb	r3, [r7, #3]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	212c      	movs	r1, #44	; 0x2c
 8002086:	fb01 f303 	mul.w	r3, r1, r3
 800208a:	4413      	add	r3, r2
 800208c:	3350      	adds	r3, #80	; 0x50
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	212c      	movs	r1, #44	; 0x2c
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	4413      	add	r3, r2
 800209e:	3339      	adds	r3, #57	; 0x39
 80020a0:	78fa      	ldrb	r2, [r7, #3]
 80020a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	212c      	movs	r1, #44	; 0x2c
 80020aa:	fb01 f303 	mul.w	r3, r1, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	3361      	adds	r3, #97	; 0x61
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	222c      	movs	r2, #44	; 0x2c
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	3338      	adds	r3, #56	; 0x38
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	18d1      	adds	r1, r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	f005 fac4 	bl	800765c <USB_HC_StartXfer>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop

080020e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 ffe7 	bl	80070ca <USB_GetMode>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b01      	cmp	r3, #1
 8002100:	f040 80f6 	bne.w	80022f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f004 ffcb 	bl	80070a4 <USB_ReadInterrupts>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80ec 	beq.w	80022ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f004 ffc2 	bl	80070a4 <USB_ReadInterrupts>
 8002120:	4603      	mov	r3, r0
 8002122:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002126:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800212a:	d104      	bne.n	8002136 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f004 ffb2 	bl	80070a4 <USB_ReadInterrupts>
 8002140:	4603      	mov	r3, r0
 8002142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800214a:	d104      	bne.n	8002156 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f004 ffa2 	bl	80070a4 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002166:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800216a:	d104      	bne.n	8002176 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002174:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f004 ff92 	bl	80070a4 <USB_ReadInterrupts>
 8002180:	4603      	mov	r3, r0
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d103      	bne.n	8002192 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2202      	movs	r2, #2
 8002190:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f004 ff84 	bl	80070a4 <USB_ReadInterrupts>
 800219c:	4603      	mov	r3, r0
 800219e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a6:	d11c      	bne.n	80021e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10f      	bne.n	80021e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021c2:	2110      	movs	r1, #16
 80021c4:	6938      	ldr	r0, [r7, #16]
 80021c6:	f004 fe93 	bl	8006ef0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021ca:	6938      	ldr	r0, [r7, #16]
 80021cc:	f004 feb4 	bl	8006f38 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f005 f86c 	bl	80072b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f007 fd3f 	bl	8009c60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f004 ff5c 	bl	80070a4 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f6:	d102      	bne.n	80021fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f001 fa03 	bl	8003604 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f004 ff4e 	bl	80070a4 <USB_ReadInterrupts>
 8002208:	4603      	mov	r3, r0
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b08      	cmp	r3, #8
 8002210:	d106      	bne.n	8002220 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f007 fd08 	bl	8009c28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2208      	movs	r2, #8
 800221e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f004 ff3d 	bl	80070a4 <USB_ReadInterrupts>
 800222a:	4603      	mov	r3, r0
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b10      	cmp	r3, #16
 8002232:	d101      	bne.n	8002238 <HAL_HCD_IRQHandler+0x158>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_HCD_IRQHandler+0x15a>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d012      	beq.n	8002264 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0210 	bic.w	r2, r2, #16
 800224c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f001 f906 	bl	8003460 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	699a      	ldr	r2, [r3, #24]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0210 	orr.w	r2, r2, #16
 8002262:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4618      	mov	r0, r3
 800226a:	f004 ff1b 	bl	80070a4 <USB_ReadInterrupts>
 800226e:	4603      	mov	r3, r0
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002278:	d13a      	bne.n	80022f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f005 fb2e 	bl	80078e0 <USB_HC_ReadInterrupt>
 8002284:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e025      	b.n	80022d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	68ba      	ldr	r2, [r7, #8]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	015a      	lsls	r2, r3, #5
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b6:	d106      	bne.n	80022c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4619      	mov	r1, r3
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f8ab 	bl	800241a <HCD_HC_IN_IRQHandler>
 80022c4:	e005      	b.n	80022d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	4619      	mov	r1, r3
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f000 fcc6 	bl	8002c5e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	3301      	adds	r3, #1
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	697a      	ldr	r2, [r7, #20]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d3d4      	bcc.n	800228c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ea:	615a      	str	r2, [r3, #20]
 80022ec:	e000      	b.n	80022f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80022ee:	bf00      	nop
    }
  }
}
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002304:	2b01      	cmp	r3, #1
 8002306:	d101      	bne.n	800230c <HAL_HCD_Start+0x16>
 8002308:	2302      	movs	r3, #2
 800230a:	e013      	b.n	8002334 <HAL_HCD_Start+0x3e>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2101      	movs	r1, #1
 800231a:	4618      	mov	r0, r3
 800231c:	f005 f82e 	bl	800737c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fd74 	bl	8006e12 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800234a:	2b01      	cmp	r3, #1
 800234c:	d101      	bne.n	8002352 <HAL_HCD_Stop+0x16>
 800234e:	2302      	movs	r3, #2
 8002350:	e00d      	b.n	800236e <HAL_HCD_Stop+0x32>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2201      	movs	r2, #1
 8002356:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f005 fc28 	bl	8007bb4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 ffd0 	bl	8007328 <USB_ResetPort>
 8002388:	4603      	mov	r3, r0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	460b      	mov	r3, r1
 800239c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	212c      	movs	r1, #44	; 0x2c
 80023a4:	fb01 f303 	mul.w	r3, r1, r3
 80023a8:	4413      	add	r3, r2
 80023aa:	3360      	adds	r3, #96	; 0x60
 80023ac:	781b      	ldrb	r3, [r3, #0]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	460b      	mov	r3, r1
 80023c4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023c6:	78fb      	ldrb	r3, [r7, #3]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	212c      	movs	r1, #44	; 0x2c
 80023cc:	fb01 f303 	mul.w	r3, r1, r3
 80023d0:	4413      	add	r3, r2
 80023d2:	3350      	adds	r3, #80	; 0x50
 80023d4:	681b      	ldr	r3, [r3, #0]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	370c      	adds	r7, #12
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f005 f814 	bl	800741c <USB_GetCurrentFrame>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4618      	mov	r0, r3
 800240c:	f004 ffef 	bl	80073ee <USB_GetHostSpeed>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b086      	sub	sp, #24
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
 8002422:	460b      	mov	r3, r1
 8002424:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	015a      	lsls	r2, r3, #5
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	4413      	add	r3, r2
 800243c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b04      	cmp	r3, #4
 8002448:	d119      	bne.n	800247e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	015a      	lsls	r2, r3, #5
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	4413      	add	r3, r2
 8002452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002456:	461a      	mov	r2, r3
 8002458:	2304      	movs	r3, #4
 800245a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	0151      	lsls	r1, r2, #5
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	440a      	add	r2, r1
 8002472:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e101      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002494:	d12b      	bne.n	80024ee <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	461a      	mov	r2, r3
 80024a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	212c      	movs	r1, #44	; 0x2c
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	4413      	add	r3, r2
 80024b6:	3361      	adds	r3, #97	; 0x61
 80024b8:	2207      	movs	r2, #7
 80024ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	0151      	lsls	r1, r2, #5
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	440a      	add	r2, r1
 80024d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024d6:	f043 0302 	orr.w	r3, r3, #2
 80024da:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f005 fa0b 	bl	8007902 <USB_HC_Halt>
 80024ec:	e0c9      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 0320 	and.w	r3, r3, #32
 8002500:	2b20      	cmp	r3, #32
 8002502:	d109      	bne.n	8002518 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	015a      	lsls	r2, r3, #5
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4413      	add	r3, r2
 800250c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002510:	461a      	mov	r2, r3
 8002512:	2320      	movs	r3, #32
 8002514:	6093      	str	r3, [r2, #8]
 8002516:	e0b4      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	015a      	lsls	r2, r3, #5
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4413      	add	r3, r2
 8002520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b08      	cmp	r3, #8
 800252c:	d133      	bne.n	8002596 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	015a      	lsls	r2, r3, #5
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4413      	add	r3, r2
 8002536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	0151      	lsls	r1, r2, #5
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	440a      	add	r2, r1
 8002544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002548:	f043 0302 	orr.w	r3, r3, #2
 800254c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	212c      	movs	r1, #44	; 0x2c
 8002554:	fb01 f303 	mul.w	r3, r1, r3
 8002558:	4413      	add	r3, r2
 800255a:	3361      	adds	r3, #97	; 0x61
 800255c:	2205      	movs	r2, #5
 800255e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800256c:	461a      	mov	r2, r3
 800256e:	2310      	movs	r3, #16
 8002570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	015a      	lsls	r2, r3, #5
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4413      	add	r3, r2
 800257a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257e:	461a      	mov	r2, r3
 8002580:	2308      	movs	r3, #8
 8002582:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	4611      	mov	r1, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f005 f9b7 	bl	8007902 <USB_HC_Halt>
 8002594:	e075      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	015a      	lsls	r2, r3, #5
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4413      	add	r3, r2
 800259e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d134      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	0151      	lsls	r1, r2, #5
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	440a      	add	r2, r1
 80025c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025c8:	f043 0302 	orr.w	r3, r3, #2
 80025cc:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	212c      	movs	r1, #44	; 0x2c
 80025d4:	fb01 f303 	mul.w	r3, r1, r3
 80025d8:	4413      	add	r3, r2
 80025da:	3361      	adds	r3, #97	; 0x61
 80025dc:	2208      	movs	r2, #8
 80025de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ec:	461a      	mov	r2, r3
 80025ee:	2310      	movs	r3, #16
 80025f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	015a      	lsls	r2, r3, #5
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4413      	add	r3, r2
 80025fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fe:	461a      	mov	r2, r3
 8002600:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002604:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f005 f976 	bl	8007902 <USB_HC_Halt>
 8002616:	e034      	b.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b80      	cmp	r3, #128	; 0x80
 800262c:	d129      	bne.n	8002682 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	015a      	lsls	r2, r3, #5
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4413      	add	r3, r2
 8002636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	0151      	lsls	r1, r2, #5
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	440a      	add	r2, r1
 8002644:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002648:	f043 0302 	orr.w	r3, r3, #2
 800264c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	212c      	movs	r1, #44	; 0x2c
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	3361      	adds	r3, #97	; 0x61
 800265c:	2206      	movs	r2, #6
 800265e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68fa      	ldr	r2, [r7, #12]
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f005 f949 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	015a      	lsls	r2, r3, #5
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4413      	add	r3, r2
 8002678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267c:	461a      	mov	r2, r3
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	015a      	lsls	r2, r3, #5
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	4413      	add	r3, r2
 800268a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d122      	bne.n	80026e0 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	015a      	lsls	r2, r3, #5
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4413      	add	r3, r2
 80026a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	0151      	lsls	r1, r2, #5
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	440a      	add	r2, r1
 80026b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b4:	f043 0302 	orr.w	r3, r3, #2
 80026b8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	4611      	mov	r1, r2
 80026c4:	4618      	mov	r0, r3
 80026c6:	f005 f91c 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026dc:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80026de:	e2ba      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	015a      	lsls	r2, r3, #5
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4413      	add	r3, r2
 80026e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	f040 811b 	bne.w	800292e <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d019      	beq.n	8002734 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	212c      	movs	r1, #44	; 0x2c
 8002706:	fb01 f303 	mul.w	r3, r1, r3
 800270a:	4413      	add	r3, r2
 800270c:	3348      	adds	r3, #72	; 0x48
 800270e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	0159      	lsls	r1, r3, #5
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	440b      	add	r3, r1
 8002718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002722:	1ad2      	subs	r2, r2, r3
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	202c      	movs	r0, #44	; 0x2c
 800272a:	fb00 f303 	mul.w	r3, r0, r3
 800272e:	440b      	add	r3, r1
 8002730:	3350      	adds	r3, #80	; 0x50
 8002732:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	212c      	movs	r1, #44	; 0x2c
 800273a:	fb01 f303 	mul.w	r3, r1, r3
 800273e:	4413      	add	r3, r2
 8002740:	3361      	adds	r3, #97	; 0x61
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	212c      	movs	r1, #44	; 0x2c
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	4413      	add	r3, r2
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	4413      	add	r3, r2
 8002760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002764:	461a      	mov	r2, r3
 8002766:	2301      	movs	r3, #1
 8002768:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333f      	adds	r3, #63	; 0x3f
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333f      	adds	r3, #63	; 0x3f
 800278c:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800278e:	2b02      	cmp	r3, #2
 8002790:	d121      	bne.n	80027d6 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	4413      	add	r3, r2
 800279a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	0151      	lsls	r1, r2, #5
 80027a4:	693a      	ldr	r2, [r7, #16]
 80027a6:	440a      	add	r2, r1
 80027a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 f8a0 	bl	8007902 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	461a      	mov	r2, r3
 80027d0:	2310      	movs	r3, #16
 80027d2:	6093      	str	r3, [r2, #8]
 80027d4:	e066      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	212c      	movs	r1, #44	; 0x2c
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d127      	bne.n	800283a <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	015a      	lsls	r2, r3, #5
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	4413      	add	r3, r2
 80027f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	0151      	lsls	r1, r2, #5
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	440a      	add	r2, r1
 8002800:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002804:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002808:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	212c      	movs	r1, #44	; 0x2c
 8002810:	fb01 f303 	mul.w	r3, r1, r3
 8002814:	4413      	add	r3, r2
 8002816:	3360      	adds	r3, #96	; 0x60
 8002818:	2201      	movs	r2, #1
 800281a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	b2d9      	uxtb	r1, r3
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	202c      	movs	r0, #44	; 0x2c
 8002826:	fb00 f303 	mul.w	r3, r0, r3
 800282a:	4413      	add	r3, r2
 800282c:	3360      	adds	r3, #96	; 0x60
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f007 fa22 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002838:	e034      	b.n	80028a4 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	212c      	movs	r1, #44	; 0x2c
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	333f      	adds	r3, #63	; 0x3f
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d12a      	bne.n	80028a4 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	212c      	movs	r1, #44	; 0x2c
 8002854:	fb01 f303 	mul.w	r3, r1, r3
 8002858:	4413      	add	r3, r2
 800285a:	3360      	adds	r3, #96	; 0x60
 800285c:	2201      	movs	r2, #1
 800285e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3354      	adds	r3, #84	; 0x54
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f083 0301 	eor.w	r3, r3, #1
 8002874:	b2d8      	uxtb	r0, r3
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3354      	adds	r3, #84	; 0x54
 8002884:	4602      	mov	r2, r0
 8002886:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	b2d9      	uxtb	r1, r3
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	202c      	movs	r0, #44	; 0x2c
 8002892:	fb00 f303 	mul.w	r3, r0, r3
 8002896:	4413      	add	r3, r2
 8002898:	3360      	adds	r3, #96	; 0x60
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f007 f9ec 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12b      	bne.n	8002904 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3348      	adds	r3, #72	; 0x48
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6879      	ldr	r1, [r7, #4]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	202c      	movs	r0, #44	; 0x2c
 80028c2:	fb00 f202 	mul.w	r2, r0, r2
 80028c6:	440a      	add	r2, r1
 80028c8:	3240      	adds	r2, #64	; 0x40
 80028ca:	8812      	ldrh	r2, [r2, #0]
 80028cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 81be 	beq.w	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	212c      	movs	r1, #44	; 0x2c
 80028e0:	fb01 f303 	mul.w	r3, r1, r3
 80028e4:	4413      	add	r3, r2
 80028e6:	3354      	adds	r3, #84	; 0x54
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2d8      	uxtb	r0, r3
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	212c      	movs	r1, #44	; 0x2c
 80028f6:	fb01 f303 	mul.w	r3, r1, r3
 80028fa:	4413      	add	r3, r2
 80028fc:	3354      	adds	r3, #84	; 0x54
 80028fe:	4602      	mov	r2, r0
 8002900:	701a      	strb	r2, [r3, #0]
}
 8002902:	e1a8      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	212c      	movs	r1, #44	; 0x2c
 800290a:	fb01 f303 	mul.w	r3, r1, r3
 800290e:	4413      	add	r3, r2
 8002910:	3354      	adds	r3, #84	; 0x54
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	f083 0301 	eor.w	r3, r3, #1
 8002918:	b2d8      	uxtb	r0, r3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	212c      	movs	r1, #44	; 0x2c
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	4413      	add	r3, r2
 8002926:	3354      	adds	r3, #84	; 0x54
 8002928:	4602      	mov	r2, r0
 800292a:	701a      	strb	r2, [r3, #0]
}
 800292c:	e193      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4413      	add	r3, r2
 8002936:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	f040 8106 	bne.w	8002b52 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	015a      	lsls	r2, r3, #5
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	4413      	add	r3, r2
 800294e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	0151      	lsls	r1, r2, #5
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	440a      	add	r2, r1
 800295c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002960:	f023 0302 	bic.w	r3, r3, #2
 8002964:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	212c      	movs	r1, #44	; 0x2c
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	4413      	add	r3, r2
 8002972:	3361      	adds	r3, #97	; 0x61
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d109      	bne.n	800298e <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	212c      	movs	r1, #44	; 0x2c
 8002980:	fb01 f303 	mul.w	r3, r1, r3
 8002984:	4413      	add	r3, r2
 8002986:	3360      	adds	r3, #96	; 0x60
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e0c9      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d109      	bne.n	80029b6 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	212c      	movs	r1, #44	; 0x2c
 80029a8:	fb01 f303 	mul.w	r3, r1, r3
 80029ac:	4413      	add	r3, r2
 80029ae:	3360      	adds	r3, #96	; 0x60
 80029b0:	2205      	movs	r2, #5
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e0b5      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	212c      	movs	r1, #44	; 0x2c
 80029bc:	fb01 f303 	mul.w	r3, r1, r3
 80029c0:	4413      	add	r3, r2
 80029c2:	3361      	adds	r3, #97	; 0x61
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b06      	cmp	r3, #6
 80029c8:	d009      	beq.n	80029de <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	3361      	adds	r3, #97	; 0x61
 80029d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d150      	bne.n	8002a80 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	212c      	movs	r1, #44	; 0x2c
 80029e4:	fb01 f303 	mul.w	r3, r1, r3
 80029e8:	4413      	add	r3, r2
 80029ea:	335c      	adds	r3, #92	; 0x5c
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	202c      	movs	r0, #44	; 0x2c
 80029f6:	fb00 f303 	mul.w	r3, r0, r3
 80029fa:	440b      	add	r3, r1
 80029fc:	335c      	adds	r3, #92	; 0x5c
 80029fe:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	212c      	movs	r1, #44	; 0x2c
 8002a06:	fb01 f303 	mul.w	r3, r1, r3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	335c      	adds	r3, #92	; 0x5c
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d912      	bls.n	8002a3a <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	212c      	movs	r1, #44	; 0x2c
 8002a1a:	fb01 f303 	mul.w	r3, r1, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	335c      	adds	r3, #92	; 0x5c
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	212c      	movs	r1, #44	; 0x2c
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	4413      	add	r3, r2
 8002a32:	3360      	adds	r3, #96	; 0x60
 8002a34:	2204      	movs	r2, #4
 8002a36:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a38:	e073      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3360      	adds	r3, #96	; 0x60
 8002a48:	2202      	movs	r2, #2
 8002a4a:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a62:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a6a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	015a      	lsls	r2, r3, #5
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	4413      	add	r3, r2
 8002a74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a7e:	e050      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	212c      	movs	r1, #44	; 0x2c
 8002a86:	fb01 f303 	mul.w	r3, r1, r3
 8002a8a:	4413      	add	r3, r2
 8002a8c:	3361      	adds	r3, #97	; 0x61
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d122      	bne.n	8002ada <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3360      	adds	r3, #96	; 0x60
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002abc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ac4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	015a      	lsls	r2, r3, #5
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	4413      	add	r3, r2
 8002ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	e023      	b.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	212c      	movs	r1, #44	; 0x2c
 8002ae0:	fb01 f303 	mul.w	r3, r1, r3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	3361      	adds	r3, #97	; 0x61
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b07      	cmp	r3, #7
 8002aec:	d119      	bne.n	8002b22 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	212c      	movs	r1, #44	; 0x2c
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	4413      	add	r3, r2
 8002afa:	335c      	adds	r3, #92	; 0x5c
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	202c      	movs	r0, #44	; 0x2c
 8002b06:	fb00 f303 	mul.w	r3, r0, r3
 8002b0a:	440b      	add	r3, r1
 8002b0c:	335c      	adds	r3, #92	; 0x5c
 8002b0e:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3360      	adds	r3, #96	; 0x60
 8002b1e:	2204      	movs	r2, #4
 8002b20:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	015a      	lsls	r2, r3, #5
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	4413      	add	r3, r2
 8002b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2e:	461a      	mov	r2, r3
 8002b30:	2302      	movs	r3, #2
 8002b32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b2d9      	uxtb	r1, r3
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	202c      	movs	r0, #44	; 0x2c
 8002b3e:	fb00 f303 	mul.w	r3, r0, r3
 8002b42:	4413      	add	r3, r2
 8002b44:	3360      	adds	r3, #96	; 0x60
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f007 f896 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b50:	e081      	b.n	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	2b10      	cmp	r3, #16
 8002b66:	d176      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	212c      	movs	r1, #44	; 0x2c
 8002b6e:	fb01 f303 	mul.w	r3, r1, r3
 8002b72:	4413      	add	r3, r2
 8002b74:	333f      	adds	r3, #63	; 0x3f
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d121      	bne.n	8002bc0 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	212c      	movs	r1, #44	; 0x2c
 8002b82:	fb01 f303 	mul.w	r3, r1, r3
 8002b86:	4413      	add	r3, r2
 8002b88:	335c      	adds	r3, #92	; 0x5c
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	015a      	lsls	r2, r3, #5
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	4413      	add	r3, r2
 8002b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	0151      	lsls	r1, r2, #5
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	440a      	add	r2, r1
 8002ba4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ba8:	f043 0302 	orr.w	r3, r3, #2
 8002bac:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	b2d2      	uxtb	r2, r2
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f004 fea2 	bl	8007902 <USB_HC_Halt>
 8002bbe:	e041      	b.n	8002c44 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	333f      	adds	r3, #63	; 0x3f
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	212c      	movs	r1, #44	; 0x2c
 8002bda:	fb01 f303 	mul.w	r3, r1, r3
 8002bde:	4413      	add	r3, r2
 8002be0:	333f      	adds	r3, #63	; 0x3f
 8002be2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d12d      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	212c      	movs	r1, #44	; 0x2c
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	4413      	add	r3, r2
 8002bf4:	335c      	adds	r3, #92	; 0x5c
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691b      	ldr	r3, [r3, #16]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d120      	bne.n	8002c44 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	212c      	movs	r1, #44	; 0x2c
 8002c08:	fb01 f303 	mul.w	r3, r1, r3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	3361      	adds	r3, #97	; 0x61
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	0151      	lsls	r1, r2, #5
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	440a      	add	r2, r1
 8002c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c2e:	f043 0302 	orr.w	r3, r3, #2
 8002c32:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	4611      	mov	r1, r2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 fe5f 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	015a      	lsls	r2, r3, #5
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c50:	461a      	mov	r2, r3
 8002c52:	2310      	movs	r3, #16
 8002c54:	6093      	str	r3, [r2, #8]
}
 8002c56:	bf00      	nop
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b088      	sub	sp, #32
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d119      	bne.n	8002cc2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	015a      	lsls	r2, r3, #5
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4413      	add	r3, r2
 8002c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	2304      	movs	r3, #4
 8002c9e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	015a      	lsls	r2, r3, #5
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	0151      	lsls	r1, r2, #5
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	440a      	add	r2, r1
 8002cb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cba:	f043 0302 	orr.w	r3, r3, #2
 8002cbe:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002cc0:	e3ca      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 0320 	and.w	r3, r3, #32
 8002cd4:	2b20      	cmp	r3, #32
 8002cd6:	d13e      	bne.n	8002d56 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	333d      	adds	r3, #61	; 0x3d
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	f040 83ac 	bne.w	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	212c      	movs	r1, #44	; 0x2c
 8002d06:	fb01 f303 	mul.w	r3, r1, r3
 8002d0a:	4413      	add	r3, r2
 8002d0c:	333d      	adds	r3, #61	; 0x3d
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	212c      	movs	r1, #44	; 0x2c
 8002d18:	fb01 f303 	mul.w	r3, r1, r3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3360      	adds	r3, #96	; 0x60
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	015a      	lsls	r2, r3, #5
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	0151      	lsls	r1, r2, #5
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	440a      	add	r2, r1
 8002d3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d3e:	f043 0302 	orr.w	r3, r3, #2
 8002d42:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 fdd7 	bl	8007902 <USB_HC_Halt>
}
 8002d54:	e380      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d6c:	d122      	bne.n	8002db4 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	0151      	lsls	r1, r2, #5
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	440a      	add	r2, r1
 8002d84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d88:	f043 0302 	orr.w	r3, r3, #2
 8002d8c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f004 fdb2 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002daa:	461a      	mov	r2, r3
 8002dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002db0:	6093      	str	r3, [r2, #8]
}
 8002db2:	e351      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	015a      	lsls	r2, r3, #5
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	4413      	add	r3, r2
 8002dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d150      	bne.n	8002e6c <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	212c      	movs	r1, #44	; 0x2c
 8002dd0:	fb01 f303 	mul.w	r3, r1, r3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	335c      	adds	r3, #92	; 0x5c
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d111      	bne.n	8002e16 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	333d      	adds	r3, #61	; 0x3d
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e10:	461a      	mov	r2, r3
 8002e12:	2340      	movs	r3, #64	; 0x40
 8002e14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	015a      	lsls	r2, r3, #5
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	0151      	lsls	r1, r2, #5
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	440a      	add	r2, r1
 8002e2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f004 fd5e 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e52:	461a      	mov	r2, r3
 8002e54:	2301      	movs	r3, #1
 8002e56:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	212c      	movs	r1, #44	; 0x2c
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3361      	adds	r3, #97	; 0x61
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
}
 8002e6a:	e2f5      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7e:	2b40      	cmp	r3, #64	; 0x40
 8002e80:	d13c      	bne.n	8002efc <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	212c      	movs	r1, #44	; 0x2c
 8002e88:	fb01 f303 	mul.w	r3, r1, r3
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3361      	adds	r3, #97	; 0x61
 8002e90:	2204      	movs	r2, #4
 8002e92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	212c      	movs	r1, #44	; 0x2c
 8002e9a:	fb01 f303 	mul.w	r3, r1, r3
 8002e9e:	4413      	add	r3, r2
 8002ea0:	333d      	adds	r3, #61	; 0x3d
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	212c      	movs	r1, #44	; 0x2c
 8002eac:	fb01 f303 	mul.w	r3, r1, r3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	335c      	adds	r3, #92	; 0x5c
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	015a      	lsls	r2, r3, #5
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	0151      	lsls	r1, r2, #5
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	440a      	add	r2, r1
 8002ece:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ed2:	f043 0302 	orr.w	r3, r3, #2
 8002ed6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	697a      	ldr	r2, [r7, #20]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f004 fd0d 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2340      	movs	r3, #64	; 0x40
 8002ef8:	6093      	str	r3, [r2, #8]
}
 8002efa:	e2ad      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d12a      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	015a      	lsls	r2, r3, #5
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4413      	add	r3, r2
 8002f1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2308      	movs	r3, #8
 8002f22:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	015a      	lsls	r2, r3, #5
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4413      	add	r3, r2
 8002f2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	0151      	lsls	r1, r2, #5
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	440a      	add	r2, r1
 8002f3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3e:	f043 0302 	orr.w	r3, r3, #2
 8002f42:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fcd7 	bl	8007902 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	212c      	movs	r1, #44	; 0x2c
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	3361      	adds	r3, #97	; 0x61
 8002f62:	2205      	movs	r2, #5
 8002f64:	701a      	strb	r2, [r3, #0]
}
 8002f66:	e277      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d150      	bne.n	8003020 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	212c      	movs	r1, #44	; 0x2c
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	335c      	adds	r3, #92	; 0x5c
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	212c      	movs	r1, #44	; 0x2c
 8002f96:	fb01 f303 	mul.w	r3, r1, r3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3361      	adds	r3, #97	; 0x61
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	333d      	adds	r3, #61	; 0x3d
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d112      	bne.n	8002fdc <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	212c      	movs	r1, #44	; 0x2c
 8002fbc:	fb01 f303 	mul.w	r3, r1, r3
 8002fc0:	4413      	add	r3, r2
 8002fc2:	333c      	adds	r3, #60	; 0x3c
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d108      	bne.n	8002fdc <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	212c      	movs	r1, #44	; 0x2c
 8002fd0:	fb01 f303 	mul.w	r3, r1, r3
 8002fd4:	4413      	add	r3, r2
 8002fd6:	333d      	adds	r3, #61	; 0x3d
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	0151      	lsls	r1, r2, #5
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	440a      	add	r2, r1
 8002ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ff6:	f043 0302 	orr.w	r3, r3, #2
 8002ffa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f004 fc7b 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	2310      	movs	r3, #16
 800301c:	6093      	str	r3, [r2, #8]
}
 800301e:	e21b      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	69bb      	ldr	r3, [r7, #24]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003032:	2b80      	cmp	r3, #128	; 0x80
 8003034:	d174      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d121      	bne.n	8003082 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	212c      	movs	r1, #44	; 0x2c
 8003044:	fb01 f303 	mul.w	r3, r1, r3
 8003048:	4413      	add	r3, r2
 800304a:	3361      	adds	r3, #97	; 0x61
 800304c:	2206      	movs	r2, #6
 800304e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	4413      	add	r3, r2
 8003058:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	0151      	lsls	r1, r2, #5
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	440a      	add	r2, r1
 8003066:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fc41 	bl	8007902 <USB_HC_Halt>
 8003080:	e044      	b.n	800310c <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	335c      	adds	r3, #92	; 0x5c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	202c      	movs	r0, #44	; 0x2c
 800309a:	fb00 f303 	mul.w	r3, r0, r3
 800309e:	440b      	add	r3, r1
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	212c      	movs	r1, #44	; 0x2c
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d920      	bls.n	80030fa <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	335c      	adds	r3, #92	; 0x5c
 80030c6:	2200      	movs	r2, #0
 80030c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	212c      	movs	r1, #44	; 0x2c
 80030d0:	fb01 f303 	mul.w	r3, r1, r3
 80030d4:	4413      	add	r3, r2
 80030d6:	3360      	adds	r3, #96	; 0x60
 80030d8:	2204      	movs	r2, #4
 80030da:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num,
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	202c      	movs	r0, #44	; 0x2c
 80030e6:	fb00 f303 	mul.w	r3, r0, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3360      	adds	r3, #96	; 0x60
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f006 fdc2 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
 80030f8:	e008      	b.n	800310c <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	212c      	movs	r1, #44	; 0x2c
 8003100:	fb01 f303 	mul.w	r3, r1, r3
 8003104:	4413      	add	r3, r2
 8003106:	3360      	adds	r3, #96	; 0x60
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	015a      	lsls	r2, r3, #5
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	4413      	add	r3, r2
 8003114:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003118:	461a      	mov	r2, r3
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	6093      	str	r3, [r2, #8]
}
 800311e:	e19b      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003136:	d134      	bne.n	80031a2 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	0151      	lsls	r1, r2, #5
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	440a      	add	r2, r1
 800314e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f004 fbcd 	bl	8007902 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003174:	461a      	mov	r2, r3
 8003176:	2310      	movs	r3, #16
 8003178:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	4413      	add	r3, r2
 8003182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003186:	461a      	mov	r2, r3
 8003188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800318c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	212c      	movs	r1, #44	; 0x2c
 8003194:	fb01 f303 	mul.w	r3, r1, r3
 8003198:	4413      	add	r3, r2
 800319a:	3361      	adds	r3, #97	; 0x61
 800319c:	2208      	movs	r2, #8
 800319e:	701a      	strb	r2, [r3, #0]
}
 80031a0:	e15a      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	f040 814f 	bne.w	8003458 <HCD_HC_OUT_IRQHandler+0x7fa>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	0151      	lsls	r1, r2, #5
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	440a      	add	r2, r1
 80031d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031d4:	f023 0302 	bic.w	r3, r3, #2
 80031d8:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3361      	adds	r3, #97	; 0x61
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d17d      	bne.n	80032ea <HCD_HC_OUT_IRQHandler+0x68c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	212c      	movs	r1, #44	; 0x2c
 80031f4:	fb01 f303 	mul.w	r3, r1, r3
 80031f8:	4413      	add	r3, r2
 80031fa:	3360      	adds	r3, #96	; 0x60
 80031fc:	2201      	movs	r2, #1
 80031fe:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	212c      	movs	r1, #44	; 0x2c
 8003206:	fb01 f303 	mul.w	r3, r1, r3
 800320a:	4413      	add	r3, r2
 800320c:	333f      	adds	r3, #63	; 0x3f
 800320e:	781b      	ldrb	r3, [r3, #0]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d00a      	beq.n	800322a <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	212c      	movs	r1, #44	; 0x2c
 800321a:	fb01 f303 	mul.w	r3, r1, r3
 800321e:	4413      	add	r3, r2
 8003220:	333f      	adds	r3, #63	; 0x3f
 8003222:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003224:	2b03      	cmp	r3, #3
 8003226:	f040 8100 	bne.w	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
        if (hhcd->Init.dma_enable == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d113      	bne.n	800325a <HCD_HC_OUT_IRQHandler+0x5fc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	212c      	movs	r1, #44	; 0x2c
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	3355      	adds	r3, #85	; 0x55
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	f083 0301 	eor.w	r3, r3, #1
 8003246:	b2d8      	uxtb	r0, r3
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	212c      	movs	r1, #44	; 0x2c
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	3355      	adds	r3, #85	; 0x55
 8003256:	4602      	mov	r2, r0
 8003258:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	f040 80e3 	bne.w	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	212c      	movs	r1, #44	; 0x2c
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	334c      	adds	r3, #76	; 0x4c
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	f000 80d8 	beq.w	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	212c      	movs	r1, #44	; 0x2c
 8003280:	fb01 f303 	mul.w	r3, r1, r3
 8003284:	4413      	add	r3, r2
 8003286:	334c      	adds	r3, #76	; 0x4c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	202c      	movs	r0, #44	; 0x2c
 8003290:	fb00 f202 	mul.w	r2, r0, r2
 8003294:	440a      	add	r2, r1
 8003296:	3240      	adds	r2, #64	; 0x40
 8003298:	8812      	ldrh	r2, [r2, #0]
 800329a:	4413      	add	r3, r2
 800329c:	3b01      	subs	r3, #1
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	202c      	movs	r0, #44	; 0x2c
 80032a4:	fb00 f202 	mul.w	r2, r0, r2
 80032a8:	440a      	add	r2, r1
 80032aa:	3240      	adds	r2, #64	; 0x40
 80032ac:	8812      	ldrh	r2, [r2, #0]
 80032ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80032b2:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 80b5 	beq.w	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	212c      	movs	r1, #44	; 0x2c
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3355      	adds	r3, #85	; 0x55
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	f083 0301 	eor.w	r3, r3, #1
 80032d4:	b2d8      	uxtb	r0, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	212c      	movs	r1, #44	; 0x2c
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	3355      	adds	r3, #85	; 0x55
 80032e4:	4602      	mov	r2, r0
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	e09f      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	212c      	movs	r1, #44	; 0x2c
 80032f0:	fb01 f303 	mul.w	r3, r1, r3
 80032f4:	4413      	add	r3, r2
 80032f6:	3361      	adds	r3, #97	; 0x61
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b03      	cmp	r3, #3
 80032fc:	d109      	bne.n	8003312 <HCD_HC_OUT_IRQHandler+0x6b4>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	212c      	movs	r1, #44	; 0x2c
 8003304:	fb01 f303 	mul.w	r3, r1, r3
 8003308:	4413      	add	r3, r2
 800330a:	3360      	adds	r3, #96	; 0x60
 800330c:	2202      	movs	r2, #2
 800330e:	701a      	strb	r2, [r3, #0]
 8003310:	e08b      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	212c      	movs	r1, #44	; 0x2c
 8003318:	fb01 f303 	mul.w	r3, r1, r3
 800331c:	4413      	add	r3, r2
 800331e:	3361      	adds	r3, #97	; 0x61
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b04      	cmp	r3, #4
 8003324:	d109      	bne.n	800333a <HCD_HC_OUT_IRQHandler+0x6dc>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	212c      	movs	r1, #44	; 0x2c
 800332c:	fb01 f303 	mul.w	r3, r1, r3
 8003330:	4413      	add	r3, r2
 8003332:	3360      	adds	r3, #96	; 0x60
 8003334:	2202      	movs	r2, #2
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e077      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	212c      	movs	r1, #44	; 0x2c
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	4413      	add	r3, r2
 8003346:	3361      	adds	r3, #97	; 0x61
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d109      	bne.n	8003362 <HCD_HC_OUT_IRQHandler+0x704>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	3360      	adds	r3, #96	; 0x60
 800335c:	2205      	movs	r2, #5
 800335e:	701a      	strb	r2, [r3, #0]
 8003360:	e063      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	212c      	movs	r1, #44	; 0x2c
 8003368:	fb01 f303 	mul.w	r3, r1, r3
 800336c:	4413      	add	r3, r2
 800336e:	3361      	adds	r3, #97	; 0x61
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b06      	cmp	r3, #6
 8003374:	d009      	beq.n	800338a <HCD_HC_OUT_IRQHandler+0x72c>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	212c      	movs	r1, #44	; 0x2c
 800337c:	fb01 f303 	mul.w	r3, r1, r3
 8003380:	4413      	add	r3, r2
 8003382:	3361      	adds	r3, #97	; 0x61
 8003384:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003386:	2b08      	cmp	r3, #8
 8003388:	d14f      	bne.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
      hhcd->hc[ch_num].ErrCnt++;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	335c      	adds	r3, #92	; 0x5c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	202c      	movs	r0, #44	; 0x2c
 80033a2:	fb00 f303 	mul.w	r3, r0, r3
 80033a6:	440b      	add	r3, r1
 80033a8:	335c      	adds	r3, #92	; 0x5c
 80033aa:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	335c      	adds	r3, #92	; 0x5c
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d912      	bls.n	80033e6 <HCD_HC_OUT_IRQHandler+0x788>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	212c      	movs	r1, #44	; 0x2c
 80033c6:	fb01 f303 	mul.w	r3, r1, r3
 80033ca:	4413      	add	r3, r2
 80033cc:	335c      	adds	r3, #92	; 0x5c
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	212c      	movs	r1, #44	; 0x2c
 80033d8:	fb01 f303 	mul.w	r3, r1, r3
 80033dc:	4413      	add	r3, r2
 80033de:	3360      	adds	r3, #96	; 0x60
 80033e0:	2204      	movs	r2, #4
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	e021      	b.n	800342a <HCD_HC_OUT_IRQHandler+0x7cc>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3360      	adds	r3, #96	; 0x60
 80033f4:	2202      	movs	r2, #2
 80033f6:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340e:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003416:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	015a      	lsls	r2, r3, #5
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	4413      	add	r3, r2
 8003420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003424:	461a      	mov	r2, r3
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003436:	461a      	mov	r2, r3
 8003438:	2302      	movs	r3, #2
 800343a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	b2d9      	uxtb	r1, r3
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	202c      	movs	r0, #44	; 0x2c
 8003446:	fb00 f303 	mul.w	r3, r0, r3
 800344a:	4413      	add	r3, r2
 800344c:	3360      	adds	r3, #96	; 0x60
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	461a      	mov	r2, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f006 fc12 	bl	8009c7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003458:	bf00      	nop
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	0c5b      	lsrs	r3, r3, #17
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003494:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d004      	beq.n	80034a6 <HCD_RXQLVL_IRQHandler+0x46>
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	f000 80a9 	beq.w	80035f6 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034a4:	e0aa      	b.n	80035fc <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a6 	beq.w	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	212c      	movs	r1, #44	; 0x2c
 80034b4:	fb01 f303 	mul.w	r3, r1, r3
 80034b8:	4413      	add	r3, r2
 80034ba:	3344      	adds	r3, #68	; 0x44
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 809b 	beq.w	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	212c      	movs	r1, #44	; 0x2c
 80034ca:	fb01 f303 	mul.w	r3, r1, r3
 80034ce:	4413      	add	r3, r2
 80034d0:	3350      	adds	r3, #80	; 0x50
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	441a      	add	r2, r3
 80034d8:	6879      	ldr	r1, [r7, #4]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	202c      	movs	r0, #44	; 0x2c
 80034de:	fb00 f303 	mul.w	r3, r0, r3
 80034e2:	440b      	add	r3, r1
 80034e4:	334c      	adds	r3, #76	; 0x4c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d87a      	bhi.n	80035e2 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6818      	ldr	r0, [r3, #0]
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	212c      	movs	r1, #44	; 0x2c
 80034f6:	fb01 f303 	mul.w	r3, r1, r3
 80034fa:	4413      	add	r3, r2
 80034fc:	3344      	adds	r3, #68	; 0x44
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	b292      	uxth	r2, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f003 fd75 	bl	8006ff4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	212c      	movs	r1, #44	; 0x2c
 8003510:	fb01 f303 	mul.w	r3, r1, r3
 8003514:	4413      	add	r3, r2
 8003516:	3344      	adds	r3, #68	; 0x44
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	441a      	add	r2, r3
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	202c      	movs	r0, #44	; 0x2c
 8003524:	fb00 f303 	mul.w	r3, r0, r3
 8003528:	440b      	add	r3, r1
 800352a:	3344      	adds	r3, #68	; 0x44
 800352c:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	212c      	movs	r1, #44	; 0x2c
 8003534:	fb01 f303 	mul.w	r3, r1, r3
 8003538:	4413      	add	r3, r2
 800353a:	3350      	adds	r3, #80	; 0x50
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	441a      	add	r2, r3
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	202c      	movs	r0, #44	; 0x2c
 8003548:	fb00 f303 	mul.w	r3, r0, r3
 800354c:	440b      	add	r3, r1
 800354e:	3350      	adds	r3, #80	; 0x50
 8003550:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	4413      	add	r3, r2
 800355a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	0cdb      	lsrs	r3, r3, #19
 8003562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003566:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	212c      	movs	r1, #44	; 0x2c
 800356e:	fb01 f303 	mul.w	r3, r1, r3
 8003572:	4413      	add	r3, r2
 8003574:	3340      	adds	r3, #64	; 0x40
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	461a      	mov	r2, r3
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4293      	cmp	r3, r2
 800357e:	d13c      	bne.n	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d039      	beq.n	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800359c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035a4:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b2:	461a      	mov	r2, r3
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	212c      	movs	r1, #44	; 0x2c
 80035be:	fb01 f303 	mul.w	r3, r1, r3
 80035c2:	4413      	add	r3, r2
 80035c4:	3354      	adds	r3, #84	; 0x54
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f083 0301 	eor.w	r3, r3, #1
 80035cc:	b2d8      	uxtb	r0, r3
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	3354      	adds	r3, #84	; 0x54
 80035dc:	4602      	mov	r2, r0
 80035de:	701a      	strb	r2, [r3, #0]
      break;
 80035e0:	e00b      	b.n	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	3360      	adds	r3, #96	; 0x60
 80035f0:	2204      	movs	r2, #4
 80035f2:	701a      	strb	r2, [r3, #0]
      break;
 80035f4:	e001      	b.n	80035fa <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80035fa:	bf00      	nop
  }
}
 80035fc:	bf00      	nop
 80035fe:	3728      	adds	r7, #40	; 0x28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003630:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d10b      	bne.n	8003654 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b01      	cmp	r3, #1
 8003644:	d102      	bne.n	800364c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f006 fafc 	bl	8009c44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	f043 0302 	orr.w	r3, r3, #2
 8003652:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b08      	cmp	r3, #8
 800365c:	d132      	bne.n	80036c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b04      	cmp	r3, #4
 800366e:	d126      	bne.n	80036be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d113      	bne.n	80036a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800367e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003682:	d106      	bne.n	8003692 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2102      	movs	r1, #2
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fe12 	bl	80072b4 <USB_InitFSLSPClkSel>
 8003690:	e011      	b.n	80036b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f003 fe0b 	bl	80072b4 <USB_InitFSLSPClkSel>
 800369e:	e00a      	b.n	80036b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d106      	bne.n	80036b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80036ae:	461a      	mov	r2, r3
 80036b0:	f64e 2360 	movw	r3, #60000	; 0xea60
 80036b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f006 faee 	bl	8009c98 <HAL_HCD_PortEnabled_Callback>
 80036bc:	e002      	b.n	80036c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f006 faf8 	bl	8009cb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d103      	bne.n	80036d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f043 0320 	orr.w	r3, r3, #32
 80036d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036dc:	461a      	mov	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	3718      	adds	r7, #24
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e1be      	b.n	8003a7c <HAL_I2C_Init+0x390>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a9f      	ldr	r2, [pc, #636]	; (8003980 <HAL_I2C_Init+0x294>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d00e      	beq.n	8003726 <HAL_I2C_Init+0x3a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a9d      	ldr	r2, [pc, #628]	; (8003984 <HAL_I2C_Init+0x298>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d009      	beq.n	8003726 <HAL_I2C_Init+0x3a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a9c      	ldr	r2, [pc, #624]	; (8003988 <HAL_I2C_Init+0x29c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d004      	beq.n	8003726 <HAL_I2C_Init+0x3a>
 800371c:	f240 11bf 	movw	r1, #447	; 0x1bf
 8003720:	489a      	ldr	r0, [pc, #616]	; (800398c <HAL_I2C_Init+0x2a0>)
 8003722:	f7fd fbd2 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_I2C_Init+0x4c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	4a97      	ldr	r2, [pc, #604]	; (8003990 <HAL_I2C_Init+0x2a4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d904      	bls.n	8003742 <HAL_I2C_Init+0x56>
 8003738:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 800373c:	4893      	ldr	r0, [pc, #588]	; (800398c <HAL_I2C_Init+0x2a0>)
 800373e:	f7fd fbc4 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_I2C_Init+0x72>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003752:	d004      	beq.n	800375e <HAL_I2C_Init+0x72>
 8003754:	f240 11c1 	movw	r1, #449	; 0x1c1
 8003758:	488c      	ldr	r0, [pc, #560]	; (800398c <HAL_I2C_Init+0x2a0>)
 800375a:	f7fd fbb6 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d004      	beq.n	8003778 <HAL_I2C_Init+0x8c>
 800376e:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 8003772:	4886      	ldr	r0, [pc, #536]	; (800398c <HAL_I2C_Init+0x2a0>)
 8003774:	f7fd fba9 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003780:	d009      	beq.n	8003796 <HAL_I2C_Init+0xaa>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800378a:	d004      	beq.n	8003796 <HAL_I2C_Init+0xaa>
 800378c:	f240 11c3 	movw	r1, #451	; 0x1c3
 8003790:	487e      	ldr	r0, [pc, #504]	; (800398c <HAL_I2C_Init+0x2a0>)
 8003792:	f7fd fb9a 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_I2C_Init+0xc4>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d004      	beq.n	80037b0 <HAL_I2C_Init+0xc4>
 80037a6:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80037aa:	4878      	ldr	r0, [pc, #480]	; (800398c <HAL_I2C_Init+0x2a0>)
 80037ac:	f7fd fb8d 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_I2C_Init+0xda>
 80037bc:	f240 11c5 	movw	r1, #453	; 0x1c5
 80037c0:	4872      	ldr	r0, [pc, #456]	; (800398c <HAL_I2C_Init+0x2a0>)
 80037c2:	f7fd fb82 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69db      	ldr	r3, [r3, #28]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d008      	beq.n	80037e0 <HAL_I2C_Init+0xf4>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d004      	beq.n	80037e0 <HAL_I2C_Init+0xf4>
 80037d6:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 80037da:	486c      	ldr	r0, [pc, #432]	; (800398c <HAL_I2C_Init+0x2a0>)
 80037dc:	f7fd fb75 	bl	8000eca <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_I2C_Init+0x10e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a1b      	ldr	r3, [r3, #32]
 80037ec:	2b80      	cmp	r3, #128	; 0x80
 80037ee:	d004      	beq.n	80037fa <HAL_I2C_Init+0x10e>
 80037f0:	f240 11c7 	movw	r1, #455	; 0x1c7
 80037f4:	4865      	ldr	r0, [pc, #404]	; (800398c <HAL_I2C_Init+0x2a0>)
 80037f6:	f7fd fb68 	bl	8000eca <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fc ffc2 	bl	8000798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2224      	movs	r2, #36	; 0x24
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800383a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800384a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800384c:	f002 fa88 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8003850:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	4a4f      	ldr	r2, [pc, #316]	; (8003994 <HAL_I2C_Init+0x2a8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d807      	bhi.n	800386c <HAL_I2C_Init+0x180>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	4a4e      	ldr	r2, [pc, #312]	; (8003998 <HAL_I2C_Init+0x2ac>)
 8003860:	4293      	cmp	r3, r2
 8003862:	bf94      	ite	ls
 8003864:	2301      	movls	r3, #1
 8003866:	2300      	movhi	r3, #0
 8003868:	b2db      	uxtb	r3, r3
 800386a:	e006      	b.n	800387a <HAL_I2C_Init+0x18e>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_I2C_Init+0x2b0>)
 8003870:	4293      	cmp	r3, r2
 8003872:	bf94      	ite	ls
 8003874:	2301      	movls	r3, #1
 8003876:	2300      	movhi	r3, #0
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <HAL_I2C_Init+0x196>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0fc      	b.n	8003a7c <HAL_I2C_Init+0x390>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	4a46      	ldr	r2, [pc, #280]	; (80039a0 <HAL_I2C_Init+0x2b4>)
 8003886:	fba2 2303 	umull	r2, r3, r2, r3
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68ba      	ldr	r2, [r7, #8]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6a1b      	ldr	r3, [r3, #32]
 80038a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	4a38      	ldr	r2, [pc, #224]	; (8003994 <HAL_I2C_Init+0x2a8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d802      	bhi.n	80038bc <HAL_I2C_Init+0x1d0>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3301      	adds	r3, #1
 80038ba:	e009      	b.n	80038d0 <HAL_I2C_Init+0x1e4>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038c2:	fb02 f303 	mul.w	r3, r2, r3
 80038c6:	4a37      	ldr	r2, [pc, #220]	; (80039a4 <HAL_I2C_Init+0x2b8>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	099b      	lsrs	r3, r3, #6
 80038ce:	3301      	adds	r3, #1
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6812      	ldr	r2, [r2, #0]
 80038d4:	430b      	orrs	r3, r1
 80038d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	492a      	ldr	r1, [pc, #168]	; (8003994 <HAL_I2C_Init+0x2a8>)
 80038ec:	428b      	cmp	r3, r1
 80038ee:	d819      	bhi.n	8003924 <HAL_I2C_Init+0x238>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e59      	subs	r1, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	005b      	lsls	r3, r3, #1
 80038fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038fe:	1c59      	adds	r1, r3, #1
 8003900:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003904:	400b      	ands	r3, r1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <HAL_I2C_Init+0x234>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e59      	subs	r1, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	fbb1 f3f3 	udiv	r3, r1, r3
 8003918:	3301      	adds	r3, #1
 800391a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391e:	e066      	b.n	80039ee <HAL_I2C_Init+0x302>
 8003920:	2304      	movs	r3, #4
 8003922:	e064      	b.n	80039ee <HAL_I2C_Init+0x302>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d111      	bne.n	8003950 <HAL_I2C_Init+0x264>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e58      	subs	r0, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6859      	ldr	r1, [r3, #4]
 8003934:	460b      	mov	r3, r1
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	2b00      	cmp	r3, #0
 8003946:	bf0c      	ite	eq
 8003948:	2301      	moveq	r3, #1
 800394a:	2300      	movne	r3, #0
 800394c:	b2db      	uxtb	r3, r3
 800394e:	e012      	b.n	8003976 <HAL_I2C_Init+0x28a>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	440b      	add	r3, r1
 800395e:	0099      	lsls	r1, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	fbb0 f3f3 	udiv	r3, r0, r3
 8003966:	3301      	adds	r3, #1
 8003968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396c:	2b00      	cmp	r3, #0
 800396e:	bf0c      	ite	eq
 8003970:	2301      	moveq	r3, #1
 8003972:	2300      	movne	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d016      	beq.n	80039a8 <HAL_I2C_Init+0x2bc>
 800397a:	2301      	movs	r3, #1
 800397c:	e037      	b.n	80039ee <HAL_I2C_Init+0x302>
 800397e:	bf00      	nop
 8003980:	40005400 	.word	0x40005400
 8003984:	40005800 	.word	0x40005800
 8003988:	40005c00 	.word	0x40005c00
 800398c:	0800aa98 	.word	0x0800aa98
 8003990:	00061a80 	.word	0x00061a80
 8003994:	000186a0 	.word	0x000186a0
 8003998:	001e847f 	.word	0x001e847f
 800399c:	003d08ff 	.word	0x003d08ff
 80039a0:	431bde83 	.word	0x431bde83
 80039a4:	10624dd3 	.word	0x10624dd3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d10e      	bne.n	80039ce <HAL_I2C_Init+0x2e2>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	440b      	add	r3, r1
 80039be:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c2:	3301      	adds	r3, #1
 80039c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039cc:	e00f      	b.n	80039ee <HAL_I2C_Init+0x302>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	1e58      	subs	r0, r3, #1
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	0099      	lsls	r1, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6809      	ldr	r1, [r1, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	431a      	orrs	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	6911      	ldr	r1, [r2, #16]
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	68d2      	ldr	r2, [r2, #12]
 8003a28:	4311      	orrs	r1, r2
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	695a      	ldr	r2, [r3, #20]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2220      	movs	r2, #32
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b088      	sub	sp, #32
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	460b      	mov	r3, r1
 8003a92:	817b      	strh	r3, [r7, #10]
 8003a94:	4613      	mov	r3, r2
 8003a96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a98:	f7fd fc46 	bl	8001328 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	f040 80e0 	bne.w	8003c6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	2319      	movs	r3, #25
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	4970      	ldr	r1, [pc, #448]	; (8003c78 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fc72 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003abc:	4603      	mov	r3, r0
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d001      	beq.n	8003ac6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e0d3      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d101      	bne.n	8003ad4 <HAL_I2C_Master_Transmit+0x50>
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	e0cc      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d007      	beq.n	8003afa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2221      	movs	r2, #33	; 0x21
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2210      	movs	r2, #16
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	893a      	ldrh	r2, [r7, #8]
 8003b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	4a50      	ldr	r2, [pc, #320]	; (8003c7c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b3c:	8979      	ldrh	r1, [r7, #10]
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	6a3a      	ldr	r2, [r7, #32]
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 fadc 	bl	8004100 <I2C_MasterRequestWrite>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e08d      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b68:	e066      	b.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6a39      	ldr	r1, [r7, #32]
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fcec 	bl	800454c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00d      	beq.n	8003b96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d107      	bne.n	8003b92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06b      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	781a      	ldrb	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba6:	1c5a      	adds	r2, r3, #1
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	b29a      	uxth	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d11b      	bne.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	781a      	ldrb	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	6a39      	ldr	r1, [r7, #32]
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fcdc 	bl	80045ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00d      	beq.n	8003c38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	2b04      	cmp	r3, #4
 8003c22:	d107      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e01a      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d194      	bne.n	8003b6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2220      	movs	r2, #32
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3718      	adds	r7, #24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000

08003c80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08c      	sub	sp, #48	; 0x30
 8003c84:	af02      	add	r7, sp, #8
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	817b      	strh	r3, [r7, #10]
 8003c90:	4613      	mov	r3, r2
 8003c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c94:	f7fd fb48 	bl	8001328 <HAL_GetTick>
 8003c98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	f040 820b 	bne.w	80040be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2319      	movs	r3, #25
 8003cae:	2201      	movs	r2, #1
 8003cb0:	497c      	ldr	r1, [pc, #496]	; (8003ea4 <HAL_I2C_Master_Receive+0x224>)
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fb74 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d001      	beq.n	8003cc2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e1fe      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_I2C_Master_Receive+0x50>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e1f7      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d007      	beq.n	8003cf6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2222      	movs	r2, #34	; 0x22
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2210      	movs	r2, #16
 8003d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	893a      	ldrh	r2, [r7, #8]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4a5c      	ldr	r2, [pc, #368]	; (8003ea8 <HAL_I2C_Master_Receive+0x228>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d38:	8979      	ldrh	r1, [r7, #10]
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fa60 	bl	8004204 <I2C_MasterRequestRead>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e1b8      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d113      	bne.n	8003d7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d56:	2300      	movs	r3, #0
 8003d58:	623b      	str	r3, [r7, #32]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	695b      	ldr	r3, [r3, #20]
 8003d60:	623b      	str	r3, [r7, #32]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e18c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d11b      	bne.n	8003dbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	61fb      	str	r3, [r7, #28]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	e16c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d11b      	bne.n	8003dfe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003de6:	2300      	movs	r3, #0
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	e14c      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e24:	e138      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	f200 80f1 	bhi.w	8004012 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d123      	bne.n	8003e80 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 fc07 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e139      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691a      	ldr	r2, [r3, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	1c5a      	adds	r2, r3, #1
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e7e:	e10b      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d14e      	bne.n	8003f26 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	2200      	movs	r2, #0
 8003e90:	4906      	ldr	r1, [pc, #24]	; (8003eac <HAL_I2C_Master_Receive+0x22c>)
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa84 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e10e      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
 8003ea2:	bf00      	nop
 8003ea4:	00100002 	.word	0x00100002
 8003ea8:	ffff0000 	.word	0xffff0000
 8003eac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	691a      	ldr	r2, [r3, #16]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f24:	e0b8      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4966      	ldr	r1, [pc, #408]	; (80040c8 <HAL_I2C_Master_Receive+0x448>)
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa35 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f36:	4603      	mov	r3, r0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d001      	beq.n	8003f40 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0bf      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	691a      	ldr	r2, [r3, #16]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f62:	1c5a      	adds	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f88:	2200      	movs	r2, #0
 8003f8a:	494f      	ldr	r1, [pc, #316]	; (80040c8 <HAL_I2C_Master_Receive+0x448>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa07 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e091      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691a      	ldr	r2, [r3, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	1c5a      	adds	r2, r3, #1
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004010:	e042      	b.n	8004098 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	f000 fb1a 	bl	8004650 <I2C_WaitOnRXNEFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e04c      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	f003 0304 	and.w	r3, r3, #4
 8004062:	2b04      	cmp	r3, #4
 8004064:	d118      	bne.n	8004098 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	f47f aec2 	bne.w	8003e26 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2220      	movs	r2, #32
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	e000      	b.n	80040c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3728      	adds	r7, #40	; 0x28
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	00010004 	.word	0x00010004

080040cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040da:	b2db      	uxtb	r3, r3
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	607a      	str	r2, [r7, #4]
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	460b      	mov	r3, r1
 800410e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b08      	cmp	r3, #8
 800411a:	d006      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d003      	beq.n	800412a <I2C_MasterRequestWrite+0x2a>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004128:	d108      	bne.n	800413c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	e00b      	b.n	8004154 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	2b12      	cmp	r3, #18
 8004142:	d107      	bne.n	8004154 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004152:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	9300      	str	r3, [sp, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f91d 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800417a:	d103      	bne.n	8004184 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004182:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e035      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004190:	d108      	bne.n	80041a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b2db      	uxtb	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041a0:	611a      	str	r2, [r3, #16]
 80041a2:	e01b      	b.n	80041dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041a4:	897b      	ldrh	r3, [r7, #10]
 80041a6:	11db      	asrs	r3, r3, #7
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 0306 	and.w	r3, r3, #6
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	f063 030f 	orn	r3, r3, #15
 80041b4:	b2da      	uxtb	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	490e      	ldr	r1, [pc, #56]	; (80041fc <I2C_MasterRequestWrite+0xfc>)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f943 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e010      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4907      	ldr	r1, [pc, #28]	; (8004200 <I2C_MasterRequestWrite+0x100>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 f933 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3718      	adds	r7, #24
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	00010008 	.word	0x00010008
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	460b      	mov	r3, r1
 8004212:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004228:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	2b08      	cmp	r3, #8
 800422e:	d006      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d003      	beq.n	800423e <I2C_MasterRequestRead+0x3a>
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800423c:	d108      	bne.n	8004250 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e00b      	b.n	8004268 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	2b11      	cmp	r3, #17
 8004256:	d107      	bne.n	8004268 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004266:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f000 f893 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00d      	beq.n	800429c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800428a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428e:	d103      	bne.n	8004298 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e079      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042a4:	d108      	bne.n	80042b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042a6:	897b      	ldrh	r3, [r7, #10]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	611a      	str	r2, [r3, #16]
 80042b6:	e05f      	b.n	8004378 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042b8:	897b      	ldrh	r3, [r7, #10]
 80042ba:	11db      	asrs	r3, r3, #7
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	f003 0306 	and.w	r3, r3, #6
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	f063 030f 	orn	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	4930      	ldr	r1, [pc, #192]	; (8004398 <I2C_MasterRequestRead+0x194>)
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f000 f8b9 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e054      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042e6:	897b      	ldrh	r3, [r7, #10]
 80042e8:	b2da      	uxtb	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4929      	ldr	r1, [pc, #164]	; (800439c <I2C_MasterRequestRead+0x198>)
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f8a9 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e044      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004306:	2300      	movs	r3, #0
 8004308:	613b      	str	r3, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	613b      	str	r3, [r7, #16]
 800431a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800432a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f831 	bl	80043a0 <I2C_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00d      	beq.n	8004360 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d103      	bne.n	800435c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800435a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e017      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004360:	897b      	ldrh	r3, [r7, #10]
 8004362:	11db      	asrs	r3, r3, #7
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 0306 	and.w	r3, r3, #6
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f063 030e 	orn	r3, r3, #14
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4907      	ldr	r1, [pc, #28]	; (800439c <I2C_MasterRequestRead+0x198>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f865 	bl	800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3718      	adds	r7, #24
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	00010008 	.word	0x00010008
 800439c:	00010002 	.word	0x00010002

080043a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	4613      	mov	r3, r2
 80043ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043b0:	e025      	b.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043b8:	d021      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ba:	f7fc ffb5 	bl	8001328 <HAL_GetTick>
 80043be:	4602      	mov	r2, r0
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d302      	bcc.n	80043d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d116      	bne.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e023      	b.n	8004446 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	43da      	mvns	r2, r3
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4013      	ands	r3, r2
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	bf0c      	ite	eq
 800441a:	2301      	moveq	r3, #1
 800441c:	2300      	movne	r3, #0
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	e00c      	b.n	800443e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d0b6      	beq.n	80043b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800444e:	b580      	push	{r7, lr}
 8004450:	b084      	sub	sp, #16
 8004452:	af00      	add	r7, sp, #0
 8004454:	60f8      	str	r0, [r7, #12]
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800445c:	e051      	b.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800446c:	d123      	bne.n	80044b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004486:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e046      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044bc:	d021      	beq.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044be:	f7fc ff33 	bl	8001328 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d302      	bcc.n	80044d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f043 0220 	orr.w	r2, r3, #32
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e020      	b.n	8004544 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b01      	cmp	r3, #1
 800450a:	d10c      	bne.n	8004526 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	43da      	mvns	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4013      	ands	r3, r2
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	bf14      	ite	ne
 800451e:	2301      	movne	r3, #1
 8004520:	2300      	moveq	r3, #0
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e00b      	b.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	43da      	mvns	r2, r3
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	4013      	ands	r3, r2
 8004532:	b29b      	uxth	r3, r3
 8004534:	2b00      	cmp	r3, #0
 8004536:	bf14      	ite	ne
 8004538:	2301      	movne	r3, #1
 800453a:	2300      	moveq	r3, #0
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b00      	cmp	r3, #0
 8004540:	d18d      	bne.n	800445e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004558:	e02d      	b.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f8ce 	bl	80046fc <I2C_IsAcknowledgeFailed>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e02d      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004570:	d021      	beq.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004572:	f7fc fed9 	bl	8001328 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	429a      	cmp	r2, r3
 8004580:	d302      	bcc.n	8004588 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d116      	bne.n	80045b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2220      	movs	r2, #32
 8004592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f043 0220 	orr.w	r2, r3, #32
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e007      	b.n	80045c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	2b80      	cmp	r3, #128	; 0x80
 80045c2:	d1ca      	bne.n	800455a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045da:	e02d      	b.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f88d 	bl	80046fc <I2C_IsAcknowledgeFailed>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e02d      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045f2:	d021      	beq.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045f4:	f7fc fe98 	bl	8001328 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d116      	bne.n	8004638 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2220      	movs	r2, #32
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004624:	f043 0220 	orr.w	r2, r3, #32
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e007      	b.n	8004648 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695b      	ldr	r3, [r3, #20]
 800463e:	f003 0304 	and.w	r3, r3, #4
 8004642:	2b04      	cmp	r3, #4
 8004644:	d1ca      	bne.n	80045dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004646:	2300      	movs	r3, #0
}
 8004648:	4618      	mov	r0, r3
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800465c:	e042      	b.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d119      	bne.n	80046a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e029      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a0:	f7fc fe42 	bl	8001328 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	68ba      	ldr	r2, [r7, #8]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d302      	bcc.n	80046b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d116      	bne.n	80046e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e007      	b.n	80046f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ee:	2b40      	cmp	r3, #64	; 0x40
 80046f0:	d1b5      	bne.n	800465e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d11b      	bne.n	800474c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800471c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	f043 0204 	orr.w	r2, r3, #4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
	...

0800475c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e1e7      	b.n	8004b3e <HAL_I2S_Init+0x3e2>
  }

  /* Check the I2S parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a9b      	ldr	r2, [pc, #620]	; (80049e0 <HAL_I2S_Init+0x284>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d018      	beq.n	80047aa <HAL_I2S_Init+0x4e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a99      	ldr	r2, [pc, #612]	; (80049e4 <HAL_I2S_Init+0x288>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d013      	beq.n	80047aa <HAL_I2S_Init+0x4e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a98      	ldr	r2, [pc, #608]	; (80049e8 <HAL_I2S_Init+0x28c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00e      	beq.n	80047aa <HAL_I2S_Init+0x4e>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a96      	ldr	r2, [pc, #600]	; (80049ec <HAL_I2S_Init+0x290>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d009      	beq.n	80047aa <HAL_I2S_Init+0x4e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a95      	ldr	r2, [pc, #596]	; (80049f0 <HAL_I2S_Init+0x294>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d004      	beq.n	80047aa <HAL_I2S_Init+0x4e>
 80047a0:	f240 111b 	movw	r1, #283	; 0x11b
 80047a4:	4893      	ldr	r0, [pc, #588]	; (80049f4 <HAL_I2S_Init+0x298>)
 80047a6:	f7fc fb90 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_MODE(hi2s->Init.Mode));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <HAL_I2S_Init+0x7e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ba:	d00e      	beq.n	80047da <HAL_I2S_Init+0x7e>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c4:	d009      	beq.n	80047da <HAL_I2S_Init+0x7e>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ce:	d004      	beq.n	80047da <HAL_I2S_Init+0x7e>
 80047d0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80047d4:	4887      	ldr	r0, [pc, #540]	; (80049f4 <HAL_I2S_Init+0x298>)
 80047d6:	f7fc fb78 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_STANDARD(hi2s->Init.Standard));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_I2S_Init+0xb0>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b10      	cmp	r3, #16
 80047e8:	d010      	beq.n	800480c <HAL_I2S_Init+0xb0>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d00c      	beq.n	800480c <HAL_I2S_Init+0xb0>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b30      	cmp	r3, #48	; 0x30
 80047f8:	d008      	beq.n	800480c <HAL_I2S_Init+0xb0>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2bb0      	cmp	r3, #176	; 0xb0
 8004800:	d004      	beq.n	800480c <HAL_I2S_Init+0xb0>
 8004802:	f240 111d 	movw	r1, #285	; 0x11d
 8004806:	487b      	ldr	r0, [pc, #492]	; (80049f4 <HAL_I2S_Init+0x298>)
 8004808:	f7fc fb5f 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d010      	beq.n	8004836 <HAL_I2S_Init+0xda>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d00c      	beq.n	8004836 <HAL_I2S_Init+0xda>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	2b03      	cmp	r3, #3
 8004822:	d008      	beq.n	8004836 <HAL_I2S_Init+0xda>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	2b05      	cmp	r3, #5
 800482a:	d004      	beq.n	8004836 <HAL_I2S_Init+0xda>
 800482c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004830:	4870      	ldr	r0, [pc, #448]	; (80049f4 <HAL_I2S_Init+0x298>)
 8004832:	f7fc fb4a 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800483e:	d008      	beq.n	8004852 <HAL_I2S_Init+0xf6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d004      	beq.n	8004852 <HAL_I2S_Init+0xf6>
 8004848:	f240 111f 	movw	r1, #287	; 0x11f
 800484c:	4869      	ldr	r0, [pc, #420]	; (80049f4 <HAL_I2S_Init+0x298>)
 800484e:	f7fc fb3c 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800485a:	d304      	bcc.n	8004866 <HAL_I2S_Init+0x10a>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4a65      	ldr	r2, [pc, #404]	; (80049f8 <HAL_I2S_Init+0x29c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d908      	bls.n	8004878 <HAL_I2S_Init+0x11c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	2b02      	cmp	r3, #2
 800486c:	d004      	beq.n	8004878 <HAL_I2S_Init+0x11c>
 800486e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8004872:	4860      	ldr	r0, [pc, #384]	; (80049f4 <HAL_I2S_Init+0x298>)
 8004874:	f7fc fb29 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	699b      	ldr	r3, [r3, #24]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_I2S_Init+0x136>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2b08      	cmp	r3, #8
 8004886:	d004      	beq.n	8004892 <HAL_I2S_Init+0x136>
 8004888:	f240 1121 	movw	r1, #289	; 0x121
 800488c:	4859      	ldr	r0, [pc, #356]	; (80049f4 <HAL_I2S_Init+0x298>)
 800488e:	f7fc fb1c 	bl	8000eca <assert_failed>
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d008      	beq.n	80048ac <HAL_I2S_Init+0x150>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d004      	beq.n	80048ac <HAL_I2S_Init+0x150>
 80048a2:	f44f 7191 	mov.w	r1, #290	; 0x122
 80048a6:	4853      	ldr	r0, [pc, #332]	; (80049f4 <HAL_I2S_Init+0x298>)
 80048a8:	f7fc fb0f 	bl	8000eca <assert_failed>

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d109      	bne.n	80048cc <HAL_I2S_Init+0x170>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a4e      	ldr	r2, [pc, #312]	; (80049fc <HAL_I2S_Init+0x2a0>)
 80048c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fc f80c 	bl	80008e4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048e2:	f023 030f 	bic.w	r3, r3, #15
 80048e6:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2202      	movs	r2, #2
 80048ee:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d060      	beq.n	80049ba <HAL_I2S_Init+0x25e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d102      	bne.n	8004906 <HAL_I2S_Init+0x1aa>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004900:	2310      	movs	r3, #16
 8004902:	617b      	str	r3, [r7, #20]
 8004904:	e001      	b.n	800490a <HAL_I2S_Init+0x1ae>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004906:	2320      	movs	r3, #32
 8004908:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b20      	cmp	r3, #32
 8004910:	d802      	bhi.n	8004918 <HAL_I2S_Init+0x1bc>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004918:	2001      	movs	r0, #1
 800491a:	f001 fc5d 	bl	80061d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800491e:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004928:	d125      	bne.n	8004976 <HAL_I2S_Init+0x21a>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d010      	beq.n	8004954 <HAL_I2S_Init+0x1f8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	fbb2 f2f3 	udiv	r2, r2, r3
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	3305      	adds	r3, #5
 8004950:	613b      	str	r3, [r7, #16]
 8004952:	e01f      	b.n	8004994 <HAL_I2S_Init+0x238>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	fbb2 f2f3 	udiv	r2, r2, r3
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	005b      	lsls	r3, r3, #1
 8004966:	461a      	mov	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	3305      	adds	r3, #5
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e00e      	b.n	8004994 <HAL_I2S_Init+0x238>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	fbb2 f2f3 	udiv	r2, r2, r3
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	005b      	lsls	r3, r3, #1
 8004986:	461a      	mov	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	695b      	ldr	r3, [r3, #20]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	3305      	adds	r3, #5
 8004992:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <HAL_I2S_Init+0x2a4>)
 8004998:	fba2 2303 	umull	r2, r3, r2, r3
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	085b      	lsrs	r3, r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	021b      	lsls	r3, r3, #8
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e003      	b.n	80049c2 <HAL_I2S_Init+0x266>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80049ba:	2302      	movs	r3, #2
 80049bc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d902      	bls.n	80049ce <HAL_I2S_Init+0x272>
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2bff      	cmp	r3, #255	; 0xff
 80049cc:	d91a      	bls.n	8004a04 <HAL_I2S_Init+0x2a8>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	f043 0210 	orr.w	r2, r3, #16
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e0af      	b.n	8004b3e <HAL_I2S_Init+0x3e2>
 80049de:	bf00      	nop
 80049e0:	40013000 	.word	0x40013000
 80049e4:	40003800 	.word	0x40003800
 80049e8:	40003c00 	.word	0x40003c00
 80049ec:	40013400 	.word	0x40013400
 80049f0:	40015000 	.word	0x40015000
 80049f4:	0800aad0 	.word	0x0800aad0
 80049f8:	0002ee00 	.word	0x0002ee00
 80049fc:	08004c4f 	.word	0x08004c4f
 8004a00:	cccccccd 	.word	0xcccccccd
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	ea42 0103 	orr.w	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a22:	f023 030f 	bic.w	r3, r3, #15
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6851      	ldr	r1, [r2, #4]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	68d2      	ldr	r2, [r2, #12]
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6992      	ldr	r2, [r2, #24]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_ASTRTEN */

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a1b      	ldr	r3, [r3, #32]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_I2S_Init+0x306>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a1b      	ldr	r3, [r3, #32]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d004      	beq.n	8004a62 <HAL_I2S_Init+0x306>
 8004a58:	f240 11bd 	movw	r1, #445	; 0x1bd
 8004a5c:	483a      	ldr	r0, [pc, #232]	; (8004b48 <HAL_I2S_Init+0x3ec>)
 8004a5e:	f7fc fa34 	bl	8000eca <assert_failed>

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6a1b      	ldr	r3, [r3, #32]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d161      	bne.n	8004b2e <HAL_I2S_Init+0x3d2>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a37      	ldr	r2, [pc, #220]	; (8004b4c <HAL_I2S_Init+0x3f0>)
 8004a6e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a36      	ldr	r2, [pc, #216]	; (8004b50 <HAL_I2S_Init+0x3f4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_I2S_Init+0x322>
 8004a7a:	4b36      	ldr	r3, [pc, #216]	; (8004b54 <HAL_I2S_Init+0x3f8>)
 8004a7c:	e001      	b.n	8004a82 <HAL_I2S_Init+0x326>
 8004a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	4931      	ldr	r1, [pc, #196]	; (8004b50 <HAL_I2S_Init+0x3f4>)
 8004a8a:	428a      	cmp	r2, r1
 8004a8c:	d101      	bne.n	8004a92 <HAL_I2S_Init+0x336>
 8004a8e:	4a31      	ldr	r2, [pc, #196]	; (8004b54 <HAL_I2S_Init+0x3f8>)
 8004a90:	e001      	b.n	8004a96 <HAL_I2S_Init+0x33a>
 8004a92:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004a96:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004a9a:	f023 030f 	bic.w	r3, r3, #15
 8004a9e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2a      	ldr	r2, [pc, #168]	; (8004b50 <HAL_I2S_Init+0x3f4>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d101      	bne.n	8004aae <HAL_I2S_Init+0x352>
 8004aaa:	4b2a      	ldr	r3, [pc, #168]	; (8004b54 <HAL_I2S_Init+0x3f8>)
 8004aac:	e001      	b.n	8004ab2 <HAL_I2S_Init+0x356>
 8004aae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a25      	ldr	r2, [pc, #148]	; (8004b50 <HAL_I2S_Init+0x3f4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d101      	bne.n	8004ac4 <HAL_I2S_Init+0x368>
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_I2S_Init+0x3f8>)
 8004ac2:	e001      	b.n	8004ac8 <HAL_I2S_Init+0x36c>
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad4:	d003      	beq.n	8004ade <HAL_I2S_Init+0x382>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d103      	bne.n	8004ae6 <HAL_I2S_Init+0x38a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae2:	613b      	str	r3, [r7, #16]
 8004ae4:	e001      	b.n	8004aea <HAL_I2S_Init+0x38e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004af4:	4313      	orrs	r3, r2
 8004af6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004afe:	4313      	orrs	r3, r2
 8004b00:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	897b      	ldrh	r3, [r7, #10]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b16:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a0c      	ldr	r2, [pc, #48]	; (8004b50 <HAL_I2S_Init+0x3f4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d101      	bne.n	8004b26 <HAL_I2S_Init+0x3ca>
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <HAL_I2S_Init+0x3f8>)
 8004b24:	e001      	b.n	8004b2a <HAL_I2S_Init+0x3ce>
 8004b26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b2a:	897a      	ldrh	r2, [r7, #10]
 8004b2c:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	0800aad0 	.word	0x0800aad0
 8004b4c:	08004d65 	.word	0x08004d65
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40003400 	.word	0x40003400

08004b58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004b60:	bf00      	nop
 8004b62:	370c      	adds	r7, #12
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b083      	sub	sp, #12
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004b74:	bf00      	nop
 8004b76:	370c      	adds	r7, #12
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	881a      	ldrh	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	1c9a      	adds	r2, r3, #2
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	3b01      	subs	r3, #1
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7ff ffb8 	bl	8004b58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004be8:	bf00      	nop
 8004bea:	3708      	adds	r7, #8
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b082      	sub	sp, #8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c02:	b292      	uxth	r2, r2
 8004c04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	1c9a      	adds	r2, r3, #2
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10e      	bne.n	8004c46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff ff93 	bl	8004b6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b086      	sub	sp, #24
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d13a      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d109      	bne.n	8004c88 <I2S_IRQHandler+0x3a>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b40      	cmp	r3, #64	; 0x40
 8004c80:	d102      	bne.n	8004c88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff ffb4 	bl	8004bf0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d126      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f003 0320 	and.w	r3, r3, #32
 8004c9c:	2b20      	cmp	r3, #32
 8004c9e:	d11f      	bne.n	8004ce0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	613b      	str	r3, [r7, #16]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2201      	movs	r2, #1
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cd2:	f043 0202 	orr.w	r2, r3, #2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f7ff ff50 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d136      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d109      	bne.n	8004d0a <I2S_IRQHandler+0xbc>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d102      	bne.n	8004d0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7ff ff45 	bl	8004b94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b08      	cmp	r3, #8
 8004d12:	d122      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d11b      	bne.n	8004d5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
 8004d3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4c:	f043 0204 	orr.w	r2, r3, #4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7ff ff13 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d5a:	bf00      	nop
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4aa2      	ldr	r2, [pc, #648]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d101      	bne.n	8004d82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004d7e:	4ba2      	ldr	r3, [pc, #648]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d80:	e001      	b.n	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004d82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a9b      	ldr	r2, [pc, #620]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004d9c:	4b9a      	ldr	r3, [pc, #616]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004da0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db0:	d004      	beq.n	8004dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f040 8099 	bne.w	8004eee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d107      	bne.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f925 	bl	8005020 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d107      	bne.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d002      	beq.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f000 f9c8 	bl	8005180 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df6:	2b40      	cmp	r3, #64	; 0x40
 8004df8:	d13a      	bne.n	8004e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	f003 0320 	and.w	r3, r3, #32
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d035      	beq.n	8004e70 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a7e      	ldr	r2, [pc, #504]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004e0e:	4b7e      	ldr	r3, [pc, #504]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e10:	e001      	b.n	8004e16 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4979      	ldr	r1, [pc, #484]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e1e:	428b      	cmp	r3, r1
 8004e20:	d101      	bne.n	8004e26 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004e22:	4b79      	ldr	r3, [pc, #484]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004e24:	e001      	b.n	8004e2a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e2e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e3e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e62:	f043 0202 	orr.w	r2, r3, #2
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff fe88 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	2b08      	cmp	r3, #8
 8004e78:	f040 80be 	bne.w	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0320 	and.w	r3, r3, #32
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80b8 	beq.w	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e96:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a59      	ldr	r2, [pc, #356]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d101      	bne.n	8004ea6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004ea2:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004ea4:	e001      	b.n	8004eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004ea6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004eaa:	685a      	ldr	r2, [r3, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4954      	ldr	r1, [pc, #336]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004eb2:	428b      	cmp	r3, r1
 8004eb4:	d101      	bne.n	8004eba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004eb6:	4b54      	ldr	r3, [pc, #336]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004eb8:	e001      	b.n	8004ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004eba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ede:	f043 0204 	orr.w	r2, r3, #4
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff fe4a 	bl	8004b80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004eec:	e084      	b.n	8004ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004eee:	69bb      	ldr	r3, [r7, #24]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d107      	bne.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d002      	beq.n	8004f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f8be 	bl	8005084 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004f08:	69fb      	ldr	r3, [r7, #28]
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d107      	bne.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f8fd 	bl	800511c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d12f      	bne.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0320 	and.w	r3, r3, #32
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02a      	beq.n	8004f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f44:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a2e      	ldr	r2, [pc, #184]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004f50:	4b2d      	ldr	r3, [pc, #180]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f52:	e001      	b.n	8004f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f58:	685a      	ldr	r2, [r3, #4]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4929      	ldr	r1, [pc, #164]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004f60:	428b      	cmp	r3, r1
 8004f62:	d101      	bne.n	8004f68 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004f64:	4b28      	ldr	r3, [pc, #160]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004f66:	e001      	b.n	8004f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004f68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2201      	movs	r2, #1
 8004f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	f043 0202 	orr.w	r2, r3, #2
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7ff fdfa 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d131      	bne.n	8004ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d02c      	beq.n	8004ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a17      	ldr	r2, [pc, #92]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d101      	bne.n	8004fae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004faa:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fac:	e001      	b.n	8004fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004fae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4912      	ldr	r1, [pc, #72]	; (8005004 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004fba:	428b      	cmp	r3, r1
 8004fbc:	d101      	bne.n	8004fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8004fbe:	4b12      	ldr	r3, [pc, #72]	; (8005008 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004fc0:	e001      	b.n	8004fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fca:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fda:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f043 0204 	orr.w	r2, r3, #4
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7ff fdc5 	bl	8004b80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ff6:	e000      	b.n	8004ffa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ff8:	bf00      	nop
}
 8004ffa:	bf00      	nop
 8004ffc:	3720      	adds	r7, #32
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40003800 	.word	0x40003800
 8005008:	40003400 	.word	0x40003400

0800500c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005014:	bf00      	nop
 8005016:	370c      	adds	r7, #12
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	1c99      	adds	r1, r3, #2
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6251      	str	r1, [r2, #36]	; 0x24
 8005032:	881a      	ldrh	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d113      	bne.n	800507a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005060:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005066:	b29b      	uxth	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ffc9 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005090:	1c99      	adds	r1, r3, #2
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	6251      	str	r1, [r2, #36]	; 0x24
 8005096:	8819      	ldrh	r1, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1d      	ldr	r2, [pc, #116]	; (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <I2SEx_TxISR_I2SExt+0x22>
 80050a2:	4b1d      	ldr	r3, [pc, #116]	; (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050a4:	e001      	b.n	80050aa <I2SEx_TxISR_I2SExt+0x26>
 80050a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050aa:	460a      	mov	r2, r1
 80050ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	3b01      	subs	r3, #1
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d121      	bne.n	800510a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a12      	ldr	r2, [pc, #72]	; (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d101      	bne.n	80050d4 <I2SEx_TxISR_I2SExt+0x50>
 80050d0:	4b11      	ldr	r3, [pc, #68]	; (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050d2:	e001      	b.n	80050d8 <I2SEx_TxISR_I2SExt+0x54>
 80050d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050d8:	685a      	ldr	r2, [r3, #4]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	490d      	ldr	r1, [pc, #52]	; (8005114 <I2SEx_TxISR_I2SExt+0x90>)
 80050e0:	428b      	cmp	r3, r1
 80050e2:	d101      	bne.n	80050e8 <I2SEx_TxISR_I2SExt+0x64>
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <I2SEx_TxISR_I2SExt+0x94>)
 80050e6:	e001      	b.n	80050ec <I2SEx_TxISR_I2SExt+0x68>
 80050e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d106      	bne.n	800510a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff81 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	40003800 	.word	0x40003800
 8005118:	40003400 	.word	0x40003400

0800511c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68d8      	ldr	r0, [r3, #12]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512e:	1c99      	adds	r1, r3, #2
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005134:	b282      	uxth	r2, r0
 8005136:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800513c:	b29b      	uxth	r3, r3
 800513e:	3b01      	subs	r3, #1
 8005140:	b29a      	uxth	r2, r3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	d113      	bne.n	8005178 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	685a      	ldr	r2, [r3, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800515e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff ff4a 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a20      	ldr	r2, [pc, #128]	; (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d101      	bne.n	8005196 <I2SEx_RxISR_I2SExt+0x16>
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 8005194:	e001      	b.n	800519a <I2SEx_RxISR_I2SExt+0x1a>
 8005196:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800519a:	68d8      	ldr	r0, [r3, #12]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	1c99      	adds	r1, r3, #2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80051a6:	b282      	uxth	r2, r0
 80051a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d121      	bne.n	8005206 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a12      	ldr	r2, [pc, #72]	; (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <I2SEx_RxISR_I2SExt+0x50>
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 80051ce:	e001      	b.n	80051d4 <I2SEx_RxISR_I2SExt+0x54>
 80051d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051d4:	685a      	ldr	r2, [r3, #4]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	490d      	ldr	r1, [pc, #52]	; (8005210 <I2SEx_RxISR_I2SExt+0x90>)
 80051dc:	428b      	cmp	r3, r1
 80051de:	d101      	bne.n	80051e4 <I2SEx_RxISR_I2SExt+0x64>
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <I2SEx_RxISR_I2SExt+0x94>)
 80051e2:	e001      	b.n	80051e8 <I2SEx_RxISR_I2SExt+0x68>
 80051e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7ff ff03 	bl	800500c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	40003800 	.word	0x40003800
 8005214:	40003400 	.word	0x40003400

08005218 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e316      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d903      	bls.n	800523a <HAL_RCC_OscConfig+0x22>
 8005232:	21e8      	movs	r1, #232	; 0xe8
 8005234:	48a3      	ldr	r0, [pc, #652]	; (80054c4 <HAL_RCC_OscConfig+0x2ac>)
 8005236:	f7fb fe48 	bl	8000eca <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 8088 	beq.w	8005358 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00d      	beq.n	800526c <HAL_RCC_OscConfig+0x54>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d008      	beq.n	800526c <HAL_RCC_OscConfig+0x54>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005262:	d003      	beq.n	800526c <HAL_RCC_OscConfig+0x54>
 8005264:	21ed      	movs	r1, #237	; 0xed
 8005266:	4897      	ldr	r0, [pc, #604]	; (80054c4 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	f7fb fe2f 	bl	8000eca <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800526c:	4b96      	ldr	r3, [pc, #600]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b04      	cmp	r3, #4
 8005276:	d00c      	beq.n	8005292 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005278:	4b93      	ldr	r3, [pc, #588]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005280:	2b08      	cmp	r3, #8
 8005282:	d112      	bne.n	80052aa <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005284:	4b90      	ldr	r3, [pc, #576]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800528c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005290:	d10b      	bne.n	80052aa <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005292:	4b8d      	ldr	r3, [pc, #564]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d05b      	beq.n	8005356 <HAL_RCC_OscConfig+0x13e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d157      	bne.n	8005356 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e2d6      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052b2:	d106      	bne.n	80052c2 <HAL_RCC_OscConfig+0xaa>
 80052b4:	4b84      	ldr	r3, [pc, #528]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a83      	ldr	r2, [pc, #524]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e01d      	b.n	80052fe <HAL_RCC_OscConfig+0xe6>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052ca:	d10c      	bne.n	80052e6 <HAL_RCC_OscConfig+0xce>
 80052cc:	4b7e      	ldr	r3, [pc, #504]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a7d      	ldr	r2, [pc, #500]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	4b7b      	ldr	r3, [pc, #492]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a7a      	ldr	r2, [pc, #488]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052e2:	6013      	str	r3, [r2, #0]
 80052e4:	e00b      	b.n	80052fe <HAL_RCC_OscConfig+0xe6>
 80052e6:	4b78      	ldr	r3, [pc, #480]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a77      	ldr	r2, [pc, #476]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4b75      	ldr	r3, [pc, #468]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a74      	ldr	r2, [pc, #464]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80052f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d013      	beq.n	800532e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005306:	f7fc f80f 	bl	8001328 <HAL_GetTick>
 800530a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530c:	e008      	b.n	8005320 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800530e:	f7fc f80b 	bl	8001328 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b64      	cmp	r3, #100	; 0x64
 800531a:	d901      	bls.n	8005320 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e29b      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005320:	4b69      	ldr	r3, [pc, #420]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <HAL_RCC_OscConfig+0xf6>
 800532c:	e014      	b.n	8005358 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800532e:	f7fb fffb 	bl	8001328 <HAL_GetTick>
 8005332:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005336:	f7fb fff7 	bl	8001328 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b64      	cmp	r3, #100	; 0x64
 8005342:	d901      	bls.n	8005348 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e287      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005348:	4b5f      	ldr	r3, [pc, #380]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1f0      	bne.n	8005336 <HAL_RCC_OscConfig+0x11e>
 8005354:	e000      	b.n	8005358 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005356:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0302 	and.w	r3, r3, #2
 8005360:	2b00      	cmp	r3, #0
 8005362:	d079      	beq.n	8005458 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d008      	beq.n	800537e <HAL_RCC_OscConfig+0x166>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d004      	beq.n	800537e <HAL_RCC_OscConfig+0x166>
 8005374:	f240 111f 	movw	r1, #287	; 0x11f
 8005378:	4852      	ldr	r0, [pc, #328]	; (80054c4 <HAL_RCC_OscConfig+0x2ac>)
 800537a:	f7fb fda6 	bl	8000eca <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b1f      	cmp	r3, #31
 8005384:	d904      	bls.n	8005390 <HAL_RCC_OscConfig+0x178>
 8005386:	f44f 7190 	mov.w	r1, #288	; 0x120
 800538a:	484e      	ldr	r0, [pc, #312]	; (80054c4 <HAL_RCC_OscConfig+0x2ac>)
 800538c:	f7fb fd9d 	bl	8000eca <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005390:	4b4d      	ldr	r3, [pc, #308]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800539c:	4b4a      	ldr	r3, [pc, #296]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800539e:	689b      	ldr	r3, [r3, #8]
 80053a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d11c      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80053a8:	4b47      	ldr	r3, [pc, #284]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d116      	bne.n	80053e2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053b4:	4b44      	ldr	r3, [pc, #272]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d005      	beq.n	80053cc <HAL_RCC_OscConfig+0x1b4>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e245      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	4b3e      	ldr	r3, [pc, #248]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	493b      	ldr	r1, [pc, #236]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053e0:	e03a      	b.n	8005458 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d020      	beq.n	800542c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ea:	4b38      	ldr	r3, [pc, #224]	; (80054cc <HAL_RCC_OscConfig+0x2b4>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f0:	f7fb ff9a 	bl	8001328 <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053f8:	f7fb ff96 	bl	8001328 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e226      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540a:	4b2f      	ldr	r3, [pc, #188]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0f0      	beq.n	80053f8 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005416:	4b2c      	ldr	r3, [pc, #176]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4928      	ldr	r1, [pc, #160]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 8005426:	4313      	orrs	r3, r2
 8005428:	600b      	str	r3, [r1, #0]
 800542a:	e015      	b.n	8005458 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800542c:	4b27      	ldr	r3, [pc, #156]	; (80054cc <HAL_RCC_OscConfig+0x2b4>)
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fb ff79 	bl	8001328 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800543a:	f7fb ff75 	bl	8001328 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e205      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800544c:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d046      	beq.n	80054f2 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	695b      	ldr	r3, [r3, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d008      	beq.n	800547e <HAL_RCC_OscConfig+0x266>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d004      	beq.n	800547e <HAL_RCC_OscConfig+0x266>
 8005474:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8005478:	4812      	ldr	r0, [pc, #72]	; (80054c4 <HAL_RCC_OscConfig+0x2ac>)
 800547a:	f7fb fd26 	bl	8000eca <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d016      	beq.n	80054b4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005486:	4b12      	ldr	r3, [pc, #72]	; (80054d0 <HAL_RCC_OscConfig+0x2b8>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800548c:	f7fb ff4c 	bl	8001328 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005494:	f7fb ff48 	bl	8001328 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e1d8      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054a6:	4b08      	ldr	r3, [pc, #32]	; (80054c8 <HAL_RCC_OscConfig+0x2b0>)
 80054a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x27c>
 80054b2:	e01e      	b.n	80054f2 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054b4:	4b06      	ldr	r3, [pc, #24]	; (80054d0 <HAL_RCC_OscConfig+0x2b8>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ba:	f7fb ff35 	bl	8001328 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054c0:	e011      	b.n	80054e6 <HAL_RCC_OscConfig+0x2ce>
 80054c2:	bf00      	nop
 80054c4:	0800ab08 	.word	0x0800ab08
 80054c8:	40023800 	.word	0x40023800
 80054cc:	42470000 	.word	0x42470000
 80054d0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054d4:	f7fb ff28 	bl	8001328 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1b8      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e6:	4b97      	ldr	r3, [pc, #604]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80054e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1f0      	bne.n	80054d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	f000 80a8 	beq.w	8005650 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005500:	2300      	movs	r3, #0
 8005502:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00c      	beq.n	8005526 <HAL_RCC_OscConfig+0x30e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d008      	beq.n	8005526 <HAL_RCC_OscConfig+0x30e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b05      	cmp	r3, #5
 800551a:	d004      	beq.n	8005526 <HAL_RCC_OscConfig+0x30e>
 800551c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005520:	4889      	ldr	r0, [pc, #548]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 8005522:	f7fb fcd2 	bl	8000eca <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005526:	4b87      	ldr	r3, [pc, #540]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10f      	bne.n	8005552 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60bb      	str	r3, [r7, #8]
 8005536:	4b83      	ldr	r3, [pc, #524]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4a82      	ldr	r2, [pc, #520]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
 8005542:	4b80      	ldr	r3, [pc, #512]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005552:	4b7e      	ldr	r3, [pc, #504]	; (800574c <HAL_RCC_OscConfig+0x534>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800555e:	4b7b      	ldr	r3, [pc, #492]	; (800574c <HAL_RCC_OscConfig+0x534>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a7a      	ldr	r2, [pc, #488]	; (800574c <HAL_RCC_OscConfig+0x534>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7fb fedd 	bl	8001328 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fb fed9 	bl	8001328 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e169      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005584:	4b71      	ldr	r3, [pc, #452]	; (800574c <HAL_RCC_OscConfig+0x534>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d106      	bne.n	80055a6 <HAL_RCC_OscConfig+0x38e>
 8005598:	4b6a      	ldr	r3, [pc, #424]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 800559a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559c:	4a69      	ldr	r2, [pc, #420]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	6713      	str	r3, [r2, #112]	; 0x70
 80055a4:	e01c      	b.n	80055e0 <HAL_RCC_OscConfig+0x3c8>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b05      	cmp	r3, #5
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x3b0>
 80055ae:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055b2:	4a64      	ldr	r2, [pc, #400]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055b4:	f043 0304 	orr.w	r3, r3, #4
 80055b8:	6713      	str	r3, [r2, #112]	; 0x70
 80055ba:	4b62      	ldr	r3, [pc, #392]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055be:	4a61      	ldr	r2, [pc, #388]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	6713      	str	r3, [r2, #112]	; 0x70
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0x3c8>
 80055c8:	4b5e      	ldr	r3, [pc, #376]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4a5d      	ldr	r2, [pc, #372]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055ce:	f023 0301 	bic.w	r3, r3, #1
 80055d2:	6713      	str	r3, [r2, #112]	; 0x70
 80055d4:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	4a5a      	ldr	r2, [pc, #360]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 80055da:	f023 0304 	bic.w	r3, r3, #4
 80055de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d015      	beq.n	8005614 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fb fe9e 	bl	8001328 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ee:	e00a      	b.n	8005606 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055f0:	f7fb fe9a 	bl	8001328 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fe:	4293      	cmp	r3, r2
 8005600:	d901      	bls.n	8005606 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	e128      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005606:	4b4f      	ldr	r3, [pc, #316]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	f003 0302 	and.w	r3, r3, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0ee      	beq.n	80055f0 <HAL_RCC_OscConfig+0x3d8>
 8005612:	e014      	b.n	800563e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005614:	f7fb fe88 	bl	8001328 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fb fe84 	bl	8001328 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	; 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e112      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005632:	4b44      	ldr	r3, [pc, #272]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ee      	bne.n	800561c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d105      	bne.n	8005650 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005644:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	4a3e      	ldr	r2, [pc, #248]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 800564a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800564e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_RCC_OscConfig+0x45a>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d008      	beq.n	8005672 <HAL_RCC_OscConfig+0x45a>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b02      	cmp	r3, #2
 8005666:	d004      	beq.n	8005672 <HAL_RCC_OscConfig+0x45a>
 8005668:	f240 11cf 	movw	r1, #463	; 0x1cf
 800566c:	4836      	ldr	r0, [pc, #216]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 800566e:	f7fb fc2c 	bl	8000eca <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	699b      	ldr	r3, [r3, #24]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 80ed 	beq.w	8005856 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800567c:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_OscConfig+0x52c>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 030c 	and.w	r3, r3, #12
 8005684:	2b08      	cmp	r3, #8
 8005686:	f000 80ae 	beq.w	80057e6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	2b02      	cmp	r3, #2
 8005690:	f040 8092 	bne.w	80057b8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d009      	beq.n	80056b0 <HAL_RCC_OscConfig+0x498>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056a4:	d004      	beq.n	80056b0 <HAL_RCC_OscConfig+0x498>
 80056a6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80056aa:	4827      	ldr	r0, [pc, #156]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 80056ac:	f7fb fc0d 	bl	8000eca <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	2b3f      	cmp	r3, #63	; 0x3f
 80056b6:	d904      	bls.n	80056c2 <HAL_RCC_OscConfig+0x4aa>
 80056b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80056bc:	4822      	ldr	r0, [pc, #136]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 80056be:	f7fb fc04 	bl	8000eca <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c6:	2b31      	cmp	r3, #49	; 0x31
 80056c8:	d904      	bls.n	80056d4 <HAL_RCC_OscConfig+0x4bc>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80056d2:	d904      	bls.n	80056de <HAL_RCC_OscConfig+0x4c6>
 80056d4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80056d8:	481b      	ldr	r0, [pc, #108]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 80056da:	f7fb fbf6 	bl	8000eca <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	d010      	beq.n	8005708 <HAL_RCC_OscConfig+0x4f0>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d00c      	beq.n	8005708 <HAL_RCC_OscConfig+0x4f0>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d008      	beq.n	8005708 <HAL_RCC_OscConfig+0x4f0>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d004      	beq.n	8005708 <HAL_RCC_OscConfig+0x4f0>
 80056fe:	f240 11db 	movw	r1, #475	; 0x1db
 8005702:	4811      	ldr	r0, [pc, #68]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 8005704:	f7fb fbe1 	bl	8000eca <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570c:	2b01      	cmp	r3, #1
 800570e:	d903      	bls.n	8005718 <HAL_RCC_OscConfig+0x500>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	2b0f      	cmp	r3, #15
 8005716:	d904      	bls.n	8005722 <HAL_RCC_OscConfig+0x50a>
 8005718:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800571c:	480a      	ldr	r0, [pc, #40]	; (8005748 <HAL_RCC_OscConfig+0x530>)
 800571e:	f7fb fbd4 	bl	8000eca <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005722:	4b0b      	ldr	r3, [pc, #44]	; (8005750 <HAL_RCC_OscConfig+0x538>)
 8005724:	2200      	movs	r2, #0
 8005726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005728:	f7fb fdfe 	bl	8001328 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800572e:	e011      	b.n	8005754 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005730:	f7fb fdfa 	bl	8001328 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d90a      	bls.n	8005754 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e08a      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	0800ab08 	.word	0x0800ab08
 800574c:	40007000 	.word	0x40007000
 8005750:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <HAL_RCC_OscConfig+0x648>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1e7      	bne.n	8005730 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69da      	ldr	r2, [r3, #28]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	431a      	orrs	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	019b      	lsls	r3, r3, #6
 8005770:	431a      	orrs	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005776:	085b      	lsrs	r3, r3, #1
 8005778:	3b01      	subs	r3, #1
 800577a:	041b      	lsls	r3, r3, #16
 800577c:	431a      	orrs	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005782:	061b      	lsls	r3, r3, #24
 8005784:	4936      	ldr	r1, [pc, #216]	; (8005860 <HAL_RCC_OscConfig+0x648>)
 8005786:	4313      	orrs	r3, r2
 8005788:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578a:	4b36      	ldr	r3, [pc, #216]	; (8005864 <HAL_RCC_OscConfig+0x64c>)
 800578c:	2201      	movs	r2, #1
 800578e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005790:	f7fb fdca 	bl	8001328 <HAL_GetTick>
 8005794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005796:	e008      	b.n	80057aa <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005798:	f7fb fdc6 	bl	8001328 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d901      	bls.n	80057aa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80057a6:	2303      	movs	r3, #3
 80057a8:	e056      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057aa:	4b2d      	ldr	r3, [pc, #180]	; (8005860 <HAL_RCC_OscConfig+0x648>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d0f0      	beq.n	8005798 <HAL_RCC_OscConfig+0x580>
 80057b6:	e04e      	b.n	8005856 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b8:	4b2a      	ldr	r3, [pc, #168]	; (8005864 <HAL_RCC_OscConfig+0x64c>)
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057be:	f7fb fdb3 	bl	8001328 <HAL_GetTick>
 80057c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c4:	e008      	b.n	80057d8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c6:	f7fb fdaf 	bl	8001328 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e03f      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d8:	4b21      	ldr	r3, [pc, #132]	; (8005860 <HAL_RCC_OscConfig+0x648>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1f0      	bne.n	80057c6 <HAL_RCC_OscConfig+0x5ae>
 80057e4:	e037      	b.n	8005856 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d101      	bne.n	80057f2 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e032      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057f2:	4b1b      	ldr	r3, [pc, #108]	; (8005860 <HAL_RCC_OscConfig+0x648>)
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d028      	beq.n	8005852 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d121      	bne.n	8005852 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005818:	429a      	cmp	r2, r3
 800581a:	d11a      	bne.n	8005852 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005822:	4013      	ands	r3, r2
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005828:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800582a:	4293      	cmp	r3, r2
 800582c:	d111      	bne.n	8005852 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	3b01      	subs	r3, #1
 800583c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d107      	bne.n	8005852 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800584c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d001      	beq.n	8005856 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e000      	b.n	8005858 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	40023800 	.word	0x40023800
 8005864:	42470060 	.word	0x42470060

08005868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d101      	bne.n	800587c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e174      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_RCC_ClockConfig+0x24>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d904      	bls.n	8005896 <HAL_RCC_ClockConfig+0x2e>
 800588c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8005890:	487b      	ldr	r0, [pc, #492]	; (8005a80 <HAL_RCC_ClockConfig+0x218>)
 8005892:	f7fb fb1a 	bl	8000eca <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d019      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d016      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d013      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	2b03      	cmp	r3, #3
 80058ac:	d010      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d00d      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	2b05      	cmp	r3, #5
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d007      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	2b07      	cmp	r3, #7
 80058c4:	d004      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x68>
 80058c6:	f240 215d 	movw	r1, #605	; 0x25d
 80058ca:	486d      	ldr	r0, [pc, #436]	; (8005a80 <HAL_RCC_ClockConfig+0x218>)
 80058cc:	f7fb fafd 	bl	8000eca <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b6c      	ldr	r3, [pc, #432]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d90c      	bls.n	80058f8 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b69      	ldr	r3, [pc, #420]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058e6:	4b67      	ldr	r3, [pc, #412]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d001      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e136      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0302 	and.w	r3, r3, #2
 8005900:	2b00      	cmp	r3, #0
 8005902:	d049      	beq.n	8005998 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d005      	beq.n	800591c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005910:	4b5d      	ldr	r3, [pc, #372]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4a5c      	ldr	r2, [pc, #368]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005916:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800591a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0308 	and.w	r3, r3, #8
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005928:	4b57      	ldr	r3, [pc, #348]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	4a56      	ldr	r2, [pc, #344]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 800592e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005932:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d024      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	2b80      	cmp	r3, #128	; 0x80
 8005942:	d020      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b90      	cmp	r3, #144	; 0x90
 800594a:	d01c      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	2ba0      	cmp	r3, #160	; 0xa0
 8005952:	d018      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2bb0      	cmp	r3, #176	; 0xb0
 800595a:	d014      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2bc0      	cmp	r3, #192	; 0xc0
 8005962:	d010      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	2bd0      	cmp	r3, #208	; 0xd0
 800596a:	d00c      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	2be0      	cmp	r3, #224	; 0xe0
 8005972:	d008      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	2bf0      	cmp	r3, #240	; 0xf0
 800597a:	d004      	beq.n	8005986 <HAL_RCC_ClockConfig+0x11e>
 800597c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8005980:	483f      	ldr	r0, [pc, #252]	; (8005a80 <HAL_RCC_ClockConfig+0x218>)
 8005982:	f7fb faa2 	bl	8000eca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005986:	4b40      	ldr	r3, [pc, #256]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	493d      	ldr	r1, [pc, #244]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005994:	4313      	orrs	r3, r2
 8005996:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0301 	and.w	r3, r3, #1
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d059      	beq.n	8005a58 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d010      	beq.n	80059ce <HAL_RCC_ClockConfig+0x166>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d00c      	beq.n	80059ce <HAL_RCC_ClockConfig+0x166>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d008      	beq.n	80059ce <HAL_RCC_ClockConfig+0x166>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d004      	beq.n	80059ce <HAL_RCC_ClockConfig+0x166>
 80059c4:	f240 2187 	movw	r1, #647	; 0x287
 80059c8:	482d      	ldr	r0, [pc, #180]	; (8005a80 <HAL_RCC_ClockConfig+0x218>)
 80059ca:	f7fb fa7e 	bl	8000eca <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d107      	bne.n	80059e6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059d6:	4b2c      	ldr	r3, [pc, #176]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d119      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e0bf      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d003      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d107      	bne.n	8005a06 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d109      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005a02:	2301      	movs	r3, #1
 8005a04:	e0af      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a06:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e0a7      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f023 0203 	bic.w	r2, r3, #3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	4919      	ldr	r1, [pc, #100]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a28:	f7fb fc7e 	bl	8001328 <HAL_GetTick>
 8005a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a2e:	e00a      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a30:	f7fb fc7a 	bl	8001328 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e08f      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_RCC_ClockConfig+0x220>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 020c 	and.w	r2, r3, #12
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d1eb      	bne.n	8005a30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a58:	4b0a      	ldr	r3, [pc, #40]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d212      	bcs.n	8005a8c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a66:	4b07      	ldr	r3, [pc, #28]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	b2d2      	uxtb	r2, r2
 8005a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6e:	4b05      	ldr	r3, [pc, #20]	; (8005a84 <HAL_RCC_ClockConfig+0x21c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0307 	and.w	r3, r3, #7
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d007      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e072      	b.n	8005b66 <HAL_RCC_ClockConfig+0x2fe>
 8005a80:	0800ab08 	.word	0x0800ab08
 8005a84:	40023c00 	.word	0x40023c00
 8005a88:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d025      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d018      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x26a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aa8:	d013      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x26a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005ab2:	d00e      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x26a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005abc:	d009      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x26a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005ac6:	d004      	beq.n	8005ad2 <HAL_RCC_ClockConfig+0x26a>
 8005ac8:	f240 21c5 	movw	r1, #709	; 0x2c5
 8005acc:	4828      	ldr	r0, [pc, #160]	; (8005b70 <HAL_RCC_ClockConfig+0x308>)
 8005ace:	f7fb f9fc 	bl	8000eca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ad2:	4b28      	ldr	r3, [pc, #160]	; (8005b74 <HAL_RCC_ClockConfig+0x30c>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	4925      	ldr	r1, [pc, #148]	; (8005b74 <HAL_RCC_ClockConfig+0x30c>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d026      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d018      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c2>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b00:	d013      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c2>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005b0a:	d00e      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c2>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005b14:	d009      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c2>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8005b1e:	d004      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x2c2>
 8005b20:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8005b24:	4812      	ldr	r0, [pc, #72]	; (8005b70 <HAL_RCC_ClockConfig+0x308>)
 8005b26:	f7fb f9d0 	bl	8000eca <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2a:	4b12      	ldr	r3, [pc, #72]	; (8005b74 <HAL_RCC_ClockConfig+0x30c>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	490e      	ldr	r1, [pc, #56]	; (8005b74 <HAL_RCC_ClockConfig+0x30c>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b3e:	f000 f821 	bl	8005b84 <HAL_RCC_GetSysClockFreq>
 8005b42:	4602      	mov	r2, r0
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCC_ClockConfig+0x30c>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	490a      	ldr	r1, [pc, #40]	; (8005b78 <HAL_RCC_ClockConfig+0x310>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	fa22 f303 	lsr.w	r3, r2, r3
 8005b56:	4a09      	ldr	r2, [pc, #36]	; (8005b7c <HAL_RCC_ClockConfig+0x314>)
 8005b58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <HAL_RCC_ClockConfig+0x318>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fb fb9e 	bl	80012a0 <HAL_InitTick>

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	0800ab08 	.word	0x0800ab08
 8005b74:	40023800 	.word	0x40023800
 8005b78:	0800abf4 	.word	0x0800abf4
 8005b7c:	20000000 	.word	0x20000000
 8005b80:	20000004 	.word	0x20000004

08005b84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b88:	b084      	sub	sp, #16
 8005b8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	607b      	str	r3, [r7, #4]
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b9c:	4b67      	ldr	r3, [pc, #412]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 030c 	and.w	r3, r3, #12
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_RCC_GetSysClockFreq+0x40>
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	f200 80bd 	bhi.w	8005d28 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_RCC_GetSysClockFreq+0x34>
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d003      	beq.n	8005bbe <HAL_RCC_GetSysClockFreq+0x3a>
 8005bb6:	e0b7      	b.n	8005d28 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bb8:	4b61      	ldr	r3, [pc, #388]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005bba:	60bb      	str	r3, [r7, #8]
       break;
 8005bbc:	e0b7      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bbe:	4b61      	ldr	r3, [pc, #388]	; (8005d44 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005bc0:	60bb      	str	r3, [r7, #8]
      break;
 8005bc2:	e0b4      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bc4:	4b5d      	ldr	r3, [pc, #372]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bcc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bce:	4b5b      	ldr	r3, [pc, #364]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d04d      	beq.n	8005c76 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bda:	4b58      	ldr	r3, [pc, #352]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	099b      	lsrs	r3, r3, #6
 8005be0:	461a      	mov	r2, r3
 8005be2:	f04f 0300 	mov.w	r3, #0
 8005be6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005bea:	f04f 0100 	mov.w	r1, #0
 8005bee:	ea02 0800 	and.w	r8, r2, r0
 8005bf2:	ea03 0901 	and.w	r9, r3, r1
 8005bf6:	4640      	mov	r0, r8
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	014b      	lsls	r3, r1, #5
 8005c04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c08:	0142      	lsls	r2, r0, #5
 8005c0a:	4610      	mov	r0, r2
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	ebb0 0008 	subs.w	r0, r0, r8
 8005c12:	eb61 0109 	sbc.w	r1, r1, r9
 8005c16:	f04f 0200 	mov.w	r2, #0
 8005c1a:	f04f 0300 	mov.w	r3, #0
 8005c1e:	018b      	lsls	r3, r1, #6
 8005c20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c24:	0182      	lsls	r2, r0, #6
 8005c26:	1a12      	subs	r2, r2, r0
 8005c28:	eb63 0301 	sbc.w	r3, r3, r1
 8005c2c:	f04f 0000 	mov.w	r0, #0
 8005c30:	f04f 0100 	mov.w	r1, #0
 8005c34:	00d9      	lsls	r1, r3, #3
 8005c36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c3a:	00d0      	lsls	r0, r2, #3
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	eb12 0208 	adds.w	r2, r2, r8
 8005c44:	eb43 0309 	adc.w	r3, r3, r9
 8005c48:	f04f 0000 	mov.w	r0, #0
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	0259      	lsls	r1, r3, #9
 8005c52:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005c56:	0250      	lsls	r0, r2, #9
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4610      	mov	r0, r2
 8005c5e:	4619      	mov	r1, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	461a      	mov	r2, r3
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	f7fa fb12 	bl	8000290 <__aeabi_uldivmod>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	4613      	mov	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
 8005c74:	e04a      	b.n	8005d0c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c76:	4b31      	ldr	r3, [pc, #196]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	099b      	lsrs	r3, r3, #6
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f04f 0300 	mov.w	r3, #0
 8005c82:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c86:	f04f 0100 	mov.w	r1, #0
 8005c8a:	ea02 0400 	and.w	r4, r2, r0
 8005c8e:	ea03 0501 	and.w	r5, r3, r1
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	014b      	lsls	r3, r1, #5
 8005ca0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ca4:	0142      	lsls	r2, r0, #5
 8005ca6:	4610      	mov	r0, r2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	1b00      	subs	r0, r0, r4
 8005cac:	eb61 0105 	sbc.w	r1, r1, r5
 8005cb0:	f04f 0200 	mov.w	r2, #0
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	018b      	lsls	r3, r1, #6
 8005cba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005cbe:	0182      	lsls	r2, r0, #6
 8005cc0:	1a12      	subs	r2, r2, r0
 8005cc2:	eb63 0301 	sbc.w	r3, r3, r1
 8005cc6:	f04f 0000 	mov.w	r0, #0
 8005cca:	f04f 0100 	mov.w	r1, #0
 8005cce:	00d9      	lsls	r1, r3, #3
 8005cd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cd4:	00d0      	lsls	r0, r2, #3
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	1912      	adds	r2, r2, r4
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	f04f 0000 	mov.w	r0, #0
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	0299      	lsls	r1, r3, #10
 8005cea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005cee:	0290      	lsls	r0, r2, #10
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	f7fa fac6 	bl	8000290 <__aeabi_uldivmod>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4613      	mov	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d0c:	4b0b      	ldr	r3, [pc, #44]	; (8005d3c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	0c1b      	lsrs	r3, r3, #16
 8005d12:	f003 0303 	and.w	r3, r3, #3
 8005d16:	3301      	adds	r3, #1
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d24:	60bb      	str	r3, [r7, #8]
      break;
 8005d26:	e002      	b.n	8005d2e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d2a:	60bb      	str	r3, [r7, #8]
      break;
 8005d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	00f42400 	.word	0x00f42400
 8005d44:	007a1200 	.word	0x007a1200

08005d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d4c:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
 8005d5a:	bf00      	nop
 8005d5c:	20000000 	.word	0x20000000

08005d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d64:	f7ff fff0 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	0a9b      	lsrs	r3, r3, #10
 8005d70:	f003 0307 	and.w	r3, r3, #7
 8005d74:	4903      	ldr	r1, [pc, #12]	; (8005d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d76:	5ccb      	ldrb	r3, [r1, r3]
 8005d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	0800ac04 	.word	0x0800ac04

08005d88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005d8c:	f7ff ffdc 	bl	8005d48 <HAL_RCC_GetHCLKFreq>
 8005d90:	4602      	mov	r2, r0
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0b5b      	lsrs	r3, r3, #13
 8005d98:	f003 0307 	and.w	r3, r3, #7
 8005d9c:	4903      	ldr	r1, [pc, #12]	; (8005dac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d9e:	5ccb      	ldrb	r3, [r1, r3]
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	40023800 	.word	0x40023800
 8005dac:	0800ac04 	.word	0x0800ac04

08005db0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b086      	sub	sp, #24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b0f      	cmp	r3, #15
 8005dce:	d904      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x2a>
 8005dd0:	f640 11d9 	movw	r1, #2521	; 0x9d9
 8005dd4:	489d      	ldr	r0, [pc, #628]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dd6:	f7fb f878 	bl	8000eca <assert_failed>

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0301 	and.w	r3, r3, #1
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d105      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x42>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d060      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x104>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d903      	bls.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	2b07      	cmp	r3, #7
 8005e00:	d904      	bls.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005e02:	f44f 611e 	mov.w	r1, #2528	; 0x9e0
 8005e06:	4891      	ldr	r0, [pc, #580]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e08:	f7fb f85f 	bl	8000eca <assert_failed>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b31      	cmp	r3, #49	; 0x31
 8005e12:	d904      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005e1c:	d904      	bls.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8005e1e:	f640 11e1 	movw	r1, #2529	; 0x9e1
 8005e22:	488a      	ldr	r0, [pc, #552]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e24:	f7fb f851 	bl	8000eca <assert_failed>
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d903      	bls.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x88>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	2b3f      	cmp	r3, #63	; 0x3f
 8005e36:	d904      	bls.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8005e38:	f640 11e3 	movw	r1, #2531	; 0x9e3
 8005e3c:	4883      	ldr	r0, [pc, #524]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005e3e:	f7fb f844 	bl	8000eca <assert_failed>
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005e42:	4b83      	ldr	r3, [pc, #524]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e48:	f7fb fa6e 	bl	8001328 <HAL_GetTick>
 8005e4c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e50:	f7fb fa6a 	bl	8001328 <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e1ae      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e62:	4b7c      	ldr	r3, [pc, #496]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0xa0>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685a      	ldr	r2, [r3, #4]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	019b      	lsls	r3, r3, #6
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	071b      	lsls	r3, r3, #28
 8005e80:	4974      	ldr	r1, [pc, #464]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e88:	4b71      	ldr	r3, [pc, #452]	; (8006050 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e8e:	f7fb fa4b 	bl	8001328 <HAL_GetTick>
 8005e92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e94:	e008      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e96:	f7fb fa47 	bl	8001328 <HAL_GetTick>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	1ad3      	subs	r3, r2, r3
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d901      	bls.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e18b      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005ea8:	4b6a      	ldr	r3, [pc, #424]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d0f0      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0302 	and.w	r3, r3, #2
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8174 	beq.w	80061aa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eca:	f000 80a6 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ed6:	f000 80a0 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	4a5e      	ldr	r2, [pc, #376]	; (8006058 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f000 809a 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	4a5c      	ldr	r2, [pc, #368]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	f000 8094 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	4a5a      	ldr	r2, [pc, #360]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	f000 808e 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	4a58      	ldr	r2, [pc, #352]	; (8006064 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	f000 8088 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	4a56      	ldr	r2, [pc, #344]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	f000 8082 	beq.w	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4a54      	ldr	r2, [pc, #336]	; (800606c <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d07c      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d077      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	4a51      	ldr	r2, [pc, #324]	; (8006074 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d072      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	4a4f      	ldr	r2, [pc, #316]	; (8006078 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d06d      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	4a4e      	ldr	r2, [pc, #312]	; (800607c <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d068      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	4a4c      	ldr	r2, [pc, #304]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d063      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d05e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	4a49      	ldr	r2, [pc, #292]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d059      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4a48      	ldr	r2, [pc, #288]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d054      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	4a46      	ldr	r2, [pc, #280]	; (8006090 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d04f      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4a45      	ldr	r2, [pc, #276]	; (8006094 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d04a      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	4a43      	ldr	r2, [pc, #268]	; (8006098 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d045      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	4a42      	ldr	r2, [pc, #264]	; (800609c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d040      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	4a40      	ldr	r2, [pc, #256]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d03b      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	4a3f      	ldr	r2, [pc, #252]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d036      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	4a3d      	ldr	r2, [pc, #244]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d031      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	4a3c      	ldr	r2, [pc, #240]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d02c      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	4a3a      	ldr	r2, [pc, #232]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d027      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	691b      	ldr	r3, [r3, #16]
 8005fce:	4a39      	ldr	r2, [pc, #228]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d022      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01d      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	4a36      	ldr	r2, [pc, #216]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d018      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	691b      	ldr	r3, [r3, #16]
 8005fec:	4a34      	ldr	r2, [pc, #208]	; (80060c0 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d013      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	691b      	ldr	r3, [r3, #16]
 8005ff6:	4a33      	ldr	r2, [pc, #204]	; (80060c4 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d00e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	4a31      	ldr	r2, [pc, #196]	; (80060c8 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d009      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	4a30      	ldr	r2, [pc, #192]	; (80060cc <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d004      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006010:	f640 2112 	movw	r1, #2578	; 0xa12
 8006014:	480d      	ldr	r0, [pc, #52]	; (800604c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8006016:	f7fa ff58 	bl	8000eca <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	4b0d      	ldr	r3, [pc, #52]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006022:	4a0c      	ldr	r2, [pc, #48]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8006024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006028:	6413      	str	r3, [r2, #64]	; 0x40
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800602c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006036:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a25      	ldr	r2, [pc, #148]	; (80060d0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800603c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006040:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006042:	f7fb f971 	bl	8001328 <HAL_GetTick>
 8006046:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006048:	e04d      	b.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800604a:	bf00      	nop
 800604c:	0800ab40 	.word	0x0800ab40
 8006050:	42470068 	.word	0x42470068
 8006054:	40023800 	.word	0x40023800
 8006058:	00020300 	.word	0x00020300
 800605c:	00030300 	.word	0x00030300
 8006060:	00040300 	.word	0x00040300
 8006064:	00050300 	.word	0x00050300
 8006068:	00060300 	.word	0x00060300
 800606c:	00070300 	.word	0x00070300
 8006070:	00080300 	.word	0x00080300
 8006074:	00090300 	.word	0x00090300
 8006078:	000a0300 	.word	0x000a0300
 800607c:	000b0300 	.word	0x000b0300
 8006080:	000c0300 	.word	0x000c0300
 8006084:	000d0300 	.word	0x000d0300
 8006088:	000e0300 	.word	0x000e0300
 800608c:	000f0300 	.word	0x000f0300
 8006090:	00100300 	.word	0x00100300
 8006094:	00110300 	.word	0x00110300
 8006098:	00120300 	.word	0x00120300
 800609c:	00130300 	.word	0x00130300
 80060a0:	00140300 	.word	0x00140300
 80060a4:	00150300 	.word	0x00150300
 80060a8:	00160300 	.word	0x00160300
 80060ac:	00170300 	.word	0x00170300
 80060b0:	00180300 	.word	0x00180300
 80060b4:	00190300 	.word	0x00190300
 80060b8:	001a0300 	.word	0x001a0300
 80060bc:	001b0300 	.word	0x001b0300
 80060c0:	001c0300 	.word	0x001c0300
 80060c4:	001d0300 	.word	0x001d0300
 80060c8:	001e0300 	.word	0x001e0300
 80060cc:	001f0300 	.word	0x001f0300
 80060d0:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80060d4:	f7fb f928 	bl	8001328 <HAL_GetTick>
 80060d8:	4602      	mov	r2, r0
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	1ad3      	subs	r3, r2, r3
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d901      	bls.n	80060e6 <HAL_RCCEx_PeriphCLKConfig+0x336>
      {
        return HAL_TIMEOUT;
 80060e2:	2303      	movs	r3, #3
 80060e4:	e06c      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80060e6:	4b38      	ldr	r3, [pc, #224]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x418>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0f0      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80060f2:	4b36      	ldr	r3, [pc, #216]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060fa:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d02f      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	429a      	cmp	r2, r3
 800610e:	d028      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006110:	4b2e      	ldr	r3, [pc, #184]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006118:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800611a:	4b2d      	ldr	r3, [pc, #180]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006120:	4b2b      	ldr	r3, [pc, #172]	; (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x420>)
 8006122:	2200      	movs	r2, #0
 8006124:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006126:	4a29      	ldr	r2, [pc, #164]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800612c:	4b27      	ldr	r3, [pc, #156]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800612e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b01      	cmp	r3, #1
 8006136:	d114      	bne.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006138:	f7fb f8f6 	bl	8001328 <HAL_GetTick>
 800613c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	e00a      	b.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006140:	f7fb f8f2 	bl	8001328 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	f241 3288 	movw	r2, #5000	; 0x1388
 800614e:	4293      	cmp	r3, r2
 8006150:	d901      	bls.n	8006156 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e034      	b.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0x410>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ee      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x390>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800616e:	d10d      	bne.n	800618c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
 8006170:	4b16      	ldr	r3, [pc, #88]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006184:	4911      	ldr	r1, [pc, #68]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006186:	4313      	orrs	r3, r2
 8006188:	608b      	str	r3, [r1, #8]
 800618a:	e005      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800618c:	4b0f      	ldr	r3, [pc, #60]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	4a0e      	ldr	r2, [pc, #56]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006192:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006196:	6093      	str	r3, [r2, #8]
 8006198:	4b0c      	ldr	r3, [pc, #48]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 800619a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	691b      	ldr	r3, [r3, #16]
 80061a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061a4:	4909      	ldr	r1, [pc, #36]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7d1a      	ldrb	r2, [r3, #20]
 80061ba:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <HAL_RCCEx_PeriphCLKConfig+0x424>)
 80061bc:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40007000 	.word	0x40007000
 80061cc:	40023800 	.word	0x40023800
 80061d0:	42470e40 	.word	0x42470e40
 80061d4:	424711e0 	.word	0x424711e0

080061d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80061e4:	2300      	movs	r3, #0
 80061e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80061ec:	2300      	movs	r3, #0
 80061ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d140      	bne.n	8006278 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80061f6:	4b24      	ldr	r3, [pc, #144]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d005      	beq.n	8006212 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d131      	bne.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800620c:	4b1f      	ldr	r3, [pc, #124]	; (800628c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800620e:	617b      	str	r3, [r7, #20]
          break;
 8006210:	e031      	b.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006212:	4b1d      	ldr	r3, [pc, #116]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800621a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800621e:	d109      	bne.n	8006234 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006220:	4b19      	ldr	r3, [pc, #100]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006222:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006226:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800622a:	4a19      	ldr	r2, [pc, #100]	; (8006290 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800622c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e008      	b.n	8006246 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006234:	4b14      	ldr	r3, [pc, #80]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800623a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006240:	fbb2 f3f3 	udiv	r3, r2, r3
 8006244:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006246:	4b10      	ldr	r3, [pc, #64]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624c:	099b      	lsrs	r3, r3, #6
 800624e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	fb02 f303 	mul.w	r3, r2, r3
 8006258:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800625a:	4b0b      	ldr	r3, [pc, #44]	; (8006288 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800625c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006260:	0f1b      	lsrs	r3, r3, #28
 8006262:	f003 0307 	and.w	r3, r3, #7
 8006266:	68ba      	ldr	r2, [r7, #8]
 8006268:	fbb2 f3f3 	udiv	r3, r2, r3
 800626c:	617b      	str	r3, [r7, #20]
          break;
 800626e:	e002      	b.n	8006276 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	617b      	str	r3, [r7, #20]
          break;
 8006274:	bf00      	nop
        }
      }
      break;
 8006276:	bf00      	nop
    }
  }
  return frequency;
 8006278:	697b      	ldr	r3, [r7, #20]
}
 800627a:	4618      	mov	r0, r3
 800627c:	371c      	adds	r7, #28
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40023800 	.word	0x40023800
 800628c:	00bb8000 	.word	0x00bb8000
 8006290:	007a1200 	.word	0x007a1200
 8006294:	00f42400 	.word	0x00f42400

08006298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e18c      	b.n	80065c4 <HAL_SPI_Init+0x32c>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a75      	ldr	r2, [pc, #468]	; (8006484 <HAL_SPI_Init+0x1ec>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d018      	beq.n	80062e6 <HAL_SPI_Init+0x4e>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a73      	ldr	r2, [pc, #460]	; (8006488 <HAL_SPI_Init+0x1f0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d013      	beq.n	80062e6 <HAL_SPI_Init+0x4e>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a72      	ldr	r2, [pc, #456]	; (800648c <HAL_SPI_Init+0x1f4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d00e      	beq.n	80062e6 <HAL_SPI_Init+0x4e>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a70      	ldr	r2, [pc, #448]	; (8006490 <HAL_SPI_Init+0x1f8>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d009      	beq.n	80062e6 <HAL_SPI_Init+0x4e>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a6f      	ldr	r2, [pc, #444]	; (8006494 <HAL_SPI_Init+0x1fc>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d004      	beq.n	80062e6 <HAL_SPI_Init+0x4e>
 80062dc:	f44f 71a1 	mov.w	r1, #322	; 0x142
 80062e0:	486d      	ldr	r0, [pc, #436]	; (8006498 <HAL_SPI_Init+0x200>)
 80062e2:	f7fa fdf2 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <HAL_SPI_Init+0x6a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f6:	d004      	beq.n	8006302 <HAL_SPI_Init+0x6a>
 80062f8:	f240 1143 	movw	r1, #323	; 0x143
 80062fc:	4866      	ldr	r0, [pc, #408]	; (8006498 <HAL_SPI_Init+0x200>)
 80062fe:	f7fa fde4 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <HAL_SPI_Init+0x90>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006312:	d009      	beq.n	8006328 <HAL_SPI_Init+0x90>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800631c:	d004      	beq.n	8006328 <HAL_SPI_Init+0x90>
 800631e:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8006322:	485d      	ldr	r0, [pc, #372]	; (8006498 <HAL_SPI_Init+0x200>)
 8006324:	f7fa fdd1 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006330:	d008      	beq.n	8006344 <HAL_SPI_Init+0xac>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_SPI_Init+0xac>
 800633a:	f240 1145 	movw	r1, #325	; 0x145
 800633e:	4856      	ldr	r0, [pc, #344]	; (8006498 <HAL_SPI_Init+0x200>)
 8006340:	f7fa fdc3 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800634c:	d00d      	beq.n	800636a <HAL_SPI_Init+0xd2>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	699b      	ldr	r3, [r3, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <HAL_SPI_Init+0xd2>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800635e:	d004      	beq.n	800636a <HAL_SPI_Init+0xd2>
 8006360:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8006364:	484c      	ldr	r0, [pc, #304]	; (8006498 <HAL_SPI_Init+0x200>)
 8006366:	f7fa fdb0 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d020      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d01c      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	69db      	ldr	r3, [r3, #28]
 800637e:	2b10      	cmp	r3, #16
 8006380:	d018      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	2b18      	cmp	r3, #24
 8006388:	d014      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	69db      	ldr	r3, [r3, #28]
 800638e:	2b20      	cmp	r3, #32
 8006390:	d010      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69db      	ldr	r3, [r3, #28]
 8006396:	2b28      	cmp	r3, #40	; 0x28
 8006398:	d00c      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	2b30      	cmp	r3, #48	; 0x30
 80063a0:	d008      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	69db      	ldr	r3, [r3, #28]
 80063a6:	2b38      	cmp	r3, #56	; 0x38
 80063a8:	d004      	beq.n	80063b4 <HAL_SPI_Init+0x11c>
 80063aa:	f240 1147 	movw	r1, #327	; 0x147
 80063ae:	483a      	ldr	r0, [pc, #232]	; (8006498 <HAL_SPI_Init+0x200>)
 80063b0:	f7fa fd8b 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a1b      	ldr	r3, [r3, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d008      	beq.n	80063ce <HAL_SPI_Init+0x136>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	d004      	beq.n	80063ce <HAL_SPI_Init+0x136>
 80063c4:	f44f 71a4 	mov.w	r1, #328	; 0x148
 80063c8:	4833      	ldr	r0, [pc, #204]	; (8006498 <HAL_SPI_Init+0x200>)
 80063ca:	f7fa fd7e 	bl	8000eca <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <HAL_SPI_Init+0x150>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	2b10      	cmp	r3, #16
 80063dc:	d004      	beq.n	80063e8 <HAL_SPI_Init+0x150>
 80063de:	f240 1149 	movw	r1, #329	; 0x149
 80063e2:	482d      	ldr	r0, [pc, #180]	; (8006498 <HAL_SPI_Init+0x200>)
 80063e4:	f7fa fd71 	bl	8000eca <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d155      	bne.n	800649c <HAL_SPI_Init+0x204>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_SPI_Init+0x172>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d004      	beq.n	800640a <HAL_SPI_Init+0x172>
 8006400:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 8006404:	4824      	ldr	r0, [pc, #144]	; (8006498 <HAL_SPI_Init+0x200>)
 8006406:	f7fa fd60 	bl	8000eca <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d008      	beq.n	8006424 <HAL_SPI_Init+0x18c>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d004      	beq.n	8006424 <HAL_SPI_Init+0x18c>
 800641a:	f240 114d 	movw	r1, #333	; 0x14d
 800641e:	481e      	ldr	r0, [pc, #120]	; (8006498 <HAL_SPI_Init+0x200>)
 8006420:	f7fa fd53 	bl	8000eca <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800642c:	d125      	bne.n	800647a <HAL_SPI_Init+0x1e2>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69db      	ldr	r3, [r3, #28]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d05d      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	2b08      	cmp	r3, #8
 800643c:	d059      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	2b10      	cmp	r3, #16
 8006444:	d055      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	2b18      	cmp	r3, #24
 800644c:	d051      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	2b20      	cmp	r3, #32
 8006454:	d04d      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b28      	cmp	r3, #40	; 0x28
 800645c:	d049      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	2b30      	cmp	r3, #48	; 0x30
 8006464:	d045      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69db      	ldr	r3, [r3, #28]
 800646a:	2b38      	cmp	r3, #56	; 0x38
 800646c:	d041      	beq.n	80064f2 <HAL_SPI_Init+0x25a>
 800646e:	f240 1151 	movw	r1, #337	; 0x151
 8006472:	4809      	ldr	r0, [pc, #36]	; (8006498 <HAL_SPI_Init+0x200>)
 8006474:	f7fa fd29 	bl	8000eca <assert_failed>
 8006478:	e03b      	b.n	80064f2 <HAL_SPI_Init+0x25a>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	61da      	str	r2, [r3, #28]
 8006480:	e037      	b.n	80064f2 <HAL_SPI_Init+0x25a>
 8006482:	bf00      	nop
 8006484:	40013000 	.word	0x40013000
 8006488:	40003800 	.word	0x40003800
 800648c:	40003c00 	.word	0x40003c00
 8006490:	40013400 	.word	0x40013400
 8006494:	40015000 	.word	0x40015000
 8006498:	0800ab7c 	.word	0x0800ab7c
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	69db      	ldr	r3, [r3, #28]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d020      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	2b08      	cmp	r3, #8
 80064aa:	d01c      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	2b10      	cmp	r3, #16
 80064b2:	d018      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	2b18      	cmp	r3, #24
 80064ba:	d014      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d010      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b28      	cmp	r3, #40	; 0x28
 80064ca:	d00c      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	69db      	ldr	r3, [r3, #28]
 80064d0:	2b30      	cmp	r3, #48	; 0x30
 80064d2:	d008      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	2b38      	cmp	r3, #56	; 0x38
 80064da:	d004      	beq.n	80064e6 <HAL_SPI_Init+0x24e>
 80064dc:	f240 115b 	movw	r1, #347	; 0x15b
 80064e0:	483a      	ldr	r0, [pc, #232]	; (80065cc <HAL_SPI_Init+0x334>)
 80064e2:	f7fa fcf2 	bl	8000eca <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d106      	bne.n	8006512 <HAL_SPI_Init+0x27a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2200      	movs	r2, #0
 8006508:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7fa fd1d 	bl	8000f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2202      	movs	r2, #2
 8006516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006528:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800653a:	431a      	orrs	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006544:	431a      	orrs	r2, r3
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	431a      	orrs	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0301 	and.w	r3, r3, #1
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006562:	431a      	orrs	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	69db      	ldr	r3, [r3, #28]
 8006568:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800656c:	431a      	orrs	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006576:	ea42 0103 	orr.w	r1, r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	f003 0104 	and.w	r1, r3, #4
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	f003 0210 	and.w	r2, r3, #16
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	430a      	orrs	r2, r1
 80065a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	69da      	ldr	r2, [r3, #28]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	0800ab7c 	.word	0x0800ab7c

080065d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e0a0      	b.n	8006724 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d02c      	beq.n	8006644 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a4f      	ldr	r2, [pc, #316]	; (800672c <HAL_UART_Init+0x15c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d00e      	beq.n	8006612 <HAL_UART_Init+0x42>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a4d      	ldr	r2, [pc, #308]	; (8006730 <HAL_UART_Init+0x160>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d009      	beq.n	8006612 <HAL_UART_Init+0x42>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4c      	ldr	r2, [pc, #304]	; (8006734 <HAL_UART_Init+0x164>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d004      	beq.n	8006612 <HAL_UART_Init+0x42>
 8006608:	f44f 71b9 	mov.w	r1, #370	; 0x172
 800660c:	484a      	ldr	r0, [pc, #296]	; (8006738 <HAL_UART_Init+0x168>)
 800660e:	f7fa fc5c 	bl	8000eca <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d028      	beq.n	800666c <HAL_UART_Init+0x9c>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006622:	d023      	beq.n	800666c <HAL_UART_Init+0x9c>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800662c:	d01e      	beq.n	800666c <HAL_UART_Init+0x9c>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006636:	d019      	beq.n	800666c <HAL_UART_Init+0x9c>
 8006638:	f240 1173 	movw	r1, #371	; 0x173
 800663c:	483e      	ldr	r0, [pc, #248]	; (8006738 <HAL_UART_Init+0x168>)
 800663e:	f7fa fc44 	bl	8000eca <assert_failed>
 8006642:	e013      	b.n	800666c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a38      	ldr	r2, [pc, #224]	; (800672c <HAL_UART_Init+0x15c>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d00e      	beq.n	800666c <HAL_UART_Init+0x9c>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4a37      	ldr	r2, [pc, #220]	; (8006730 <HAL_UART_Init+0x160>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d009      	beq.n	800666c <HAL_UART_Init+0x9c>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a35      	ldr	r2, [pc, #212]	; (8006734 <HAL_UART_Init+0x164>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <HAL_UART_Init+0x9c>
 8006662:	f240 1177 	movw	r1, #375	; 0x177
 8006666:	4834      	ldr	r0, [pc, #208]	; (8006738 <HAL_UART_Init+0x168>)
 8006668:	f7fa fc2f 	bl	8000eca <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <HAL_UART_Init+0xb8>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d004      	beq.n	8006688 <HAL_UART_Init+0xb8>
 800667e:	f240 1179 	movw	r1, #377	; 0x179
 8006682:	482d      	ldr	r0, [pc, #180]	; (8006738 <HAL_UART_Init+0x168>)
 8006684:	f7fa fc21 	bl	8000eca <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	69db      	ldr	r3, [r3, #28]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d009      	beq.n	80066a4 <HAL_UART_Init+0xd4>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006698:	d004      	beq.n	80066a4 <HAL_UART_Init+0xd4>
 800669a:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 800669e:	4826      	ldr	r0, [pc, #152]	; (8006738 <HAL_UART_Init+0x168>)
 80066a0:	f7fa fc13 	bl	8000eca <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d106      	bne.n	80066be <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fa fd5d 	bl	8001178 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2224      	movs	r2, #36	; 0x24
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 f930 	bl	800693c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691a      	ldr	r2, [r3, #16]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800670a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	40011000 	.word	0x40011000
 8006730:	40004400 	.word	0x40004400
 8006734:	40011400 	.word	0x40011400
 8006738:	0800abb4 	.word	0x0800abb4

0800673c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b08a      	sub	sp, #40	; 0x28
 8006740:	af02      	add	r7, sp, #8
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	603b      	str	r3, [r7, #0]
 8006748:	4613      	mov	r3, r2
 800674a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006756:	b2db      	uxtb	r3, r3
 8006758:	2b20      	cmp	r3, #32
 800675a:	d17c      	bne.n	8006856 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_UART_Transmit+0x2c>
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e075      	b.n	8006858 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_UART_Transmit+0x3e>
 8006776:	2302      	movs	r3, #2
 8006778:	e06e      	b.n	8006858 <HAL_UART_Transmit+0x11c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2221      	movs	r2, #33	; 0x21
 800678c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006790:	f7fa fdca 	bl	8001328 <HAL_GetTick>
 8006794:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	88fa      	ldrh	r2, [r7, #6]
 800679a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067aa:	d108      	bne.n	80067be <HAL_UART_Transmit+0x82>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80067b4:	2300      	movs	r3, #0
 80067b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	61bb      	str	r3, [r7, #24]
 80067bc:	e003      	b.n	80067c6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80067ce:	e02a      	b.n	8006826 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	9300      	str	r3, [sp, #0]
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	68f8      	ldr	r0, [r7, #12]
 80067dc:	f000 f840 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e036      	b.n	8006858 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10b      	bne.n	8006808 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	881b      	ldrh	r3, [r3, #0]
 80067f4:	461a      	mov	r2, r3
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067fe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3302      	adds	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e007      	b.n	8006818 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	781a      	ldrb	r2, [r3, #0]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3301      	adds	r3, #1
 8006816:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800681c:	b29b      	uxth	r3, r3
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800682a:	b29b      	uxth	r3, r3
 800682c:	2b00      	cmp	r3, #0
 800682e:	d1cf      	bne.n	80067d0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	9300      	str	r3, [sp, #0]
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2200      	movs	r2, #0
 8006838:	2140      	movs	r1, #64	; 0x40
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f000 f810 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 8006840:	4603      	mov	r3, r0
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e006      	b.n	8006858 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e000      	b.n	8006858 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006856:	2302      	movs	r3, #2
  }
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b090      	sub	sp, #64	; 0x40
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006870:	e050      	b.n	8006914 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006878:	d04c      	beq.n	8006914 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800687a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800687c:	2b00      	cmp	r3, #0
 800687e:	d007      	beq.n	8006890 <UART_WaitOnFlagUntilTimeout+0x30>
 8006880:	f7fa fd52 	bl	8001328 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800688c:	429a      	cmp	r2, r3
 800688e:	d241      	bcs.n	8006914 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	330c      	adds	r3, #12
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068b0:	637a      	str	r2, [r7, #52]	; 0x34
 80068b2:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3314      	adds	r3, #20
 80068ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	e853 3f00 	ldrex	r3, [r3]
 80068d2:	613b      	str	r3, [r7, #16]
   return(result);
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f023 0301 	bic.w	r3, r3, #1
 80068da:	63bb      	str	r3, [r7, #56]	; 0x38
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3314      	adds	r3, #20
 80068e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e4:	623a      	str	r2, [r7, #32]
 80068e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e8:	69f9      	ldr	r1, [r7, #28]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	e841 2300 	strex	r3, r2, [r1]
 80068f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e5      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2220      	movs	r2, #32
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2220      	movs	r2, #32
 8006904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2200      	movs	r2, #0
 800690c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e00f      	b.n	8006934 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	4013      	ands	r3, r2
 800691e:	68ba      	ldr	r2, [r7, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	bf0c      	ite	eq
 8006924:	2301      	moveq	r3, #1
 8006926:	2300      	movne	r3, #0
 8006928:	b2db      	uxtb	r3, r3
 800692a:	461a      	mov	r2, r3
 800692c:	79fb      	ldrb	r3, [r7, #7]
 800692e:	429a      	cmp	r2, r3
 8006930:	d09f      	beq.n	8006872 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006932:	2300      	movs	r3, #0
}
 8006934:	4618      	mov	r0, r3
 8006936:	3740      	adds	r7, #64	; 0x40
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	b09f      	sub	sp, #124	; 0x7c
 8006942:	af00      	add	r7, sp, #0
 8006944:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b9b      	ldr	r3, [pc, #620]	; (8006bb8 <UART_SetConfig+0x27c>)
 800694c:	429a      	cmp	r2, r3
 800694e:	d904      	bls.n	800695a <UART_SetConfig+0x1e>
 8006950:	f640 6156 	movw	r1, #3670	; 0xe56
 8006954:	4899      	ldr	r0, [pc, #612]	; (8006bbc <UART_SetConfig+0x280>)
 8006956:	f7fa fab8 	bl	8000eca <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800695a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <UART_SetConfig+0x3a>
 8006962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800696a:	d004      	beq.n	8006976 <UART_SetConfig+0x3a>
 800696c:	f640 6157 	movw	r1, #3671	; 0xe57
 8006970:	4892      	ldr	r0, [pc, #584]	; (8006bbc <UART_SetConfig+0x280>)
 8006972:	f7fa faaa 	bl	8000eca <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <UART_SetConfig+0x60>
 800697e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006986:	d009      	beq.n	800699c <UART_SetConfig+0x60>
 8006988:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006990:	d004      	beq.n	800699c <UART_SetConfig+0x60>
 8006992:	f640 6158 	movw	r1, #3672	; 0xe58
 8006996:	4889      	ldr	r0, [pc, #548]	; (8006bbc <UART_SetConfig+0x280>)
 8006998:	f7fa fa97 	bl	8000eca <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800699c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800699e:	695a      	ldr	r2, [r3, #20]
 80069a0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80069a4:	4013      	ands	r3, r2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d103      	bne.n	80069b2 <UART_SetConfig+0x76>
 80069aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d104      	bne.n	80069bc <UART_SetConfig+0x80>
 80069b2:	f640 6159 	movw	r1, #3673	; 0xe59
 80069b6:	4881      	ldr	r0, [pc, #516]	; (8006bbc <UART_SetConfig+0x280>)
 80069b8:	f7fa fa87 	bl	8000eca <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80069c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069c8:	68d9      	ldr	r1, [r3, #12]
 80069ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	ea40 0301 	orr.w	r3, r0, r1
 80069d2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	431a      	orrs	r2, r3
 80069de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	431a      	orrs	r2, r3
 80069e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80069ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069f6:	f021 010c 	bic.w	r1, r1, #12
 80069fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a00:	430b      	orrs	r3, r1
 8006a02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a10:	6999      	ldr	r1, [r3, #24]
 8006a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	ea40 0301 	orr.w	r3, r0, r1
 8006a1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	4b67      	ldr	r3, [pc, #412]	; (8006bc0 <UART_SetConfig+0x284>)
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d004      	beq.n	8006a30 <UART_SetConfig+0xf4>
 8006a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b66      	ldr	r3, [pc, #408]	; (8006bc4 <UART_SetConfig+0x288>)
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d103      	bne.n	8006a38 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a30:	f7ff f9aa 	bl	8005d88 <HAL_RCC_GetPCLK2Freq>
 8006a34:	6778      	str	r0, [r7, #116]	; 0x74
 8006a36:	e002      	b.n	8006a3e <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a38:	f7ff f992 	bl	8005d60 <HAL_RCC_GetPCLK1Freq>
 8006a3c:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a40:	69db      	ldr	r3, [r3, #28]
 8006a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a46:	f040 80c1 	bne.w	8006bcc <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a4c:	461c      	mov	r4, r3
 8006a4e:	f04f 0500 	mov.w	r5, #0
 8006a52:	4622      	mov	r2, r4
 8006a54:	462b      	mov	r3, r5
 8006a56:	1891      	adds	r1, r2, r2
 8006a58:	6439      	str	r1, [r7, #64]	; 0x40
 8006a5a:	415b      	adcs	r3, r3
 8006a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a62:	1912      	adds	r2, r2, r4
 8006a64:	eb45 0303 	adc.w	r3, r5, r3
 8006a68:	f04f 0000 	mov.w	r0, #0
 8006a6c:	f04f 0100 	mov.w	r1, #0
 8006a70:	00d9      	lsls	r1, r3, #3
 8006a72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006a76:	00d0      	lsls	r0, r2, #3
 8006a78:	4602      	mov	r2, r0
 8006a7a:	460b      	mov	r3, r1
 8006a7c:	1911      	adds	r1, r2, r4
 8006a7e:	6639      	str	r1, [r7, #96]	; 0x60
 8006a80:	416b      	adcs	r3, r5
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
 8006a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f04f 0300 	mov.w	r3, #0
 8006a8e:	1891      	adds	r1, r2, r2
 8006a90:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a92:	415b      	adcs	r3, r3
 8006a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a96:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a9a:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006a9e:	f7f9 fbf7 	bl	8000290 <__aeabi_uldivmod>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	4b48      	ldr	r3, [pc, #288]	; (8006bc8 <UART_SetConfig+0x28c>)
 8006aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8006aac:	095b      	lsrs	r3, r3, #5
 8006aae:	011e      	lsls	r6, r3, #4
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	461c      	mov	r4, r3
 8006ab4:	f04f 0500 	mov.w	r5, #0
 8006ab8:	4622      	mov	r2, r4
 8006aba:	462b      	mov	r3, r5
 8006abc:	1891      	adds	r1, r2, r2
 8006abe:	6339      	str	r1, [r7, #48]	; 0x30
 8006ac0:	415b      	adcs	r3, r3
 8006ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006ac8:	1912      	adds	r2, r2, r4
 8006aca:	eb45 0303 	adc.w	r3, r5, r3
 8006ace:	f04f 0000 	mov.w	r0, #0
 8006ad2:	f04f 0100 	mov.w	r1, #0
 8006ad6:	00d9      	lsls	r1, r3, #3
 8006ad8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006adc:	00d0      	lsls	r0, r2, #3
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	1911      	adds	r1, r2, r4
 8006ae4:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ae6:	416b      	adcs	r3, r5
 8006ae8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	461a      	mov	r2, r3
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	1891      	adds	r1, r2, r2
 8006af6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006af8:	415b      	adcs	r3, r3
 8006afa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b00:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006b04:	f7f9 fbc4 	bl	8000290 <__aeabi_uldivmod>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	4b2e      	ldr	r3, [pc, #184]	; (8006bc8 <UART_SetConfig+0x28c>)
 8006b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	2164      	movs	r1, #100	; 0x64
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	3332      	adds	r3, #50	; 0x32
 8006b20:	4a29      	ldr	r2, [pc, #164]	; (8006bc8 <UART_SetConfig+0x28c>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b2e:	441e      	add	r6, r3
 8006b30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b32:	4618      	mov	r0, r3
 8006b34:	f04f 0100 	mov.w	r1, #0
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	1894      	adds	r4, r2, r2
 8006b3e:	623c      	str	r4, [r7, #32]
 8006b40:	415b      	adcs	r3, r3
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
 8006b44:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b48:	1812      	adds	r2, r2, r0
 8006b4a:	eb41 0303 	adc.w	r3, r1, r3
 8006b4e:	f04f 0400 	mov.w	r4, #0
 8006b52:	f04f 0500 	mov.w	r5, #0
 8006b56:	00dd      	lsls	r5, r3, #3
 8006b58:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b5c:	00d4      	lsls	r4, r2, #3
 8006b5e:	4622      	mov	r2, r4
 8006b60:	462b      	mov	r3, r5
 8006b62:	1814      	adds	r4, r2, r0
 8006b64:	653c      	str	r4, [r7, #80]	; 0x50
 8006b66:	414b      	adcs	r3, r1
 8006b68:	657b      	str	r3, [r7, #84]	; 0x54
 8006b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	1891      	adds	r1, r2, r2
 8006b76:	61b9      	str	r1, [r7, #24]
 8006b78:	415b      	adcs	r3, r3
 8006b7a:	61fb      	str	r3, [r7, #28]
 8006b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b80:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006b84:	f7f9 fb84 	bl	8000290 <__aeabi_uldivmod>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	460b      	mov	r3, r1
 8006b8c:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <UART_SetConfig+0x28c>)
 8006b8e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b92:	095b      	lsrs	r3, r3, #5
 8006b94:	2164      	movs	r1, #100	; 0x64
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	3332      	adds	r3, #50	; 0x32
 8006ba0:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <UART_SetConfig+0x28c>)
 8006ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	f003 0207 	and.w	r2, r3, #7
 8006bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4432      	add	r2, r6
 8006bb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bb4:	e0c4      	b.n	8006d40 <UART_SetConfig+0x404>
 8006bb6:	bf00      	nop
 8006bb8:	00a037a0 	.word	0x00a037a0
 8006bbc:	0800abb4 	.word	0x0800abb4
 8006bc0:	40011000 	.word	0x40011000
 8006bc4:	40011400 	.word	0x40011400
 8006bc8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bce:	461c      	mov	r4, r3
 8006bd0:	f04f 0500 	mov.w	r5, #0
 8006bd4:	4622      	mov	r2, r4
 8006bd6:	462b      	mov	r3, r5
 8006bd8:	1891      	adds	r1, r2, r2
 8006bda:	6139      	str	r1, [r7, #16]
 8006bdc:	415b      	adcs	r3, r3
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006be4:	1912      	adds	r2, r2, r4
 8006be6:	eb45 0303 	adc.w	r3, r5, r3
 8006bea:	f04f 0000 	mov.w	r0, #0
 8006bee:	f04f 0100 	mov.w	r1, #0
 8006bf2:	00d9      	lsls	r1, r3, #3
 8006bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006bf8:	00d0      	lsls	r0, r2, #3
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	eb12 0804 	adds.w	r8, r2, r4
 8006c02:	eb43 0905 	adc.w	r9, r3, r5
 8006c06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f04f 0100 	mov.w	r1, #0
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	008b      	lsls	r3, r1, #2
 8006c1a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c1e:	0082      	lsls	r2, r0, #2
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 fb34 	bl	8000290 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4b47      	ldr	r3, [pc, #284]	; (8006d4c <UART_SetConfig+0x410>)
 8006c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	011e      	lsls	r6, r3, #4
 8006c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	4602      	mov	r2, r0
 8006c40:	460b      	mov	r3, r1
 8006c42:	1894      	adds	r4, r2, r2
 8006c44:	60bc      	str	r4, [r7, #8]
 8006c46:	415b      	adcs	r3, r3
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c4e:	1812      	adds	r2, r2, r0
 8006c50:	eb41 0303 	adc.w	r3, r1, r3
 8006c54:	f04f 0400 	mov.w	r4, #0
 8006c58:	f04f 0500 	mov.w	r5, #0
 8006c5c:	00dd      	lsls	r5, r3, #3
 8006c5e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006c62:	00d4      	lsls	r4, r2, #3
 8006c64:	4622      	mov	r2, r4
 8006c66:	462b      	mov	r3, r5
 8006c68:	1814      	adds	r4, r2, r0
 8006c6a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006c6c:	414b      	adcs	r3, r1
 8006c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	4618      	mov	r0, r3
 8006c76:	f04f 0100 	mov.w	r1, #0
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	008b      	lsls	r3, r1, #2
 8006c84:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c88:	0082      	lsls	r2, r0, #2
 8006c8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006c8e:	f7f9 faff 	bl	8000290 <__aeabi_uldivmod>
 8006c92:	4602      	mov	r2, r0
 8006c94:	460b      	mov	r3, r1
 8006c96:	4b2d      	ldr	r3, [pc, #180]	; (8006d4c <UART_SetConfig+0x410>)
 8006c98:	fba3 1302 	umull	r1, r3, r3, r2
 8006c9c:	095b      	lsrs	r3, r3, #5
 8006c9e:	2164      	movs	r1, #100	; 0x64
 8006ca0:	fb01 f303 	mul.w	r3, r1, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	011b      	lsls	r3, r3, #4
 8006ca8:	3332      	adds	r3, #50	; 0x32
 8006caa:	4a28      	ldr	r2, [pc, #160]	; (8006d4c <UART_SetConfig+0x410>)
 8006cac:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb0:	095b      	lsrs	r3, r3, #5
 8006cb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cb6:	441e      	add	r6, r3
 8006cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f04f 0100 	mov.w	r1, #0
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	1894      	adds	r4, r2, r2
 8006cc6:	603c      	str	r4, [r7, #0]
 8006cc8:	415b      	adcs	r3, r3
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd0:	1812      	adds	r2, r2, r0
 8006cd2:	eb41 0303 	adc.w	r3, r1, r3
 8006cd6:	f04f 0400 	mov.w	r4, #0
 8006cda:	f04f 0500 	mov.w	r5, #0
 8006cde:	00dd      	lsls	r5, r3, #3
 8006ce0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ce4:	00d4      	lsls	r4, r2, #3
 8006ce6:	4622      	mov	r2, r4
 8006ce8:	462b      	mov	r3, r5
 8006cea:	eb12 0a00 	adds.w	sl, r2, r0
 8006cee:	eb43 0b01 	adc.w	fp, r3, r1
 8006cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f04f 0100 	mov.w	r1, #0
 8006cfc:	f04f 0200 	mov.w	r2, #0
 8006d00:	f04f 0300 	mov.w	r3, #0
 8006d04:	008b      	lsls	r3, r1, #2
 8006d06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d0a:	0082      	lsls	r2, r0, #2
 8006d0c:	4650      	mov	r0, sl
 8006d0e:	4659      	mov	r1, fp
 8006d10:	f7f9 fabe 	bl	8000290 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <UART_SetConfig+0x410>)
 8006d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8006d1e:	095b      	lsrs	r3, r3, #5
 8006d20:	2164      	movs	r1, #100	; 0x64
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	3332      	adds	r3, #50	; 0x32
 8006d2c:	4a07      	ldr	r2, [pc, #28]	; (8006d4c <UART_SetConfig+0x410>)
 8006d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d32:	095b      	lsrs	r3, r3, #5
 8006d34:	f003 020f 	and.w	r2, r3, #15
 8006d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4432      	add	r2, r6
 8006d3e:	609a      	str	r2, [r3, #8]
}
 8006d40:	bf00      	nop
 8006d42:	377c      	adds	r7, #124	; 0x7c
 8006d44:	46bd      	mov	sp, r7
 8006d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d4a:	bf00      	nop
 8006d4c:	51eb851f 	.word	0x51eb851f

08006d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d50:	b084      	sub	sp, #16
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b084      	sub	sp, #16
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	f107 001c 	add.w	r0, r7, #28
 8006d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d122      	bne.n	8006dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d105      	bne.n	8006da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f9a0 	bl	80070e8 <USB_CoreReset>
 8006da8:	4603      	mov	r3, r0
 8006daa:	73fb      	strb	r3, [r7, #15]
 8006dac:	e01a      	b.n	8006de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f994 	bl	80070e8 <USB_CoreReset>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d106      	bne.n	8006dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8006dd6:	e005      	b.n	8006de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d10b      	bne.n	8006e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	f043 0206 	orr.w	r2, r3, #6
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f043 0220 	orr.w	r2, r3, #32
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e0e:	b004      	add	sp, #16
 8006e10:	4770      	bx	lr

08006e12 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b083      	sub	sp, #12
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f043 0201 	orr.w	r2, r3, #1
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f023 0201 	bic.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	370c      	adds	r7, #12
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e56:	b580      	push	{r7, lr}
 8006e58:	b084      	sub	sp, #16
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	6078      	str	r0, [r7, #4]
 8006e5e:	460b      	mov	r3, r1
 8006e60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e72:	78fb      	ldrb	r3, [r7, #3]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d115      	bne.n	8006ea4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e84:	2001      	movs	r0, #1
 8006e86:	f7fa fa5b 	bl	8001340 <HAL_Delay>
      ms++;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f91a 	bl	80070ca <USB_GetMode>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d01e      	beq.n	8006eda <USB_SetCurrentMode+0x84>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b31      	cmp	r3, #49	; 0x31
 8006ea0:	d9f0      	bls.n	8006e84 <USB_SetCurrentMode+0x2e>
 8006ea2:	e01a      	b.n	8006eda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006ea4:	78fb      	ldrb	r3, [r7, #3]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d115      	bne.n	8006ed6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	f7fa fa42 	bl	8001340 <HAL_Delay>
      ms++;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f901 	bl	80070ca <USB_GetMode>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <USB_SetCurrentMode+0x84>
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b31      	cmp	r3, #49	; 0x31
 8006ed2:	d9f0      	bls.n	8006eb6 <USB_SetCurrentMode+0x60>
 8006ed4:	e001      	b.n	8006eda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e005      	b.n	8006ee6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2b32      	cmp	r3, #50	; 0x32
 8006ede:	d101      	bne.n	8006ee4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
	...

08006ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	019b      	lsls	r3, r3, #6
 8006f02:	f043 0220 	orr.w	r2, r3, #32
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	4a08      	ldr	r2, [pc, #32]	; (8006f34 <USB_FlushTxFifo+0x44>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d901      	bls.n	8006f1a <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e006      	b.n	8006f28 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b20      	cmp	r3, #32
 8006f24:	d0f1      	beq.n	8006f0a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr
 8006f34:	00030d40 	.word	0x00030d40

08006f38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b085      	sub	sp, #20
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2210      	movs	r2, #16
 8006f48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	4a08      	ldr	r2, [pc, #32]	; (8006f74 <USB_FlushRxFifo+0x3c>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d901      	bls.n	8006f5a <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 8006f56:	2303      	movs	r3, #3
 8006f58:	e006      	b.n	8006f68 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f003 0310 	and.w	r3, r3, #16
 8006f62:	2b10      	cmp	r3, #16
 8006f64:	d0f1      	beq.n	8006f4a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr
 8006f74:	00030d40 	.word	0x00030d40

08006f78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b089      	sub	sp, #36	; 0x24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4611      	mov	r1, r2
 8006f84:	461a      	mov	r2, r3
 8006f86:	460b      	mov	r3, r1
 8006f88:	71fb      	strb	r3, [r7, #7]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d123      	bne.n	8006fe6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f9e:	88bb      	ldrh	r3, [r7, #4]
 8006fa0:	3303      	adds	r3, #3
 8006fa2:	089b      	lsrs	r3, r3, #2
 8006fa4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61bb      	str	r3, [r7, #24]
 8006faa:	e018      	b.n	8006fde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006fac:	79fb      	ldrb	r3, [r7, #7]
 8006fae:	031a      	lsls	r2, r3, #12
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb8:	461a      	mov	r2, r3
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006fd8:	69bb      	ldr	r3, [r7, #24]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	61bb      	str	r3, [r7, #24]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d3e2      	bcc.n	8006fac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3724      	adds	r7, #36	; 0x24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b08b      	sub	sp, #44	; 0x2c
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800700a:	88fb      	ldrh	r3, [r7, #6]
 800700c:	089b      	lsrs	r3, r3, #2
 800700e:	b29b      	uxth	r3, r3
 8007010:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007012:	88fb      	ldrh	r3, [r7, #6]
 8007014:	f003 0303 	and.w	r3, r3, #3
 8007018:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800701a:	2300      	movs	r3, #0
 800701c:	623b      	str	r3, [r7, #32]
 800701e:	e014      	b.n	800704a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	601a      	str	r2, [r3, #0]
    pDest++;
 800702c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702e:	3301      	adds	r3, #1
 8007030:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007034:	3301      	adds	r3, #1
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800703a:	3301      	adds	r3, #1
 800703c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800703e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007040:	3301      	adds	r3, #1
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007044:	6a3b      	ldr	r3, [r7, #32]
 8007046:	3301      	adds	r3, #1
 8007048:	623b      	str	r3, [r7, #32]
 800704a:	6a3a      	ldr	r2, [r7, #32]
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	429a      	cmp	r2, r3
 8007050:	d3e6      	bcc.n	8007020 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007052:	8bfb      	ldrh	r3, [r7, #30]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01e      	beq.n	8007096 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007058:	2300      	movs	r3, #0
 800705a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007062:	461a      	mov	r2, r3
 8007064:	f107 0310 	add.w	r3, r7, #16
 8007068:	6812      	ldr	r2, [r2, #0]
 800706a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800706c:	693a      	ldr	r2, [r7, #16]
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	00db      	lsls	r3, r3, #3
 8007074:	fa22 f303 	lsr.w	r3, r2, r3
 8007078:	b2da      	uxtb	r2, r3
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	701a      	strb	r2, [r3, #0]
      i++;
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	3301      	adds	r3, #1
 8007082:	623b      	str	r3, [r7, #32]
      pDest++;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	3301      	adds	r3, #1
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800708a:	8bfb      	ldrh	r3, [r7, #30]
 800708c:	3b01      	subs	r3, #1
 800708e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007090:	8bfb      	ldrh	r3, [r7, #30]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d1ea      	bne.n	800706c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007098:	4618      	mov	r0, r3
 800709a:	372c      	adds	r7, #44	; 0x2c
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	68fa      	ldr	r2, [r7, #12]
 80070b8:	4013      	ands	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	f003 0301 	and.w	r3, r3, #1
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80070f0:	2300      	movs	r3, #0
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	4a13      	ldr	r2, [pc, #76]	; (8007148 <USB_CoreReset+0x60>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d901      	bls.n	8007104 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8007100:	2303      	movs	r3, #3
 8007102:	e01a      	b.n	800713a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	daf3      	bge.n	80070f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f043 0201 	orr.w	r2, r3, #1
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	3301      	adds	r3, #1
 8007120:	60fb      	str	r3, [r7, #12]
 8007122:	4a09      	ldr	r2, [pc, #36]	; (8007148 <USB_CoreReset+0x60>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d901      	bls.n	800712c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e006      	b.n	800713a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b01      	cmp	r3, #1
 8007136:	d0f1      	beq.n	800711c <USB_CoreReset+0x34>

  return HAL_OK;
 8007138:	2300      	movs	r3, #0
}
 800713a:	4618      	mov	r0, r3
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	00030d40 	.word	0x00030d40

0800714c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800714c:	b084      	sub	sp, #16
 800714e:	b580      	push	{r7, lr}
 8007150:	b084      	sub	sp, #16
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	f107 001c 	add.w	r0, r7, #28
 800715a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007168:	461a      	mov	r2, r3
 800716a:	2300      	movs	r3, #0
 800716c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007172:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800717e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719a:	2b00      	cmp	r3, #0
 800719c:	d018      	beq.n	80071d0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d10a      	bne.n	80071ba <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071b2:	f043 0304 	orr.w	r3, r3, #4
 80071b6:	6013      	str	r3, [r2, #0]
 80071b8:	e014      	b.n	80071e4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071c8:	f023 0304 	bic.w	r3, r3, #4
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	e009      	b.n	80071e4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80071de:	f023 0304 	bic.w	r3, r3, #4
 80071e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80071e4:	2110      	movs	r1, #16
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7ff fe82 	bl	8006ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fea3 	bl	8006f38 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80071f2:	2300      	movs	r3, #0
 80071f4:	60fb      	str	r3, [r7, #12]
 80071f6:	e015      	b.n	8007224 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	461a      	mov	r2, r3
 8007206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800720a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4413      	add	r3, r2
 8007214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007218:	461a      	mov	r2, r3
 800721a:	2300      	movs	r3, #0
 800721c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3301      	adds	r3, #1
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	6a3b      	ldr	r3, [r7, #32]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	429a      	cmp	r2, r3
 800722a:	d3e5      	bcc.n	80071f8 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007238:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007242:	2b00      	cmp	r3, #0
 8007244:	d00b      	beq.n	800725e <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f44f 7200 	mov.w	r2, #512	; 0x200
 800724c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a13      	ldr	r2, [pc, #76]	; (80072a0 <USB_HostInit+0x154>)
 8007252:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a13      	ldr	r2, [pc, #76]	; (80072a4 <USB_HostInit+0x158>)
 8007258:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800725c:	e009      	b.n	8007272 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2280      	movs	r2, #128	; 0x80
 8007262:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <USB_HostInit+0x15c>)
 8007268:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a0f      	ldr	r2, [pc, #60]	; (80072ac <USB_HostInit+0x160>)
 800726e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007274:	2b00      	cmp	r3, #0
 8007276:	d105      	bne.n	8007284 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f043 0210 	orr.w	r2, r3, #16
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	699a      	ldr	r2, [r3, #24]
 8007288:	4b09      	ldr	r3, [pc, #36]	; (80072b0 <USB_HostInit+0x164>)
 800728a:	4313      	orrs	r3, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8007290:	2300      	movs	r3, #0
}
 8007292:	4618      	mov	r0, r3
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800729c:	b004      	add	sp, #16
 800729e:	4770      	bx	lr
 80072a0:	01000200 	.word	0x01000200
 80072a4:	00e00300 	.word	0x00e00300
 80072a8:	00600080 	.word	0x00600080
 80072ac:	004000e0 	.word	0x004000e0
 80072b0:	a3200008 	.word	0xa3200008

080072b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80072d2:	f023 0303 	bic.w	r3, r3, #3
 80072d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	78fb      	ldrb	r3, [r7, #3]
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	68f9      	ldr	r1, [r7, #12]
 80072e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80072ec:	4313      	orrs	r3, r2
 80072ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d107      	bne.n	8007306 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80072fc:	461a      	mov	r2, r3
 80072fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007302:	6053      	str	r3, [r2, #4]
 8007304:	e009      	b.n	800731a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b02      	cmp	r3, #2
 800730a:	d106      	bne.n	800731a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007312:	461a      	mov	r2, r3
 8007314:	f241 7370 	movw	r3, #6000	; 0x1770
 8007318:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007348:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007356:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007358:	2064      	movs	r0, #100	; 0x64
 800735a:	f7f9 fff1 	bl	8001340 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8007366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800736a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800736c:	200a      	movs	r0, #10
 800736e:	f7f9 ffe7 	bl	8001340 <HAL_Delay>

  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80073a0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d109      	bne.n	80073c0 <USB_DriveVbus+0x44>
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d106      	bne.n	80073c0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073be:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073ca:	d109      	bne.n	80073e0 <USB_DriveVbus+0x64>
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d106      	bne.n	80073e0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	68fa      	ldr	r2, [r7, #12]
 80073d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80073da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073de:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3714      	adds	r7, #20
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b085      	sub	sp, #20
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	0c5b      	lsrs	r3, r3, #17
 800740c:	f003 0303 	and.w	r3, r3, #3
}
 8007410:	4618      	mov	r0, r3
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	b29b      	uxth	r3, r3
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
	...

08007440 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	461a      	mov	r2, r3
 800744e:	4603      	mov	r3, r0
 8007450:	70fb      	strb	r3, [r7, #3]
 8007452:	460b      	mov	r3, r1
 8007454:	70bb      	strb	r3, [r7, #2]
 8007456:	4613      	mov	r3, r2
 8007458:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800745a:	2300      	movs	r3, #0
 800745c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800746e:	461a      	mov	r2, r3
 8007470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007474:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007476:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800747a:	2b03      	cmp	r3, #3
 800747c:	d87e      	bhi.n	800757c <USB_HC_Init+0x13c>
 800747e:	a201      	add	r2, pc, #4	; (adr r2, 8007484 <USB_HC_Init+0x44>)
 8007480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007484:	08007495 	.word	0x08007495
 8007488:	0800753f 	.word	0x0800753f
 800748c:	08007495 	.word	0x08007495
 8007490:	08007501 	.word	0x08007501
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	015a      	lsls	r2, r3, #5
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4413      	add	r3, r2
 800749c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a0:	461a      	mov	r2, r3
 80074a2:	f240 439d 	movw	r3, #1181	; 0x49d
 80074a6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80074a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	da10      	bge.n	80074d2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	78fa      	ldrb	r2, [r7, #3]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	693a      	ldr	r2, [r7, #16]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074ce:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80074d0:	e057      	b.n	8007582 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d051      	beq.n	8007582 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80074f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80074fc:	60d3      	str	r3, [r2, #12]
      break;
 80074fe:	e040      	b.n	8007582 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007500:	78fb      	ldrb	r3, [r7, #3]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	4413      	add	r3, r2
 8007508:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800750c:	461a      	mov	r2, r3
 800750e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007512:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007514:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007518:	2b00      	cmp	r3, #0
 800751a:	da34      	bge.n	8007586 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	015a      	lsls	r2, r3, #5
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	4413      	add	r3, r2
 8007524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	0151      	lsls	r1, r2, #5
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	440a      	add	r2, r1
 8007532:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800753a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800753c:	e023      	b.n	8007586 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	015a      	lsls	r2, r3, #5
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	4413      	add	r3, r2
 8007546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800754a:	461a      	mov	r2, r3
 800754c:	f240 2325 	movw	r3, #549	; 0x225
 8007550:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007552:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007556:	2b00      	cmp	r3, #0
 8007558:	da17      	bge.n	800758a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	4413      	add	r3, r2
 8007562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	78fa      	ldrb	r2, [r7, #3]
 800756a:	0151      	lsls	r1, r2, #5
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	440a      	add	r2, r1
 8007570:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007574:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8007578:	60d3      	str	r3, [r2, #12]
      }
      break;
 800757a:	e006      	b.n	800758a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	77fb      	strb	r3, [r7, #31]
      break;
 8007580:	e004      	b.n	800758c <USB_HC_Init+0x14c>
      break;
 8007582:	bf00      	nop
 8007584:	e002      	b.n	800758c <USB_HC_Init+0x14c>
      break;
 8007586:	bf00      	nop
 8007588:	e000      	b.n	800758c <USB_HC_Init+0x14c>
      break;
 800758a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007592:	699a      	ldr	r2, [r3, #24]
 8007594:	78fb      	ldrb	r3, [r7, #3]
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	2101      	movs	r1, #1
 800759c:	fa01 f303 	lsl.w	r3, r1, r3
 80075a0:	6939      	ldr	r1, [r7, #16]
 80075a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80075a6:	4313      	orrs	r3, r2
 80075a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80075b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da03      	bge.n	80075c6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80075be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075c2:	61bb      	str	r3, [r7, #24]
 80075c4:	e001      	b.n	80075ca <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff0f 	bl	80073ee <USB_GetHostSpeed>
 80075d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80075d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d106      	bne.n	80075e8 <USB_HC_Init+0x1a8>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d003      	beq.n	80075e8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80075e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80075e4:	617b      	str	r3, [r7, #20]
 80075e6:	e001      	b.n	80075ec <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80075e8:	2300      	movs	r3, #0
 80075ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075ec:	787b      	ldrb	r3, [r7, #1]
 80075ee:	059b      	lsls	r3, r3, #22
 80075f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075f4:	78bb      	ldrb	r3, [r7, #2]
 80075f6:	02db      	lsls	r3, r3, #11
 80075f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007602:	049b      	lsls	r3, r3, #18
 8007604:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007608:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800760a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800760c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007610:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007616:	78fb      	ldrb	r3, [r7, #3]
 8007618:	0159      	lsls	r1, r3, #5
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	440b      	add	r3, r1
 800761e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007622:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007628:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800762a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800762e:	2b03      	cmp	r3, #3
 8007630:	d10f      	bne.n	8007652 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8007632:	78fb      	ldrb	r3, [r7, #3]
 8007634:	015a      	lsls	r2, r3, #5
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4413      	add	r3, r2
 800763a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	78fa      	ldrb	r2, [r7, #3]
 8007642:	0151      	lsls	r1, r2, #5
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	440a      	add	r2, r1
 8007648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800764c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007650:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007652:	7ffb      	ldrb	r3, [r7, #31]
}
 8007654:	4618      	mov	r0, r3
 8007656:	3720      	adds	r7, #32
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08c      	sub	sp, #48	; 0x30
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	4613      	mov	r3, r2
 8007668:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	785b      	ldrb	r3, [r3, #1]
 8007672:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8007674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007678:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800767e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007682:	2b00      	cmp	r3, #0
 8007684:	d02d      	beq.n	80076e2 <USB_HC_StartXfer+0x86>
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	791b      	ldrb	r3, [r3, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d129      	bne.n	80076e2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d117      	bne.n	80076c4 <USB_HC_StartXfer+0x68>
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	79db      	ldrb	r3, [r3, #7]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <USB_HC_StartXfer+0x48>
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	79db      	ldrb	r3, [r3, #7]
 80076a0:	2b02      	cmp	r3, #2
 80076a2:	d10f      	bne.n	80076c4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	6a3b      	ldr	r3, [r7, #32]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80076be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076c2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80076c4:	79fb      	ldrb	r3, [r7, #7]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <USB_HC_StartXfer+0x86>
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	795b      	ldrb	r3, [r3, #5]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d107      	bne.n	80076e2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	4619      	mov	r1, r3
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	f000 fa2f 	bl	8007b3c <USB_DoPing>
      return HAL_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	e0f8      	b.n	80078d4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d018      	beq.n	800771c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	8912      	ldrh	r2, [r2, #8]
 80076f2:	4413      	add	r3, r2
 80076f4:	3b01      	subs	r3, #1
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	8912      	ldrh	r2, [r2, #8]
 80076fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80076fe:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8007700:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007702:	8b7b      	ldrh	r3, [r7, #26]
 8007704:	429a      	cmp	r2, r3
 8007706:	d90b      	bls.n	8007720 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8007708:	8b7b      	ldrh	r3, [r7, #26]
 800770a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800770c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	8912      	ldrh	r2, [r2, #8]
 8007712:	fb02 f203 	mul.w	r2, r2, r3
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	611a      	str	r2, [r3, #16]
 800771a:	e001      	b.n	8007720 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800771c:	2301      	movs	r3, #1
 800771e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	78db      	ldrb	r3, [r3, #3]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007728:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	8912      	ldrh	r2, [r2, #8]
 800772e:	fb02 f203 	mul.w	r2, r2, r3
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	611a      	str	r2, [r3, #16]
 8007736:	e003      	b.n	8007740 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	695a      	ldr	r2, [r3, #20]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007748:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800774a:	04d9      	lsls	r1, r3, #19
 800774c:	4b63      	ldr	r3, [pc, #396]	; (80078dc <USB_HC_StartXfer+0x280>)
 800774e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007750:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	7a9b      	ldrb	r3, [r3, #10]
 8007756:	075b      	lsls	r3, r3, #29
 8007758:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800775c:	69f9      	ldr	r1, [r7, #28]
 800775e:	0148      	lsls	r0, r1, #5
 8007760:	6a39      	ldr	r1, [r7, #32]
 8007762:	4401      	add	r1, r0
 8007764:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007768:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800776a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	68d9      	ldr	r1, [r3, #12]
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	015a      	lsls	r2, r3, #5
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	4413      	add	r3, r2
 800777e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007782:	460a      	mov	r2, r1
 8007784:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007786:	6a3b      	ldr	r3, [r7, #32]
 8007788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f003 0301 	and.w	r3, r3, #1
 8007792:	2b00      	cmp	r3, #0
 8007794:	bf0c      	ite	eq
 8007796:	2301      	moveq	r3, #1
 8007798:	2300      	movne	r3, #0
 800779a:	b2db      	uxtb	r3, r3
 800779c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	6a3b      	ldr	r3, [r7, #32]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	69fa      	ldr	r2, [r7, #28]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80077bc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80077be:	69fb      	ldr	r3, [r7, #28]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	7e7b      	ldrb	r3, [r7, #25]
 80077ce:	075b      	lsls	r3, r3, #29
 80077d0:	69f9      	ldr	r1, [r7, #28]
 80077d2:	0148      	lsls	r0, r1, #5
 80077d4:	6a39      	ldr	r1, [r7, #32]
 80077d6:	4401      	add	r1, r0
 80077d8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80077dc:	4313      	orrs	r3, r2
 80077de:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	015a      	lsls	r2, r3, #5
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	4413      	add	r3, r2
 80077e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	78db      	ldrb	r3, [r3, #3]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d004      	beq.n	800780a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007806:	613b      	str	r3, [r7, #16]
 8007808:	e003      	b.n	8007812 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007810:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007818:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	4413      	add	r3, r2
 8007822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007826:	461a      	mov	r2, r3
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800782c:	79fb      	ldrb	r3, [r7, #7]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	e04e      	b.n	80078d4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	78db      	ldrb	r3, [r3, #3]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d149      	bne.n	80078d2 <USB_HC_StartXfer+0x276>
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	695b      	ldr	r3, [r3, #20]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d045      	beq.n	80078d2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	79db      	ldrb	r3, [r3, #7]
 800784a:	2b03      	cmp	r3, #3
 800784c:	d830      	bhi.n	80078b0 <USB_HC_StartXfer+0x254>
 800784e:	a201      	add	r2, pc, #4	; (adr r2, 8007854 <USB_HC_StartXfer+0x1f8>)
 8007850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007854:	08007865 	.word	0x08007865
 8007858:	08007889 	.word	0x08007889
 800785c:	08007865 	.word	0x08007865
 8007860:	08007889 	.word	0x08007889
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	3303      	adds	r3, #3
 800786a:	089b      	lsrs	r3, r3, #2
 800786c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800786e:	8afa      	ldrh	r2, [r7, #22]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	b29b      	uxth	r3, r3
 8007876:	429a      	cmp	r2, r3
 8007878:	d91c      	bls.n	80078b4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f043 0220 	orr.w	r2, r3, #32
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	619a      	str	r2, [r3, #24]
        }
        break;
 8007886:	e015      	b.n	80078b4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	3303      	adds	r3, #3
 800788e:	089b      	lsrs	r3, r3, #2
 8007890:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007892:	8afa      	ldrh	r2, [r7, #22]
 8007894:	6a3b      	ldr	r3, [r7, #32]
 8007896:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	b29b      	uxth	r3, r3
 800789e:	429a      	cmp	r2, r3
 80078a0:	d90a      	bls.n	80078b8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	699b      	ldr	r3, [r3, #24]
 80078a6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	619a      	str	r2, [r3, #24]
        }
        break;
 80078ae:	e003      	b.n	80078b8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80078b0:	bf00      	nop
 80078b2:	e002      	b.n	80078ba <USB_HC_StartXfer+0x25e>
        break;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <USB_HC_StartXfer+0x25e>
        break;
 80078b8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	68d9      	ldr	r1, [r3, #12]
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	785a      	ldrb	r2, [r3, #1]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	2000      	movs	r0, #0
 80078ca:	9000      	str	r0, [sp, #0]
 80078cc:	68f8      	ldr	r0, [r7, #12]
 80078ce:	f7ff fb53 	bl	8006f78 <USB_WritePacket>
  }

  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3728      	adds	r7, #40	; 0x28
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}
 80078dc:	1ff80000 	.word	0x1ff80000

080078e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	b29b      	uxth	r3, r3
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3714      	adds	r7, #20
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr

08007902 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007902:	b480      	push	{r7}
 8007904:	b089      	sub	sp, #36	; 0x24
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
 800790a:	460b      	mov	r3, r1
 800790c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8007916:	2300      	movs	r3, #0
 8007918:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	0c9b      	lsrs	r3, r3, #18
 800792a:	f003 0303 	and.w	r3, r3, #3
 800792e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	4413      	add	r3, r2
 8007938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	0fdb      	lsrs	r3, r3, #31
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f003 0320 	and.w	r3, r3, #32
 800794e:	2b20      	cmp	r3, #32
 8007950:	d104      	bne.n	800795c <USB_HC_Halt+0x5a>
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d101      	bne.n	800795c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	e0e8      	b.n	8007b2e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d002      	beq.n	8007968 <USB_HC_Halt+0x66>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2b02      	cmp	r3, #2
 8007966:	d173      	bne.n	8007a50 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	4413      	add	r3, r2
 8007970:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	697a      	ldr	r2, [r7, #20]
 8007978:	0151      	lsls	r1, r2, #5
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	440a      	add	r2, r1
 800797e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007982:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007986:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f003 0320 	and.w	r3, r3, #32
 8007990:	2b00      	cmp	r3, #0
 8007992:	f040 80cb 	bne.w	8007b2c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d143      	bne.n	8007a2a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	015a      	lsls	r2, r3, #5
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	4413      	add	r3, r2
 80079aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	697a      	ldr	r2, [r7, #20]
 80079b2:	0151      	lsls	r1, r2, #5
 80079b4:	69ba      	ldr	r2, [r7, #24]
 80079b6:	440a      	add	r2, r1
 80079b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80079c0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	697a      	ldr	r2, [r7, #20]
 80079d2:	0151      	lsls	r1, r2, #5
 80079d4:	69ba      	ldr	r2, [r7, #24]
 80079d6:	440a      	add	r2, r1
 80079d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079e0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	015a      	lsls	r2, r3, #5
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	4413      	add	r3, r2
 80079ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	697a      	ldr	r2, [r7, #20]
 80079f2:	0151      	lsls	r1, r2, #5
 80079f4:	69ba      	ldr	r2, [r7, #24]
 80079f6:	440a      	add	r2, r1
 80079f8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80079fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a00:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	3301      	adds	r3, #1
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	69fb      	ldr	r3, [r7, #28]
 8007a0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a0e:	d81d      	bhi.n	8007a4c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a10:	697b      	ldr	r3, [r7, #20]
 8007a12:	015a      	lsls	r2, r3, #5
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	4413      	add	r3, r2
 8007a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a26:	d0ec      	beq.n	8007a02 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a28:	e080      	b.n	8007b2c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	015a      	lsls	r2, r3, #5
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	4413      	add	r3, r2
 8007a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	697a      	ldr	r2, [r7, #20]
 8007a3a:	0151      	lsls	r1, r2, #5
 8007a3c:	69ba      	ldr	r2, [r7, #24]
 8007a3e:	440a      	add	r2, r1
 8007a40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007a48:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a4a:	e06f      	b.n	8007b2c <USB_HC_Halt+0x22a>
            break;
 8007a4c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a4e:	e06d      	b.n	8007b2c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	015a      	lsls	r2, r3, #5
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	0151      	lsls	r1, r2, #5
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	440a      	add	r2, r1
 8007a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a6e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d143      	bne.n	8007b08 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	015a      	lsls	r2, r3, #5
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	4413      	add	r3, r2
 8007a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	697a      	ldr	r2, [r7, #20]
 8007a90:	0151      	lsls	r1, r2, #5
 8007a92:	69ba      	ldr	r2, [r7, #24]
 8007a94:	440a      	add	r2, r1
 8007a96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007a9a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007a9e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	015a      	lsls	r2, r3, #5
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	0151      	lsls	r1, r2, #5
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	440a      	add	r2, r1
 8007ab6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007abe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	697a      	ldr	r2, [r7, #20]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	69ba      	ldr	r2, [r7, #24]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007ada:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007ade:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	61fb      	str	r3, [r7, #28]
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aec:	d81d      	bhi.n	8007b2a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	015a      	lsls	r2, r3, #5
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	4413      	add	r3, r2
 8007af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b04:	d0ec      	beq.n	8007ae0 <USB_HC_Halt+0x1de>
 8007b06:	e011      	b.n	8007b2c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	697a      	ldr	r2, [r7, #20]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b26:	6013      	str	r3, [r2, #0]
 8007b28:	e000      	b.n	8007b2c <USB_HC_Halt+0x22a>
          break;
 8007b2a:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b2c:	2300      	movs	r3, #0
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3724      	adds	r7, #36	; 0x24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b38:	4770      	bx	lr
	...

08007b3c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	460b      	mov	r3, r1
 8007b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007b50:	2301      	movs	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	04da      	lsls	r2, r3, #19
 8007b58:	4b15      	ldr	r3, [pc, #84]	; (8007bb0 <USB_DoPing+0x74>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	697a      	ldr	r2, [r7, #20]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007b68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b6c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b84:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007b8c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	015a      	lsls	r2, r3, #5
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	4413      	add	r3, r2
 8007b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	371c      	adds	r7, #28
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	1ff80000 	.word	0x1ff80000

08007bb4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b086      	sub	sp, #24
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f7ff f935 	bl	8006e34 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8007bca:	2110      	movs	r1, #16
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff f98f 	bl	8006ef0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff f9b0 	bl	8006f38 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	613b      	str	r3, [r7, #16]
 8007bdc:	e01f      	b.n	8007c1e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007bf4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bfc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c04:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c12:	461a      	mov	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	613b      	str	r3, [r7, #16]
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	2b0f      	cmp	r3, #15
 8007c22:	d9dc      	bls.n	8007bde <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
 8007c28:	e034      	b.n	8007c94 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c40:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c48:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007c50:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	015a      	lsls	r2, r3, #5
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	4413      	add	r3, r2
 8007c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c5e:	461a      	mov	r2, r3
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	3301      	adds	r3, #1
 8007c68:	617b      	str	r3, [r7, #20]
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c70:	d80c      	bhi.n	8007c8c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c88:	d0ec      	beq.n	8007c64 <USB_StopHost+0xb0>
 8007c8a:	e000      	b.n	8007c8e <USB_StopHost+0xda>
        break;
 8007c8c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3301      	adds	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	2b0f      	cmp	r3, #15
 8007c98:	d9c7      	bls.n	8007c2a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007cae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7ff f8ae 	bl	8006e12 <USB_EnableGlobalInt>

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3718      	adds	r7, #24
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b089      	sub	sp, #36	; 0x24
 8007cc4:	af04      	add	r7, sp, #16
 8007cc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007cc8:	2301      	movs	r3, #1
 8007cca:	2202      	movs	r2, #2
 8007ccc:	2102      	movs	r1, #2
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fc66 	bl	80085a0 <USBH_FindInterface>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2bff      	cmp	r3, #255	; 0xff
 8007cdc:	d002      	beq.n	8007ce4 <USBH_CDC_InterfaceInit+0x24>
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d901      	bls.n	8007ce8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	e13d      	b.n	8007f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 fc3b 	bl	8008568 <USBH_SelectInterface>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e131      	b.n	8007f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007d06:	2050      	movs	r0, #80	; 0x50
 8007d08:	f002 fa00 	bl	800a10c <malloc>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d101      	bne.n	8007d24 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007d20:	2302      	movs	r3, #2
 8007d22:	e11f      	b.n	8007f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007d24:	2250      	movs	r2, #80	; 0x50
 8007d26:	2100      	movs	r1, #0
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f002 f9ff 	bl	800a12c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007d2e:	7bfb      	ldrb	r3, [r7, #15]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	211a      	movs	r1, #26
 8007d34:	fb01 f303 	mul.w	r3, r1, r3
 8007d38:	4413      	add	r3, r2
 8007d3a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d3e:	781b      	ldrb	r3, [r3, #0]
 8007d40:	b25b      	sxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da15      	bge.n	8007d72 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d46:	7bfb      	ldrb	r3, [r7, #15]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	211a      	movs	r1, #26
 8007d4c:	fb01 f303 	mul.w	r3, r1, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d5c:	7bfb      	ldrb	r3, [r7, #15]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	211a      	movs	r1, #26
 8007d62:	fb01 f303 	mul.w	r3, r1, r3
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d6c:	881a      	ldrh	r2, [r3, #0]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	785b      	ldrb	r3, [r3, #1]
 8007d76:	4619      	mov	r1, r3
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f001 fe32 	bl	80099e2 <USBH_AllocPipe>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	461a      	mov	r2, r3
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	7819      	ldrb	r1, [r3, #0]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	7858      	ldrb	r0, [r3, #1]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	8952      	ldrh	r2, [r2, #10]
 8007d9e:	9202      	str	r2, [sp, #8]
 8007da0:	2203      	movs	r2, #3
 8007da2:	9201      	str	r2, [sp, #4]
 8007da4:	9300      	str	r3, [sp, #0]
 8007da6:	4623      	mov	r3, r4
 8007da8:	4602      	mov	r2, r0
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fdea 	bl	8009984 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2200      	movs	r2, #0
 8007db6:	4619      	mov	r1, r3
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f002 f8f9 	bl	8009fb0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	210a      	movs	r1, #10
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 fbeb 	bl	80085a0 <USBH_FindInterface>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	2bff      	cmp	r3, #255	; 0xff
 8007dd2:	d002      	beq.n	8007dda <USBH_CDC_InterfaceInit+0x11a>
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d901      	bls.n	8007dde <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e0c2      	b.n	8007f64 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	211a      	movs	r1, #26
 8007de4:	fb01 f303 	mul.w	r3, r1, r3
 8007de8:	4413      	add	r3, r2
 8007dea:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007dee:	781b      	ldrb	r3, [r3, #0]
 8007df0:	b25b      	sxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	da16      	bge.n	8007e24 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	211a      	movs	r1, #26
 8007dfc:	fb01 f303 	mul.w	r3, r1, r3
 8007e00:	4413      	add	r3, r2
 8007e02:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e0c:	7bfb      	ldrb	r3, [r7, #15]
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	211a      	movs	r1, #26
 8007e12:	fb01 f303 	mul.w	r3, r1, r3
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e1c:	881a      	ldrh	r2, [r3, #0]
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	835a      	strh	r2, [r3, #26]
 8007e22:	e015      	b.n	8007e50 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007e24:	7bfb      	ldrb	r3, [r7, #15]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	211a      	movs	r1, #26
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007e3a:	7bfb      	ldrb	r3, [r7, #15]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	211a      	movs	r1, #26
 8007e40:	fb01 f303 	mul.w	r3, r1, r3
 8007e44:	4413      	add	r3, r2
 8007e46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	211a      	movs	r1, #26
 8007e56:	fb01 f303 	mul.w	r3, r1, r3
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	b25b      	sxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da16      	bge.n	8007e96 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	211a      	movs	r1, #26
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007e78:	781a      	ldrb	r2, [r3, #0]
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	211a      	movs	r1, #26
 8007e84:	fb01 f303 	mul.w	r3, r1, r3
 8007e88:	4413      	add	r3, r2
 8007e8a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007e8e:	881a      	ldrh	r2, [r3, #0]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	835a      	strh	r2, [r3, #26]
 8007e94:	e015      	b.n	8007ec2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	211a      	movs	r1, #26
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007ea6:	781a      	ldrb	r2, [r3, #0]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007eac:	7bfb      	ldrb	r3, [r7, #15]
 8007eae:	687a      	ldr	r2, [r7, #4]
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007ebc:	881a      	ldrh	r2, [r3, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	7b9b      	ldrb	r3, [r3, #14]
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fd8a 	bl	80099e2 <USBH_AllocPipe>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	7bdb      	ldrb	r3, [r3, #15]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f001 fd80 	bl	80099e2 <USBH_AllocPipe>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	7b59      	ldrb	r1, [r3, #13]
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	7b98      	ldrb	r0, [r3, #14]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007efe:	68ba      	ldr	r2, [r7, #8]
 8007f00:	8b12      	ldrh	r2, [r2, #24]
 8007f02:	9202      	str	r2, [sp, #8]
 8007f04:	2202      	movs	r2, #2
 8007f06:	9201      	str	r2, [sp, #4]
 8007f08:	9300      	str	r3, [sp, #0]
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fd38 	bl	8009984 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	7b19      	ldrb	r1, [r3, #12]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	7bd8      	ldrb	r0, [r3, #15]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007f28:	68ba      	ldr	r2, [r7, #8]
 8007f2a:	8b52      	ldrh	r2, [r2, #26]
 8007f2c:	9202      	str	r2, [sp, #8]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	9201      	str	r2, [sp, #4]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	4623      	mov	r3, r4
 8007f36:	4602      	mov	r2, r0
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fd23 	bl	8009984 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	7b5b      	ldrb	r3, [r3, #13]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f002 f82e 	bl	8009fb0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	7b1b      	ldrb	r3, [r3, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f002 f827 	bl	8009fb0 <USBH_LL_SetToggle>

  return USBH_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3714      	adds	r7, #20
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd90      	pop	{r4, r7, pc}

08007f6c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f7a:	69db      	ldr	r3, [r3, #28]
 8007f7c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	781b      	ldrb	r3, [r3, #0]
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 fd18 	bl	80099c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 fd43 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	7b1b      	ldrb	r3, [r3, #12]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00e      	beq.n	8007fca <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	7b1b      	ldrb	r3, [r3, #12]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f001 fd05 	bl	80099c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	7b1b      	ldrb	r3, [r3, #12]
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f001 fd30 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	7b5b      	ldrb	r3, [r3, #13]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00e      	beq.n	8007ff0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	7b5b      	ldrb	r3, [r3, #13]
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f001 fcf2 	bl	80099c2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	7b5b      	ldrb	r3, [r3, #13]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fd1d 	bl	8009a24 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2200      	movs	r2, #0
 8007fee:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ff6:	69db      	ldr	r3, [r3, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00b      	beq.n	8008014 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008002:	69db      	ldr	r3, [r3, #28]
 8008004:	4618      	mov	r0, r3
 8008006:	f002 f889 	bl	800a11c <free>
    phost->pActiveClass->pData = 0U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008010:	2200      	movs	r2, #0
 8008012:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800802c:	69db      	ldr	r3, [r3, #28]
 800802e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	3340      	adds	r3, #64	; 0x40
 8008034:	4619      	mov	r1, r3
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8b1 	bl	800819e <GetLineCoding>
 800803c:	4603      	mov	r3, r0
 800803e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008040:	7afb      	ldrb	r3, [r7, #11]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d105      	bne.n	8008052 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800804c:	2102      	movs	r1, #2
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008052:	7afb      	ldrb	r3, [r7, #11]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008064:	2301      	movs	r3, #1
 8008066:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800807c:	2b04      	cmp	r3, #4
 800807e:	d877      	bhi.n	8008170 <USBH_CDC_Process+0x114>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBH_CDC_Process+0x2c>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	0800809d 	.word	0x0800809d
 800808c:	080080a3 	.word	0x080080a3
 8008090:	080080d3 	.word	0x080080d3
 8008094:	08008147 	.word	0x08008147
 8008098:	08008155 	.word	0x08008155
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e06d      	b.n	800817e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080a6:	4619      	mov	r1, r3
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f000 f897 	bl	80081dc <SetLineCoding>
 80080ae:	4603      	mov	r3, r0
 80080b0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d104      	bne.n	80080c2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2202      	movs	r2, #2
 80080bc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80080c0:	e058      	b.n	8008174 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80080c2:	7bbb      	ldrb	r3, [r7, #14]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d055      	beq.n	8008174 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	2204      	movs	r2, #4
 80080cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80080d0:	e050      	b.n	8008174 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	3340      	adds	r3, #64	; 0x40
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f860 	bl	800819e <GetLineCoding>
 80080de:	4603      	mov	r3, r0
 80080e0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80080e2:	7bbb      	ldrb	r3, [r7, #14]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d126      	bne.n	8008136 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d13b      	bne.n	8008178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008106:	68bb      	ldr	r3, [r7, #8]
 8008108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800810c:	429a      	cmp	r2, r3
 800810e:	d133      	bne.n	8008178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800811a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800811c:	429a      	cmp	r2, r3
 800811e:	d12b      	bne.n	8008178 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008128:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800812a:	429a      	cmp	r2, r3
 800812c:	d124      	bne.n	8008178 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f958 	bl	80083e4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008134:	e020      	b.n	8008178 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008136:	7bbb      	ldrb	r3, [r7, #14]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d01d      	beq.n	8008178 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2204      	movs	r2, #4
 8008140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008144:	e018      	b.n	8008178 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f867 	bl	800821a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f8da 	bl	8008306 <CDC_ProcessReception>
      break;
 8008152:	e014      	b.n	800817e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008154:	2100      	movs	r1, #0
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 ffe3 	bl	8009122 <USBH_ClrFeature>
 800815c:	4603      	mov	r3, r0
 800815e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008160:	7bbb      	ldrb	r3, [r7, #14]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2200      	movs	r2, #0
 800816a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800816e:	e005      	b.n	800817c <USBH_CDC_Process+0x120>

    default:
      break;
 8008170:	bf00      	nop
 8008172:	e004      	b.n	800817e <USBH_CDC_Process+0x122>
      break;
 8008174:	bf00      	nop
 8008176:	e002      	b.n	800817e <USBH_CDC_Process+0x122>
      break;
 8008178:	bf00      	nop
 800817a:	e000      	b.n	800817e <USBH_CDC_Process+0x122>
      break;
 800817c:	bf00      	nop

  }

  return status;
 800817e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	370c      	adds	r7, #12
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
 80081a6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	22a1      	movs	r2, #161	; 0xa1
 80081ac:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2221      	movs	r2, #33	; 0x21
 80081b2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2207      	movs	r2, #7
 80081c4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	2207      	movs	r2, #7
 80081ca:	4619      	mov	r1, r3
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f001 f988 	bl	80094e2 <USBH_CtlReq>
 80081d2:	4603      	mov	r3, r0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2221      	movs	r2, #33	; 0x21
 80081ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2207      	movs	r2, #7
 8008202:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	2207      	movs	r2, #7
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 f969 	bl	80094e2 <USBH_CtlReq>
 8008210:	4603      	mov	r3, r0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b086      	sub	sp, #24
 800821e:	af02      	add	r7, sp, #8
 8008220:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008228:	69db      	ldr	r3, [r3, #28]
 800822a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800822c:	2300      	movs	r3, #0
 800822e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8008236:	2b01      	cmp	r3, #1
 8008238:	d002      	beq.n	8008240 <CDC_ProcessTransmission+0x26>
 800823a:	2b02      	cmp	r3, #2
 800823c:	d023      	beq.n	8008286 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800823e:	e05e      	b.n	80082fe <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	8b12      	ldrh	r2, [r2, #24]
 8008248:	4293      	cmp	r3, r2
 800824a:	d90b      	bls.n	8008264 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	69d9      	ldr	r1, [r3, #28]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	8b1a      	ldrh	r2, [r3, #24]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	7b5b      	ldrb	r3, [r3, #13]
 8008258:	2001      	movs	r0, #1
 800825a:	9000      	str	r0, [sp, #0]
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 fb4e 	bl	80098fe <USBH_BulkSendData>
 8008262:	e00b      	b.n	800827c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800826c:	b29a      	uxth	r2, r3
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	7b5b      	ldrb	r3, [r3, #13]
 8008272:	2001      	movs	r0, #1
 8008274:	9000      	str	r0, [sp, #0]
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fb41 	bl	80098fe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2202      	movs	r2, #2
 8008280:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8008284:	e03b      	b.n	80082fe <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	7b5b      	ldrb	r3, [r3, #13]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 fe65 	bl	8009f5c <USBH_LL_GetURBState>
 8008292:	4603      	mov	r3, r0
 8008294:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008296:	7afb      	ldrb	r3, [r7, #11]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d128      	bne.n	80082ee <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	8b12      	ldrh	r2, [r2, #24]
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d90e      	bls.n	80082c6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	8b12      	ldrh	r2, [r2, #24]
 80082b0:	1a9a      	subs	r2, r3, r2
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	69db      	ldr	r3, [r3, #28]
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	8b12      	ldrh	r2, [r2, #24]
 80082be:	441a      	add	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	61da      	str	r2, [r3, #28]
 80082c4:	e002      	b.n	80082cc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2200      	movs	r2, #0
 80082ca:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d004      	beq.n	80082de <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082dc:	e00e      	b.n	80082fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 f868 	bl	80083bc <USBH_CDC_TransmitCallback>
      break;
 80082ec:	e006      	b.n	80082fc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80082ee:	7afb      	ldrb	r3, [r7, #11]
 80082f0:	2b02      	cmp	r3, #2
 80082f2:	d103      	bne.n	80082fc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80082fc:	bf00      	nop
  }
}
 80082fe:	bf00      	nop
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}

08008306 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008306:	b580      	push	{r7, lr}
 8008308:	b086      	sub	sp, #24
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008314:	69db      	ldr	r3, [r3, #28]
 8008316:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008318:	2300      	movs	r3, #0
 800831a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8008322:	2b03      	cmp	r3, #3
 8008324:	d002      	beq.n	800832c <CDC_ProcessReception+0x26>
 8008326:	2b04      	cmp	r3, #4
 8008328:	d00e      	beq.n	8008348 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800832a:	e043      	b.n	80083b4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	6a19      	ldr	r1, [r3, #32]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	8b5a      	ldrh	r2, [r3, #26]
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	7b1b      	ldrb	r3, [r3, #12]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f001 fb05 	bl	8009948 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	2204      	movs	r2, #4
 8008342:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8008346:	e035      	b.n	80083b4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	7b1b      	ldrb	r3, [r3, #12]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 fe04 	bl	8009f5c <USBH_LL_GetURBState>
 8008354:	4603      	mov	r3, r0
 8008356:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008358:	7cfb      	ldrb	r3, [r7, #19]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d129      	bne.n	80083b2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	7b1b      	ldrb	r3, [r3, #12]
 8008362:	4619      	mov	r1, r3
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f001 fd67 	bl	8009e38 <USBH_LL_GetLastXferSize>
 800836a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008370:	68fa      	ldr	r2, [r7, #12]
 8008372:	429a      	cmp	r2, r3
 8008374:	d016      	beq.n	80083a4 <CDC_ProcessReception+0x9e>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	8b5b      	ldrh	r3, [r3, #26]
 800837a:	461a      	mov	r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4293      	cmp	r3, r2
 8008380:	d910      	bls.n	80083a4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	1ad2      	subs	r2, r2, r3
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	6a1a      	ldr	r2, [r3, #32]
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	441a      	add	r2, r3
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2203      	movs	r2, #3
 800839e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80083a2:	e006      	b.n	80083b2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2200      	movs	r2, #0
 80083a8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 f80f 	bl	80083d0 <USBH_CDC_ReceiveCallback>
      break;
 80083b2:	bf00      	nop
  }
}
 80083b4:	bf00      	nop
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4613      	mov	r3, r2
 8008404:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d101      	bne.n	8008410 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800840c:	2302      	movs	r3, #2
 800840e:	e029      	b.n	8008464 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	79fa      	ldrb	r2, [r7, #7]
 8008414:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f000 f81f 	bl	800846c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d003      	beq.n	800845c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 fc37 	bl	8009cd0 <USBH_LL_Init>

  return USBH_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3710      	adds	r7, #16
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008474:	2300      	movs	r3, #0
 8008476:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008478:	2300      	movs	r3, #0
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	e009      	b.n	8008492 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	33e0      	adds	r3, #224	; 0xe0
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	2200      	movs	r2, #0
 800848a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	3301      	adds	r3, #1
 8008490:	60fb      	str	r3, [r7, #12]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b0e      	cmp	r3, #14
 8008496:	d9f2      	bls.n	800847e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008498:	2300      	movs	r3, #0
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e009      	b.n	80084b2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80084a8:	2200      	movs	r2, #0
 80084aa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3301      	adds	r3, #1
 80084b0:	60fb      	str	r3, [r7, #12]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084b8:	d3f1      	bcc.n	800849e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2200      	movs	r2, #0
 80084c4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2201      	movs	r2, #1
 80084ca:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	2240      	movs	r2, #64	; 0x40
 80084de:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2200      	movs	r2, #0
 80084e4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2201      	movs	r2, #1
 80084f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3714      	adds	r7, #20
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d016      	beq.n	8008556 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10e      	bne.n	8008550 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008538:	1c59      	adds	r1, r3, #1
 800853a:	687a      	ldr	r2, [r7, #4]
 800853c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	33de      	adds	r3, #222	; 0xde
 8008544:	6839      	ldr	r1, [r7, #0]
 8008546:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800854a:	2300      	movs	r3, #0
 800854c:	73fb      	strb	r3, [r7, #15]
 800854e:	e004      	b.n	800855a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008550:	2302      	movs	r3, #2
 8008552:	73fb      	strb	r3, [r7, #15]
 8008554:	e001      	b.n	800855a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008556:	2302      	movs	r3, #2
 8008558:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800855a:	7bfb      	ldrb	r3, [r7, #15]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3714      	adds	r7, #20
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	460b      	mov	r3, r1
 8008572:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008574:	2300      	movs	r3, #0
 8008576:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	429a      	cmp	r2, r3
 8008582:	d204      	bcs.n	800858e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	78fa      	ldrb	r2, [r7, #3]
 8008588:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800858c:	e001      	b.n	8008592 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800858e:	2302      	movs	r3, #2
 8008590:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008592:	7bfb      	ldrb	r3, [r7, #15]
}
 8008594:	4618      	mov	r0, r3
 8008596:	3714      	adds	r7, #20
 8008598:	46bd      	mov	sp, r7
 800859a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859e:	4770      	bx	lr

080085a0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b087      	sub	sp, #28
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	4608      	mov	r0, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	4603      	mov	r3, r0
 80085b0:	70fb      	strb	r3, [r7, #3]
 80085b2:	460b      	mov	r3, r1
 80085b4:	70bb      	strb	r3, [r7, #2]
 80085b6:	4613      	mov	r3, r2
 80085b8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80085be:	2300      	movs	r3, #0
 80085c0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80085c8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80085ca:	e025      	b.n	8008618 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80085cc:	7dfb      	ldrb	r3, [r7, #23]
 80085ce:	221a      	movs	r2, #26
 80085d0:	fb02 f303 	mul.w	r3, r2, r3
 80085d4:	3308      	adds	r3, #8
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	4413      	add	r3, r2
 80085da:	3302      	adds	r3, #2
 80085dc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	795b      	ldrb	r3, [r3, #5]
 80085e2:	78fa      	ldrb	r2, [r7, #3]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d002      	beq.n	80085ee <USBH_FindInterface+0x4e>
 80085e8:	78fb      	ldrb	r3, [r7, #3]
 80085ea:	2bff      	cmp	r3, #255	; 0xff
 80085ec:	d111      	bne.n	8008612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80085f2:	78ba      	ldrb	r2, [r7, #2]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d002      	beq.n	80085fe <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80085f8:	78bb      	ldrb	r3, [r7, #2]
 80085fa:	2bff      	cmp	r3, #255	; 0xff
 80085fc:	d109      	bne.n	8008612 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008602:	787a      	ldrb	r2, [r7, #1]
 8008604:	429a      	cmp	r2, r3
 8008606:	d002      	beq.n	800860e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008608:	787b      	ldrb	r3, [r7, #1]
 800860a:	2bff      	cmp	r3, #255	; 0xff
 800860c:	d101      	bne.n	8008612 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800860e:	7dfb      	ldrb	r3, [r7, #23]
 8008610:	e006      	b.n	8008620 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008612:	7dfb      	ldrb	r3, [r7, #23]
 8008614:	3301      	adds	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008618:	7dfb      	ldrb	r3, [r7, #23]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d9d6      	bls.n	80085cc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800861e:	23ff      	movs	r3, #255	; 0xff
}
 8008620:	4618      	mov	r0, r3
 8008622:	371c      	adds	r7, #28
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f001 fb87 	bl	8009d48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800863a:	2101      	movs	r1, #1
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fca0 	bl	8009f82 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008642:	2300      	movs	r3, #0
}
 8008644:	4618      	mov	r0, r3
 8008646:	3708      	adds	r7, #8
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af04      	add	r7, sp, #16
 8008652:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008654:	2302      	movs	r3, #2
 8008656:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	d102      	bne.n	800866e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2203      	movs	r2, #3
 800866c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	b2db      	uxtb	r3, r3
 8008674:	2b0b      	cmp	r3, #11
 8008676:	f200 81b3 	bhi.w	80089e0 <USBH_Process+0x394>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <USBH_Process+0x34>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	080086b1 	.word	0x080086b1
 8008684:	080086e3 	.word	0x080086e3
 8008688:	0800874b 	.word	0x0800874b
 800868c:	0800897b 	.word	0x0800897b
 8008690:	080089e1 	.word	0x080089e1
 8008694:	080087ef 	.word	0x080087ef
 8008698:	08008921 	.word	0x08008921
 800869c:	08008825 	.word	0x08008825
 80086a0:	08008845 	.word	0x08008845
 80086a4:	08008865 	.word	0x08008865
 80086a8:	08008893 	.word	0x08008893
 80086ac:	08008963 	.word	0x08008963
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f000 8193 	beq.w	80089e4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80086c4:	20c8      	movs	r0, #200	; 0xc8
 80086c6:	f001 fca3 	bl	800a010 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f001 fb99 	bl	8009e02 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80086e0:	e180      	b.n	80089e4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d107      	bne.n	80086fc <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2202      	movs	r2, #2
 80086f8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80086fa:	e182      	b.n	8008a02 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008706:	d914      	bls.n	8008732 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800870e:	3301      	adds	r3, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800871e:	2b03      	cmp	r3, #3
 8008720:	d903      	bls.n	800872a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	220d      	movs	r2, #13
 8008726:	701a      	strb	r2, [r3, #0]
      break;
 8008728:	e16b      	b.n	8008a02 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	701a      	strb	r2, [r3, #0]
      break;
 8008730:	e167      	b.n	8008a02 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8008738:	f103 020a 	add.w	r2, r3, #10
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8008742:	200a      	movs	r0, #10
 8008744:	f001 fc64 	bl	800a010 <USBH_Delay>
      break;
 8008748:	e15b      	b.n	8008a02 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800875a:	2104      	movs	r1, #4
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008760:	2064      	movs	r0, #100	; 0x64
 8008762:	f001 fc55 	bl	800a010 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fb24 	bl	8009db4 <USBH_LL_GetSpeed>
 800876c:	4603      	mov	r3, r0
 800876e:	461a      	mov	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2205      	movs	r2, #5
 800877a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800877c:	2100      	movs	r1, #0
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f001 f92f 	bl	80099e2 <USBH_AllocPipe>
 8008784:	4603      	mov	r3, r0
 8008786:	461a      	mov	r2, r3
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800878c:	2180      	movs	r1, #128	; 0x80
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 f927 	bl	80099e2 <USBH_AllocPipe>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	7919      	ldrb	r1, [r3, #4]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80087b0:	b292      	uxth	r2, r2
 80087b2:	9202      	str	r2, [sp, #8]
 80087b4:	2200      	movs	r2, #0
 80087b6:	9201      	str	r2, [sp, #4]
 80087b8:	9300      	str	r3, [sp, #0]
 80087ba:	4603      	mov	r3, r0
 80087bc:	2280      	movs	r2, #128	; 0x80
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 f8e0 	bl	8009984 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	7959      	ldrb	r1, [r3, #5]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80087d8:	b292      	uxth	r2, r2
 80087da:	9202      	str	r2, [sp, #8]
 80087dc:	2200      	movs	r2, #0
 80087de:	9201      	str	r2, [sp, #4]
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	4603      	mov	r3, r0
 80087e4:	2200      	movs	r2, #0
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f001 f8cc 	bl	8009984 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80087ec:	e109      	b.n	8008a02 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f90c 	bl	8008a0c <USBH_HandleEnum>
 80087f4:	4603      	mov	r3, r0
 80087f6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80087f8:	7bbb      	ldrb	r3, [r7, #14]
 80087fa:	b2db      	uxtb	r3, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f040 80f3 	bne.w	80089e8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8008810:	2b01      	cmp	r3, #1
 8008812:	d103      	bne.n	800881c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2208      	movs	r2, #8
 8008818:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800881a:	e0e5      	b.n	80089e8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2207      	movs	r2, #7
 8008820:	701a      	strb	r2, [r3, #0]
      break;
 8008822:	e0e1      	b.n	80089e8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80de 	beq.w	80089ec <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008836:	2101      	movs	r1, #1
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2208      	movs	r2, #8
 8008840:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8008842:	e0d3      	b.n	80089ec <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800884a:	b29b      	uxth	r3, r3
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fc20 	bl	8009094 <USBH_SetCfg>
 8008854:	4603      	mov	r3, r0
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 80ca 	bne.w	80089f0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2209      	movs	r2, #9
 8008860:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008862:	e0c5      	b.n	80089f0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800886a:	f003 0320 	and.w	r3, r3, #32
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8008872:	2101      	movs	r1, #1
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fc30 	bl	80090da <USBH_SetFeature>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	f040 80b9 	bne.w	80089f4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	220a      	movs	r2, #10
 8008886:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008888:	e0b4      	b.n	80089f4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	220a      	movs	r2, #10
 800888e:	701a      	strb	r2, [r3, #0]
      break;
 8008890:	e0b0      	b.n	80089f4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8008898:	2b00      	cmp	r3, #0
 800889a:	f000 80ad 	beq.w	80089f8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088a6:	2300      	movs	r3, #0
 80088a8:	73fb      	strb	r3, [r7, #15]
 80088aa:	e016      	b.n	80088da <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80088ac:	7bfa      	ldrb	r2, [r7, #15]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	32de      	adds	r2, #222	; 0xde
 80088b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088b6:	791a      	ldrb	r2, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80088be:	429a      	cmp	r2, r3
 80088c0:	d108      	bne.n	80088d4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80088c2:	7bfa      	ldrb	r2, [r7, #15]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	32de      	adds	r2, #222	; 0xde
 80088c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80088d2:	e005      	b.n	80088e0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
 80088d6:	3301      	adds	r3, #1
 80088d8:	73fb      	strb	r3, [r7, #15]
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0e5      	beq.n	80088ac <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d016      	beq.n	8008918 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	4798      	blx	r3
 80088f6:	4603      	mov	r3, r0
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d109      	bne.n	8008910 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2206      	movs	r2, #6
 8008900:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008908:	2103      	movs	r1, #3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800890e:	e073      	b.n	80089f8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	220d      	movs	r2, #13
 8008914:	701a      	strb	r2, [r3, #0]
      break;
 8008916:	e06f      	b.n	80089f8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	220d      	movs	r2, #13
 800891c:	701a      	strb	r2, [r3, #0]
      break;
 800891e:	e06b      	b.n	80089f8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008926:	2b00      	cmp	r3, #0
 8008928:	d017      	beq.n	800895a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	4798      	blx	r3
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	2b00      	cmp	r3, #0
 8008940:	d103      	bne.n	800894a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	220b      	movs	r2, #11
 8008946:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8008948:	e058      	b.n	80089fc <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d154      	bne.n	80089fc <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	220d      	movs	r2, #13
 8008956:	701a      	strb	r2, [r3, #0]
      break;
 8008958:	e050      	b.n	80089fc <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	220d      	movs	r2, #13
 800895e:	701a      	strb	r2, [r3, #0]
      break;
 8008960:	e04c      	b.n	80089fc <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d049      	beq.n	8008a00 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008972:	695b      	ldr	r3, [r3, #20]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	4798      	blx	r3
      }
      break;
 8008978:	e042      	b.n	8008a00 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f7ff fd72 	bl	800846c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800898e:	2b00      	cmp	r3, #0
 8008990:	d009      	beq.n	80089a6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008998:	68db      	ldr	r3, [r3, #12]
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80089b6:	2105      	movs	r1, #5
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80089c2:	b2db      	uxtb	r3, r3
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d107      	bne.n	80089d8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7ff fe2b 	bl	800862c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80089d6:	e014      	b.n	8008a02 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f001 f9b5 	bl	8009d48 <USBH_LL_Start>
      break;
 80089de:	e010      	b.n	8008a02 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80089e0:	bf00      	nop
 80089e2:	e00e      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089e4:	bf00      	nop
 80089e6:	e00c      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089e8:	bf00      	nop
 80089ea:	e00a      	b.n	8008a02 <USBH_Process+0x3b6>
    break;
 80089ec:	bf00      	nop
 80089ee:	e008      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089f0:	bf00      	nop
 80089f2:	e006      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089f4:	bf00      	nop
 80089f6:	e004      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089f8:	bf00      	nop
 80089fa:	e002      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 80089fc:	bf00      	nop
 80089fe:	e000      	b.n	8008a02 <USBH_Process+0x3b6>
      break;
 8008a00:	bf00      	nop
  }
  return USBH_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3710      	adds	r7, #16
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}

08008a0c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af04      	add	r7, sp, #16
 8008a12:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a14:	2301      	movs	r3, #1
 8008a16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b07      	cmp	r3, #7
 8008a22:	f200 81c1 	bhi.w	8008da8 <USBH_HandleEnum+0x39c>
 8008a26:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <USBH_HandleEnum+0x20>)
 8008a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2c:	08008a4d 	.word	0x08008a4d
 8008a30:	08008b0b 	.word	0x08008b0b
 8008a34:	08008b75 	.word	0x08008b75
 8008a38:	08008c03 	.word	0x08008c03
 8008a3c:	08008c6d 	.word	0x08008c6d
 8008a40:	08008cdd 	.word	0x08008cdd
 8008a44:	08008d23 	.word	0x08008d23
 8008a48:	08008d69 	.word	0x08008d69
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008a4c:	2108      	movs	r1, #8
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fa50 	bl	8008ef4 <USBH_Get_DevDesc>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008a58:	7bbb      	ldrb	r3, [r7, #14]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d130      	bne.n	8008ac0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	7919      	ldrb	r1, [r3, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008a82:	b292      	uxth	r2, r2
 8008a84:	9202      	str	r2, [sp, #8]
 8008a86:	2200      	movs	r2, #0
 8008a88:	9201      	str	r2, [sp, #4]
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	2280      	movs	r2, #128	; 0x80
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 ff77 	bl	8009984 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	7959      	ldrb	r1, [r3, #5]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008aaa:	b292      	uxth	r2, r2
 8008aac:	9202      	str	r2, [sp, #8]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	9201      	str	r2, [sp, #4]
 8008ab2:	9300      	str	r3, [sp, #0]
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 ff63 	bl	8009984 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008abe:	e175      	b.n	8008dac <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ac0:	7bbb      	ldrb	r3, [r7, #14]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	f040 8172 	bne.w	8008dac <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ace:	3301      	adds	r3, #1
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008ade:	2b03      	cmp	r3, #3
 8008ae0:	d903      	bls.n	8008aea <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	220d      	movs	r2, #13
 8008ae6:	701a      	strb	r2, [r3, #0]
      break;
 8008ae8:	e160      	b.n	8008dac <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	795b      	ldrb	r3, [r3, #5]
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 ff97 	bl	8009a24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	791b      	ldrb	r3, [r3, #4]
 8008afa:	4619      	mov	r1, r3
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 ff91 	bl	8009a24 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	701a      	strb	r2, [r3, #0]
      break;
 8008b08:	e150      	b.n	8008dac <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008b0a:	2112      	movs	r1, #18
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f9f1 	bl	8008ef4 <USBH_Get_DevDesc>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d103      	bne.n	8008b24 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008b22:	e145      	b.n	8008db0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008b24:	7bbb      	ldrb	r3, [r7, #14]
 8008b26:	2b03      	cmp	r3, #3
 8008b28:	f040 8142 	bne.w	8008db0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b32:	3301      	adds	r3, #1
 8008b34:	b2da      	uxtb	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008b42:	2b03      	cmp	r3, #3
 8008b44:	d903      	bls.n	8008b4e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	220d      	movs	r2, #13
 8008b4a:	701a      	strb	r2, [r3, #0]
      break;
 8008b4c:	e130      	b.n	8008db0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	795b      	ldrb	r3, [r3, #5]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 ff65 	bl	8009a24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	791b      	ldrb	r3, [r3, #4]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 ff5f 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	701a      	strb	r2, [r3, #0]
      break;
 8008b72:	e11d      	b.n	8008db0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008b74:	2101      	movs	r1, #1
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fa68 	bl	800904c <USBH_SetAddress>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d132      	bne.n	8008bec <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8008b86:	2002      	movs	r0, #2
 8008b88:	f001 fa42 	bl	800a010 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2203      	movs	r2, #3
 8008b98:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7919      	ldrb	r1, [r3, #4]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008baa:	687a      	ldr	r2, [r7, #4]
 8008bac:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008bae:	b292      	uxth	r2, r2
 8008bb0:	9202      	str	r2, [sp, #8]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	9201      	str	r2, [sp, #4]
 8008bb6:	9300      	str	r3, [sp, #0]
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2280      	movs	r2, #128	; 0x80
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fee1 	bl	8009984 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7959      	ldrb	r1, [r3, #5]
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008bd6:	b292      	uxth	r2, r2
 8008bd8:	9202      	str	r2, [sp, #8]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	9201      	str	r2, [sp, #4]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4603      	mov	r3, r0
 8008be2:	2200      	movs	r2, #0
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fecd 	bl	8009984 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008bea:	e0e3      	b.n	8008db4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008bec:	7bbb      	ldrb	r3, [r7, #14]
 8008bee:	2b03      	cmp	r3, #3
 8008bf0:	f040 80e0 	bne.w	8008db4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	220d      	movs	r2, #13
 8008bf8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	705a      	strb	r2, [r3, #1]
      break;
 8008c00:	e0d8      	b.n	8008db4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008c02:	2109      	movs	r1, #9
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 f99d 	bl	8008f44 <USBH_Get_CfgDesc>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c0e:	7bbb      	ldrb	r3, [r7, #14]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2204      	movs	r2, #4
 8008c18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c1a:	e0cd      	b.n	8008db8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	f040 80ca 	bne.w	8008db8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	b2da      	uxtb	r2, r3
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d903      	bls.n	8008c46 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	220d      	movs	r2, #13
 8008c42:	701a      	strb	r2, [r3, #0]
      break;
 8008c44:	e0b8      	b.n	8008db8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	795b      	ldrb	r3, [r3, #5]
 8008c4a:	4619      	mov	r1, r3
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fee9 	bl	8009a24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	791b      	ldrb	r3, [r3, #4]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fee3 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	701a      	strb	r2, [r3, #0]
      break;
 8008c6a:	e0a5      	b.n	8008db8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8008c72:	4619      	mov	r1, r3
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 f965 	bl	8008f44 <USBH_Get_CfgDesc>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c7e:	7bbb      	ldrb	r3, [r7, #14]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2205      	movs	r2, #5
 8008c88:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008c8a:	e097      	b.n	8008dbc <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	2b03      	cmp	r3, #3
 8008c90:	f040 8094 	bne.w	8008dbc <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	b2da      	uxtb	r2, r3
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d903      	bls.n	8008cb6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	220d      	movs	r2, #13
 8008cb2:	701a      	strb	r2, [r3, #0]
      break;
 8008cb4:	e082      	b.n	8008dbc <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	795b      	ldrb	r3, [r3, #5]
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 feb1 	bl	8009a24 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 feab 	bl	8009a24 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
      break;
 8008cda:	e06f      	b.n	8008dbc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d019      	beq.n	8008d1a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008cf2:	23ff      	movs	r3, #255	; 0xff
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f949 	bl	8008f8c <USBH_Get_StringDesc>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2206      	movs	r2, #6
 8008d08:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d0a:	e059      	b.n	8008dc0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d156      	bne.n	8008dc0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2206      	movs	r2, #6
 8008d16:	705a      	strb	r2, [r3, #1]
      break;
 8008d18:	e052      	b.n	8008dc0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2206      	movs	r2, #6
 8008d1e:	705a      	strb	r2, [r3, #1]
      break;
 8008d20:	e04e      	b.n	8008dc0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d019      	beq.n	8008d60 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008d38:	23ff      	movs	r3, #255	; 0xff
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f926 	bl	8008f8c <USBH_Get_StringDesc>
 8008d40:	4603      	mov	r3, r0
 8008d42:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d103      	bne.n	8008d52 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2207      	movs	r2, #7
 8008d4e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8008d50:	e038      	b.n	8008dc4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	d135      	bne.n	8008dc4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2207      	movs	r2, #7
 8008d5c:	705a      	strb	r2, [r3, #1]
      break;
 8008d5e:	e031      	b.n	8008dc4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2207      	movs	r2, #7
 8008d64:	705a      	strb	r2, [r3, #1]
      break;
 8008d66:	e02d      	b.n	8008dc4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d017      	beq.n	8008da2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008d7e:	23ff      	movs	r3, #255	; 0xff
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f903 	bl	8008f8c <USBH_Get_StringDesc>
 8008d86:	4603      	mov	r3, r0
 8008d88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008d8a:	7bbb      	ldrb	r3, [r7, #14]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d102      	bne.n	8008d96 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008d94:	e018      	b.n	8008dc8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d115      	bne.n	8008dc8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	e012      	b.n	8008dc8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]
      break;
 8008da6:	e00f      	b.n	8008dc8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8008da8:	bf00      	nop
 8008daa:	e00e      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008dac:	bf00      	nop
 8008dae:	e00c      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008db0:	bf00      	nop
 8008db2:	e00a      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008db4:	bf00      	nop
 8008db6:	e008      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008db8:	bf00      	nop
 8008dba:	e006      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008dbc:	bf00      	nop
 8008dbe:	e004      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008dc0:	bf00      	nop
 8008dc2:	e002      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008dc4:	bf00      	nop
 8008dc6:	e000      	b.n	8008dca <USBH_HandleEnum+0x3be>
      break;
 8008dc8:	bf00      	nop
  }
  return Status;
 8008dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3710      	adds	r7, #16
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	683a      	ldr	r2, [r7, #0]
 8008de2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008e00:	1c5a      	adds	r2, r3, #1
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f804 	bl	8008e16 <USBH_HandleSof>
}
 8008e0e:	bf00      	nop
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b0b      	cmp	r3, #11
 8008e26:	d10a      	bne.n	8008e3e <USBH_HandleSof+0x28>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	4798      	blx	r3
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}

08008e46 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2201      	movs	r2, #1
 8008e52:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8008e56:	bf00      	nop
}
 8008e58:	370c      	adds	r7, #12
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008e72:	bf00      	nop
}
 8008e74:	370c      	adds	r7, #12
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008e7e:	b480      	push	{r7}
 8008e80:	b083      	sub	sp, #12
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008e9e:	2300      	movs	r3, #0
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b082      	sub	sp, #8
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 ff56 	bl	8009d7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	791b      	ldrb	r3, [r3, #4]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 fda3 	bl	8009a24 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	795b      	ldrb	r3, [r3, #5]
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fd9d 	bl	8009a24 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3708      	adds	r7, #8
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd80      	pop	{r7, pc}

08008ef4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	460b      	mov	r3, r1
 8008efe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008f06:	78fb      	ldrb	r3, [r7, #3]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f12:	2100      	movs	r1, #0
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f864 	bl	8008fe2 <USBH_GetDescriptor>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10a      	bne.n	8008f3a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f203 3026 	addw	r0, r3, #806	; 0x326
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	b292      	uxth	r2, r2
 8008f34:	4619      	mov	r1, r3
 8008f36:	f000 f918 	bl	800916a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	331c      	adds	r3, #28
 8008f54:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008f56:	887b      	ldrh	r3, [r7, #2]
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f60:	2100      	movs	r1, #0
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f83d 	bl	8008fe2 <USBH_GetDescriptor>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	72fb      	strb	r3, [r7, #11]
 8008f6c:	7afb      	ldrb	r3, [r7, #11]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d107      	bne.n	8008f82 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8008f78:	887a      	ldrh	r2, [r7, #2]
 8008f7a:	68f9      	ldr	r1, [r7, #12]
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	f000 f964 	bl	800924a <USBH_ParseCfgDesc>
  }

  return status;
 8008f82:	7afb      	ldrb	r3, [r7, #11]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b088      	sub	sp, #32
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	607a      	str	r2, [r7, #4]
 8008f96:	461a      	mov	r2, r3
 8008f98:	460b      	mov	r3, r1
 8008f9a:	72fb      	strb	r3, [r7, #11]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8008fa0:	7afb      	ldrb	r3, [r7, #11]
 8008fa2:	b29b      	uxth	r3, r3
 8008fa4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008fa8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8008fb0:	893b      	ldrh	r3, [r7, #8]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	2100      	movs	r1, #0
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 f812 	bl	8008fe2 <USBH_GetDescriptor>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	75fb      	strb	r3, [r7, #23]
 8008fc2:	7dfb      	ldrb	r3, [r7, #23]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d107      	bne.n	8008fd8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8008fce:	893a      	ldrh	r2, [r7, #8]
 8008fd0:	6879      	ldr	r1, [r7, #4]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 fa37 	bl	8009446 <USBH_ParseStringDesc>
  }

  return status;
 8008fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	60f8      	str	r0, [r7, #12]
 8008fea:	607b      	str	r3, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	72fb      	strb	r3, [r7, #11]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	789b      	ldrb	r3, [r3, #2]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d11c      	bne.n	8009036 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009002:	b2da      	uxtb	r2, r3
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	2206      	movs	r2, #6
 800900c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	893a      	ldrh	r2, [r7, #8]
 8009012:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009014:	893b      	ldrh	r3, [r7, #8]
 8009016:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800901a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800901e:	d104      	bne.n	800902a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f240 4209 	movw	r2, #1033	; 0x409
 8009026:	829a      	strh	r2, [r3, #20]
 8009028:	e002      	b.n	8009030 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	2200      	movs	r2, #0
 800902e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	8b3a      	ldrh	r2, [r7, #24]
 8009034:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009036:	8b3b      	ldrh	r3, [r7, #24]
 8009038:	461a      	mov	r2, r3
 800903a:	6879      	ldr	r1, [r7, #4]
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	f000 fa50 	bl	80094e2 <USBH_CtlReq>
 8009042:	4603      	mov	r3, r0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	789b      	ldrb	r3, [r3, #2]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d10f      	bne.n	8009080 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2205      	movs	r2, #5
 800906a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800906c:	78fb      	ldrb	r3, [r7, #3]
 800906e:	b29a      	uxth	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009080:	2200      	movs	r2, #0
 8009082:	2100      	movs	r1, #0
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fa2c 	bl	80094e2 <USBH_CtlReq>
 800908a:	4603      	mov	r3, r0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	789b      	ldrb	r3, [r3, #2]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d10e      	bne.n	80090c6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2209      	movs	r2, #9
 80090b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	887a      	ldrh	r2, [r7, #2]
 80090b8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80090c6:	2200      	movs	r2, #0
 80090c8:	2100      	movs	r1, #0
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa09 	bl	80094e2 <USBH_CtlReq>
 80090d0:	4603      	mov	r3, r0
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}

080090da <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
 80090e2:	460b      	mov	r3, r1
 80090e4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	789b      	ldrb	r3, [r3, #2]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d10f      	bne.n	800910e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2203      	movs	r2, #3
 80090f8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	b29a      	uxth	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800910e:	2200      	movs	r2, #0
 8009110:	2100      	movs	r1, #0
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 f9e5 	bl	80094e2 <USBH_CtlReq>
 8009118:	4603      	mov	r3, r0
}
 800911a:	4618      	mov	r0, r3
 800911c:	3708      	adds	r7, #8
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b082      	sub	sp, #8
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	789b      	ldrb	r3, [r3, #2]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d10f      	bne.n	8009156 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2202      	movs	r2, #2
 800913a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009148:	78fb      	ldrb	r3, [r7, #3]
 800914a:	b29a      	uxth	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8009156:	2200      	movs	r2, #0
 8009158:	2100      	movs	r1, #0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9c1 	bl	80094e2 <USBH_CtlReq>
 8009160:	4603      	mov	r3, r0
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}

0800916a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800916a:	b480      	push	{r7}
 800916c:	b085      	sub	sp, #20
 800916e:	af00      	add	r7, sp, #0
 8009170:	60f8      	str	r0, [r7, #12]
 8009172:	60b9      	str	r1, [r7, #8]
 8009174:	4613      	mov	r3, r2
 8009176:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	781a      	ldrb	r2, [r3, #0]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	785a      	ldrb	r2, [r3, #1]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	3302      	adds	r3, #2
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b29a      	uxth	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3303      	adds	r3, #3
 8009194:	781b      	ldrb	r3, [r3, #0]
 8009196:	b29b      	uxth	r3, r3
 8009198:	021b      	lsls	r3, r3, #8
 800919a:	b29b      	uxth	r3, r3
 800919c:	4313      	orrs	r3, r2
 800919e:	b29a      	uxth	r2, r3
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	791a      	ldrb	r2, [r3, #4]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	795a      	ldrb	r2, [r3, #5]
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	799a      	ldrb	r2, [r3, #6]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	79da      	ldrb	r2, [r3, #7]
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 80091c4:	88fb      	ldrh	r3, [r7, #6]
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	d939      	bls.n	800923e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	3308      	adds	r3, #8
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	3309      	adds	r3, #9
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	021b      	lsls	r3, r3, #8
 80091dc:	b29b      	uxth	r3, r3
 80091de:	4313      	orrs	r3, r2
 80091e0:	b29a      	uxth	r2, r3
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	330a      	adds	r3, #10
 80091ea:	781b      	ldrb	r3, [r3, #0]
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	330b      	adds	r3, #11
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	b29b      	uxth	r3, r3
 80091f6:	021b      	lsls	r3, r3, #8
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8009202:	68bb      	ldr	r3, [r7, #8]
 8009204:	330c      	adds	r3, #12
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	b29a      	uxth	r2, r3
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	330d      	adds	r3, #13
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	b29b      	uxth	r3, r3
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	b29b      	uxth	r3, r3
 8009216:	4313      	orrs	r3, r2
 8009218:	b29a      	uxth	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	7b9a      	ldrb	r2, [r3, #14]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	7bda      	ldrb	r2, [r3, #15]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	7c1a      	ldrb	r2, [r3, #16]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	7c5a      	ldrb	r2, [r3, #17]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	745a      	strb	r2, [r3, #17]
  }
}
 800923e:	bf00      	nop
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b08a      	sub	sp, #40	; 0x28
 800924e:	af00      	add	r7, sp, #0
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	4613      	mov	r3, r2
 8009256:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8009262:	2300      	movs	r3, #0
 8009264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	781a      	ldrb	r2, [r3, #0]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	785a      	ldrb	r2, [r3, #1]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	3302      	adds	r3, #2
 8009280:	781b      	ldrb	r3, [r3, #0]
 8009282:	b29a      	uxth	r2, r3
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	3303      	adds	r3, #3
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	021b      	lsls	r3, r3, #8
 800928e:	b29b      	uxth	r3, r3
 8009290:	4313      	orrs	r3, r2
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	791a      	ldrb	r2, [r3, #4]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	795a      	ldrb	r2, [r3, #5]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	799a      	ldrb	r2, [r3, #6]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	79da      	ldrb	r2, [r3, #7]
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	7a1a      	ldrb	r2, [r3, #8]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80092c0:	88fb      	ldrh	r3, [r7, #6]
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	d95f      	bls.n	8009386 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 80092c6:	2309      	movs	r3, #9
 80092c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80092ce:	e051      	b.n	8009374 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80092d0:	f107 0316 	add.w	r3, r7, #22
 80092d4:	4619      	mov	r1, r3
 80092d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092d8:	f000 f8e8 	bl	80094ac <USBH_GetNextDesc>
 80092dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 80092de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d146      	bne.n	8009374 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 80092e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80092ea:	221a      	movs	r2, #26
 80092ec:	fb02 f303 	mul.w	r3, r2, r3
 80092f0:	3308      	adds	r3, #8
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	3302      	adds	r3, #2
 80092f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80092fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80092fc:	69f8      	ldr	r0, [r7, #28]
 80092fe:	f000 f846 	bl	800938e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8009308:	2300      	movs	r3, #0
 800930a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800930c:	e022      	b.n	8009354 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800930e:	f107 0316 	add.w	r3, r7, #22
 8009312:	4619      	mov	r1, r3
 8009314:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009316:	f000 f8c9 	bl	80094ac <USBH_GetNextDesc>
 800931a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800931e:	785b      	ldrb	r3, [r3, #1]
 8009320:	2b05      	cmp	r3, #5
 8009322:	d117      	bne.n	8009354 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009324:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009328:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800932c:	3201      	adds	r2, #1
 800932e:	00d2      	lsls	r2, r2, #3
 8009330:	211a      	movs	r1, #26
 8009332:	fb01 f303 	mul.w	r3, r1, r3
 8009336:	4413      	add	r3, r2
 8009338:	3308      	adds	r3, #8
 800933a:	68fa      	ldr	r2, [r7, #12]
 800933c:	4413      	add	r3, r2
 800933e:	3304      	adds	r3, #4
 8009340:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8009342:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009344:	69b8      	ldr	r0, [r7, #24]
 8009346:	f000 f851 	bl	80093ec <USBH_ParseEPDesc>
            ep_ix++;
 800934a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800934e:	3301      	adds	r3, #1
 8009350:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	791b      	ldrb	r3, [r3, #4]
 8009358:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800935c:	429a      	cmp	r2, r3
 800935e:	d204      	bcs.n	800936a <USBH_ParseCfgDesc+0x120>
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	885a      	ldrh	r2, [r3, #2]
 8009364:	8afb      	ldrh	r3, [r7, #22]
 8009366:	429a      	cmp	r2, r3
 8009368:	d8d1      	bhi.n	800930e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800936a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800936e:	3301      	adds	r3, #1
 8009370:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009374:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009378:	2b01      	cmp	r3, #1
 800937a:	d804      	bhi.n	8009386 <USBH_ParseCfgDesc+0x13c>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	885a      	ldrh	r2, [r3, #2]
 8009380:	8afb      	ldrh	r3, [r7, #22]
 8009382:	429a      	cmp	r2, r3
 8009384:	d8a4      	bhi.n	80092d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8009386:	bf00      	nop
 8009388:	3728      	adds	r7, #40	; 0x28
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
 8009396:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	781a      	ldrb	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	785a      	ldrb	r2, [r3, #1]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	789a      	ldrb	r2, [r3, #2]
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	78da      	ldrb	r2, [r3, #3]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	791a      	ldrb	r2, [r3, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	795a      	ldrb	r2, [r3, #5]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	799a      	ldrb	r2, [r3, #6]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 80093d0:	683b      	ldr	r3, [r7, #0]
 80093d2:	79da      	ldrb	r2, [r3, #7]
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	7a1a      	ldrb	r2, [r3, #8]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	721a      	strb	r2, [r3, #8]
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781a      	ldrb	r2, [r3, #0]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	785a      	ldrb	r2, [r3, #1]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	789a      	ldrb	r2, [r3, #2]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	78da      	ldrb	r2, [r3, #3]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	3304      	adds	r3, #4
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	b29a      	uxth	r2, r3
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	3305      	adds	r3, #5
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	b29b      	uxth	r3, r3
 8009426:	021b      	lsls	r3, r3, #8
 8009428:	b29b      	uxth	r3, r3
 800942a:	4313      	orrs	r3, r2
 800942c:	b29a      	uxth	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	799a      	ldrb	r2, [r3, #6]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	719a      	strb	r2, [r3, #6]
}
 800943a:	bf00      	nop
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009446:	b480      	push	{r7}
 8009448:	b087      	sub	sp, #28
 800944a:	af00      	add	r7, sp, #0
 800944c:	60f8      	str	r0, [r7, #12]
 800944e:	60b9      	str	r1, [r7, #8]
 8009450:	4613      	mov	r3, r2
 8009452:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3301      	adds	r3, #1
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b03      	cmp	r3, #3
 800945c:	d120      	bne.n	80094a0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	1e9a      	subs	r2, r3, #2
 8009464:	88fb      	ldrh	r3, [r7, #6]
 8009466:	4293      	cmp	r3, r2
 8009468:	bf28      	it	cs
 800946a:	4613      	movcs	r3, r2
 800946c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3302      	adds	r3, #2
 8009472:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009474:	2300      	movs	r3, #0
 8009476:	82fb      	strh	r3, [r7, #22]
 8009478:	e00b      	b.n	8009492 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800947a:	8afb      	ldrh	r3, [r7, #22]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4413      	add	r3, r2
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	3301      	adds	r3, #1
 800948a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800948c:	8afb      	ldrh	r3, [r7, #22]
 800948e:	3302      	adds	r3, #2
 8009490:	82fb      	strh	r3, [r7, #22]
 8009492:	8afa      	ldrh	r2, [r7, #22]
 8009494:	8abb      	ldrh	r3, [r7, #20]
 8009496:	429a      	cmp	r2, r3
 8009498:	d3ef      	bcc.n	800947a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	2200      	movs	r2, #0
 800949e:	701a      	strb	r2, [r3, #0]
  }
}
 80094a0:	bf00      	nop
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b085      	sub	sp, #20
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	881a      	ldrh	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4413      	add	r3, r2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4413      	add	r3, r2
 80094d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80094d4:	68fb      	ldr	r3, [r7, #12]
}
 80094d6:	4618      	mov	r0, r3
 80094d8:	3714      	adds	r7, #20
 80094da:	46bd      	mov	sp, r7
 80094dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e0:	4770      	bx	lr

080094e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80094e2:	b580      	push	{r7, lr}
 80094e4:	b086      	sub	sp, #24
 80094e6:	af00      	add	r7, sp, #0
 80094e8:	60f8      	str	r0, [r7, #12]
 80094ea:	60b9      	str	r1, [r7, #8]
 80094ec:	4613      	mov	r3, r2
 80094ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80094f0:	2301      	movs	r3, #1
 80094f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	789b      	ldrb	r3, [r3, #2]
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d002      	beq.n	8009502 <USBH_CtlReq+0x20>
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d00f      	beq.n	8009520 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009500:	e027      	b.n	8009552 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	88fa      	ldrh	r2, [r7, #6]
 800950c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2201      	movs	r2, #1
 8009512:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	2202      	movs	r2, #2
 8009518:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800951a:	2301      	movs	r3, #1
 800951c:	75fb      	strb	r3, [r7, #23]
      break;
 800951e:	e018      	b.n	8009552 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009520:	68f8      	ldr	r0, [r7, #12]
 8009522:	f000 f81b 	bl	800955c <USBH_HandleControl>
 8009526:	4603      	mov	r3, r0
 8009528:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800952a:	7dfb      	ldrb	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d002      	beq.n	8009536 <USBH_CtlReq+0x54>
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	2b03      	cmp	r3, #3
 8009534:	d106      	bne.n	8009544 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2201      	movs	r2, #1
 800953a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	761a      	strb	r2, [r3, #24]
      break;
 8009542:	e005      	b.n	8009550 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	2b02      	cmp	r3, #2
 8009548:	d102      	bne.n	8009550 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2201      	movs	r2, #1
 800954e:	709a      	strb	r2, [r3, #2]
      break;
 8009550:	bf00      	nop
  }
  return status;
 8009552:	7dfb      	ldrb	r3, [r7, #23]
}
 8009554:	4618      	mov	r0, r3
 8009556:	3718      	adds	r7, #24
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b086      	sub	sp, #24
 8009560:	af02      	add	r7, sp, #8
 8009562:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009564:	2301      	movs	r3, #1
 8009566:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009568:	2300      	movs	r3, #0
 800956a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	7e1b      	ldrb	r3, [r3, #24]
 8009570:	3b01      	subs	r3, #1
 8009572:	2b0a      	cmp	r3, #10
 8009574:	f200 8156 	bhi.w	8009824 <USBH_HandleControl+0x2c8>
 8009578:	a201      	add	r2, pc, #4	; (adr r2, 8009580 <USBH_HandleControl+0x24>)
 800957a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957e:	bf00      	nop
 8009580:	080095ad 	.word	0x080095ad
 8009584:	080095c7 	.word	0x080095c7
 8009588:	08009631 	.word	0x08009631
 800958c:	08009657 	.word	0x08009657
 8009590:	0800968f 	.word	0x0800968f
 8009594:	080096b9 	.word	0x080096b9
 8009598:	0800970b 	.word	0x0800970b
 800959c:	0800972d 	.word	0x0800972d
 80095a0:	08009769 	.word	0x08009769
 80095a4:	0800978f 	.word	0x0800978f
 80095a8:	080097cd 	.word	0x080097cd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f103 0110 	add.w	r1, r3, #16
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	795b      	ldrb	r3, [r3, #5]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f000 f943 	bl	8009844 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	761a      	strb	r2, [r3, #24]
      break;
 80095c4:	e139      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	795b      	ldrb	r3, [r3, #5]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 fcc5 	bl	8009f5c <USBH_LL_GetURBState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80095d6:	7bbb      	ldrb	r3, [r7, #14]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d11e      	bne.n	800961a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	7c1b      	ldrb	r3, [r3, #16]
 80095e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095e4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	8adb      	ldrh	r3, [r3, #22]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80095ee:	7b7b      	ldrb	r3, [r7, #13]
 80095f0:	2b80      	cmp	r3, #128	; 0x80
 80095f2:	d103      	bne.n	80095fc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2203      	movs	r2, #3
 80095f8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80095fa:	e115      	b.n	8009828 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2205      	movs	r2, #5
 8009600:	761a      	strb	r2, [r3, #24]
      break;
 8009602:	e111      	b.n	8009828 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009604:	7b7b      	ldrb	r3, [r7, #13]
 8009606:	2b80      	cmp	r3, #128	; 0x80
 8009608:	d103      	bne.n	8009612 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2209      	movs	r2, #9
 800960e:	761a      	strb	r2, [r3, #24]
      break;
 8009610:	e10a      	b.n	8009828 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2207      	movs	r2, #7
 8009616:	761a      	strb	r2, [r3, #24]
      break;
 8009618:	e106      	b.n	8009828 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800961a:	7bbb      	ldrb	r3, [r7, #14]
 800961c:	2b04      	cmp	r3, #4
 800961e:	d003      	beq.n	8009628 <USBH_HandleControl+0xcc>
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b02      	cmp	r3, #2
 8009624:	f040 8100 	bne.w	8009828 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	220b      	movs	r2, #11
 800962c:	761a      	strb	r2, [r3, #24]
      break;
 800962e:	e0fb      	b.n	8009828 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009636:	b29a      	uxth	r2, r3
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6899      	ldr	r1, [r3, #8]
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	899a      	ldrh	r2, [r3, #12]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	791b      	ldrb	r3, [r3, #4]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f93a 	bl	80098c2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2204      	movs	r2, #4
 8009652:	761a      	strb	r2, [r3, #24]
      break;
 8009654:	e0f1      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	791b      	ldrb	r3, [r3, #4]
 800965a:	4619      	mov	r1, r3
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 fc7d 	bl	8009f5c <USBH_LL_GetURBState>
 8009662:	4603      	mov	r3, r0
 8009664:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009666:	7bbb      	ldrb	r3, [r7, #14]
 8009668:	2b01      	cmp	r3, #1
 800966a:	d102      	bne.n	8009672 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2209      	movs	r2, #9
 8009670:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009672:	7bbb      	ldrb	r3, [r7, #14]
 8009674:	2b05      	cmp	r3, #5
 8009676:	d102      	bne.n	800967e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009678:	2303      	movs	r3, #3
 800967a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800967c:	e0d6      	b.n	800982c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800967e:	7bbb      	ldrb	r3, [r7, #14]
 8009680:	2b04      	cmp	r3, #4
 8009682:	f040 80d3 	bne.w	800982c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	220b      	movs	r2, #11
 800968a:	761a      	strb	r2, [r3, #24]
      break;
 800968c:	e0ce      	b.n	800982c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6899      	ldr	r1, [r3, #8]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	899a      	ldrh	r2, [r3, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	795b      	ldrb	r3, [r3, #5]
 800969a:	2001      	movs	r0, #1
 800969c:	9000      	str	r0, [sp, #0]
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f8ea 	bl	8009878 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2206      	movs	r2, #6
 80096b4:	761a      	strb	r2, [r3, #24]
      break;
 80096b6:	e0c0      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	795b      	ldrb	r3, [r3, #5]
 80096bc:	4619      	mov	r1, r3
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 fc4c 	bl	8009f5c <USBH_LL_GetURBState>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
 80096ca:	2b01      	cmp	r3, #1
 80096cc:	d103      	bne.n	80096d6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2207      	movs	r2, #7
 80096d2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80096d4:	e0ac      	b.n	8009830 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	2b05      	cmp	r3, #5
 80096da:	d105      	bne.n	80096e8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	220c      	movs	r2, #12
 80096e0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80096e2:	2303      	movs	r3, #3
 80096e4:	73fb      	strb	r3, [r7, #15]
      break;
 80096e6:	e0a3      	b.n	8009830 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	2b02      	cmp	r3, #2
 80096ec:	d103      	bne.n	80096f6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2205      	movs	r2, #5
 80096f2:	761a      	strb	r2, [r3, #24]
      break;
 80096f4:	e09c      	b.n	8009830 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80096f6:	7bbb      	ldrb	r3, [r7, #14]
 80096f8:	2b04      	cmp	r3, #4
 80096fa:	f040 8099 	bne.w	8009830 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	220b      	movs	r2, #11
 8009702:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	73fb      	strb	r3, [r7, #15]
      break;
 8009708:	e092      	b.n	8009830 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	791b      	ldrb	r3, [r3, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	6878      	ldr	r0, [r7, #4]
 8009714:	f000 f8d5 	bl	80098c2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800971e:	b29a      	uxth	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2208      	movs	r2, #8
 8009728:	761a      	strb	r2, [r3, #24]

      break;
 800972a:	e086      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	791b      	ldrb	r3, [r3, #4]
 8009730:	4619      	mov	r1, r3
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc12 	bl	8009f5c <USBH_LL_GetURBState>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	2b01      	cmp	r3, #1
 8009740:	d105      	bne.n	800974e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	220d      	movs	r2, #13
 8009746:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800974c:	e072      	b.n	8009834 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800974e:	7bbb      	ldrb	r3, [r7, #14]
 8009750:	2b04      	cmp	r3, #4
 8009752:	d103      	bne.n	800975c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	220b      	movs	r2, #11
 8009758:	761a      	strb	r2, [r3, #24]
      break;
 800975a:	e06b      	b.n	8009834 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800975c:	7bbb      	ldrb	r3, [r7, #14]
 800975e:	2b05      	cmp	r3, #5
 8009760:	d168      	bne.n	8009834 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009762:	2303      	movs	r3, #3
 8009764:	73fb      	strb	r3, [r7, #15]
      break;
 8009766:	e065      	b.n	8009834 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	795b      	ldrb	r3, [r3, #5]
 800976c:	2201      	movs	r2, #1
 800976e:	9200      	str	r2, [sp, #0]
 8009770:	2200      	movs	r2, #0
 8009772:	2100      	movs	r1, #0
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f87f 	bl	8009878 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009780:	b29a      	uxth	r2, r3
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	220a      	movs	r2, #10
 800978a:	761a      	strb	r2, [r3, #24]
      break;
 800978c:	e055      	b.n	800983a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	795b      	ldrb	r3, [r3, #5]
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fbe1 	bl	8009f5c <USBH_LL_GetURBState>
 800979a:	4603      	mov	r3, r0
 800979c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800979e:	7bbb      	ldrb	r3, [r7, #14]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d105      	bne.n	80097b0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	220d      	movs	r2, #13
 80097ac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80097ae:	e043      	b.n	8009838 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d103      	bne.n	80097be <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2209      	movs	r2, #9
 80097ba:	761a      	strb	r2, [r3, #24]
      break;
 80097bc:	e03c      	b.n	8009838 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80097be:	7bbb      	ldrb	r3, [r7, #14]
 80097c0:	2b04      	cmp	r3, #4
 80097c2:	d139      	bne.n	8009838 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	220b      	movs	r2, #11
 80097c8:	761a      	strb	r2, [r3, #24]
      break;
 80097ca:	e035      	b.n	8009838 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	7e5b      	ldrb	r3, [r3, #25]
 80097d0:	3301      	adds	r3, #1
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	765a      	strb	r2, [r3, #25]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	7e5b      	ldrb	r3, [r3, #25]
 80097dc:	2b02      	cmp	r3, #2
 80097de:	d806      	bhi.n	80097ee <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2201      	movs	r2, #1
 80097ea:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80097ec:	e025      	b.n	800983a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f4:	2106      	movs	r1, #6
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	795b      	ldrb	r3, [r3, #5]
 8009804:	4619      	mov	r1, r3
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f90c 	bl	8009a24 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f906 	bl	8009a24 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800981e:	2302      	movs	r3, #2
 8009820:	73fb      	strb	r3, [r7, #15]
      break;
 8009822:	e00a      	b.n	800983a <USBH_HandleControl+0x2de>

    default:
      break;
 8009824:	bf00      	nop
 8009826:	e008      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009828:	bf00      	nop
 800982a:	e006      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 800982c:	bf00      	nop
 800982e:	e004      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009830:	bf00      	nop
 8009832:	e002      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009834:	bf00      	nop
 8009836:	e000      	b.n	800983a <USBH_HandleControl+0x2de>
      break;
 8009838:	bf00      	nop
  }

  return status;
 800983a:	7bfb      	ldrb	r3, [r7, #15]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b088      	sub	sp, #32
 8009848:	af04      	add	r7, sp, #16
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	4613      	mov	r3, r2
 8009850:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009852:	79f9      	ldrb	r1, [r7, #7]
 8009854:	2300      	movs	r3, #0
 8009856:	9303      	str	r3, [sp, #12]
 8009858:	2308      	movs	r3, #8
 800985a:	9302      	str	r3, [sp, #8]
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	2300      	movs	r3, #0
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	2300      	movs	r3, #0
 8009866:	2200      	movs	r2, #0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 fb46 	bl	8009efa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b088      	sub	sp, #32
 800987c:	af04      	add	r7, sp, #16
 800987e:	60f8      	str	r0, [r7, #12]
 8009880:	60b9      	str	r1, [r7, #8]
 8009882:	4611      	mov	r1, r2
 8009884:	461a      	mov	r2, r3
 8009886:	460b      	mov	r3, r1
 8009888:	80fb      	strh	r3, [r7, #6]
 800988a:	4613      	mov	r3, r2
 800988c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009894:	2b00      	cmp	r3, #0
 8009896:	d001      	beq.n	800989c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009898:	2300      	movs	r3, #0
 800989a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800989c:	7979      	ldrb	r1, [r7, #5]
 800989e:	7e3b      	ldrb	r3, [r7, #24]
 80098a0:	9303      	str	r3, [sp, #12]
 80098a2:	88fb      	ldrh	r3, [r7, #6]
 80098a4:	9302      	str	r3, [sp, #8]
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	2301      	movs	r3, #1
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	2300      	movs	r3, #0
 80098b0:	2200      	movs	r2, #0
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 fb21 	bl	8009efa <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b088      	sub	sp, #32
 80098c6:	af04      	add	r7, sp, #16
 80098c8:	60f8      	str	r0, [r7, #12]
 80098ca:	60b9      	str	r1, [r7, #8]
 80098cc:	4611      	mov	r1, r2
 80098ce:	461a      	mov	r2, r3
 80098d0:	460b      	mov	r3, r1
 80098d2:	80fb      	strh	r3, [r7, #6]
 80098d4:	4613      	mov	r3, r2
 80098d6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80098d8:	7979      	ldrb	r1, [r7, #5]
 80098da:	2300      	movs	r3, #0
 80098dc:	9303      	str	r3, [sp, #12]
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	9302      	str	r3, [sp, #8]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	9301      	str	r3, [sp, #4]
 80098e6:	2301      	movs	r3, #1
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	2300      	movs	r3, #0
 80098ec:	2201      	movs	r2, #1
 80098ee:	68f8      	ldr	r0, [r7, #12]
 80098f0:	f000 fb03 	bl	8009efa <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80098f4:	2300      	movs	r3, #0

}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3710      	adds	r7, #16
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}

080098fe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80098fe:	b580      	push	{r7, lr}
 8009900:	b088      	sub	sp, #32
 8009902:	af04      	add	r7, sp, #16
 8009904:	60f8      	str	r0, [r7, #12]
 8009906:	60b9      	str	r1, [r7, #8]
 8009908:	4611      	mov	r1, r2
 800990a:	461a      	mov	r2, r3
 800990c:	460b      	mov	r3, r1
 800990e:	80fb      	strh	r3, [r7, #6]
 8009910:	4613      	mov	r3, r2
 8009912:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800991a:	2b00      	cmp	r3, #0
 800991c:	d001      	beq.n	8009922 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800991e:	2300      	movs	r3, #0
 8009920:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8009922:	7979      	ldrb	r1, [r7, #5]
 8009924:	7e3b      	ldrb	r3, [r7, #24]
 8009926:	9303      	str	r3, [sp, #12]
 8009928:	88fb      	ldrh	r3, [r7, #6]
 800992a:	9302      	str	r3, [sp, #8]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	9301      	str	r3, [sp, #4]
 8009930:	2301      	movs	r3, #1
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	2302      	movs	r3, #2
 8009936:	2200      	movs	r2, #0
 8009938:	68f8      	ldr	r0, [r7, #12]
 800993a:	f000 fade 	bl	8009efa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800993e:	2300      	movs	r3, #0
}
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af04      	add	r7, sp, #16
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	4611      	mov	r1, r2
 8009954:	461a      	mov	r2, r3
 8009956:	460b      	mov	r3, r1
 8009958:	80fb      	strh	r3, [r7, #6]
 800995a:	4613      	mov	r3, r2
 800995c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800995e:	7979      	ldrb	r1, [r7, #5]
 8009960:	2300      	movs	r3, #0
 8009962:	9303      	str	r3, [sp, #12]
 8009964:	88fb      	ldrh	r3, [r7, #6]
 8009966:	9302      	str	r3, [sp, #8]
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	9301      	str	r3, [sp, #4]
 800996c:	2301      	movs	r3, #1
 800996e:	9300      	str	r3, [sp, #0]
 8009970:	2302      	movs	r3, #2
 8009972:	2201      	movs	r2, #1
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f000 fac0 	bl	8009efa <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af04      	add	r7, sp, #16
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	4608      	mov	r0, r1
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	4603      	mov	r3, r0
 8009994:	70fb      	strb	r3, [r7, #3]
 8009996:	460b      	mov	r3, r1
 8009998:	70bb      	strb	r3, [r7, #2]
 800999a:	4613      	mov	r3, r2
 800999c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800999e:	7878      	ldrb	r0, [r7, #1]
 80099a0:	78ba      	ldrb	r2, [r7, #2]
 80099a2:	78f9      	ldrb	r1, [r7, #3]
 80099a4:	8b3b      	ldrh	r3, [r7, #24]
 80099a6:	9302      	str	r3, [sp, #8]
 80099a8:	7d3b      	ldrb	r3, [r7, #20]
 80099aa:	9301      	str	r3, [sp, #4]
 80099ac:	7c3b      	ldrb	r3, [r7, #16]
 80099ae:	9300      	str	r3, [sp, #0]
 80099b0:	4603      	mov	r3, r0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa53 	bl	8009e5e <USBH_LL_OpenPipe>

  return USBH_OK;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}

080099c2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80099ce:	78fb      	ldrb	r3, [r7, #3]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f000 fa72 	bl	8009ebc <USBH_LL_ClosePipe>

  return USBH_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3708      	adds	r7, #8
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b084      	sub	sp, #16
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
 80099ea:	460b      	mov	r3, r1
 80099ec:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 f836 	bl	8009a60 <USBH_GetFreePipe>
 80099f4:	4603      	mov	r3, r0
 80099f6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80099f8:	89fb      	ldrh	r3, [r7, #14]
 80099fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00a      	beq.n	8009a18 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8009a02:	78fa      	ldrb	r2, [r7, #3]
 8009a04:	89fb      	ldrh	r3, [r7, #14]
 8009a06:	f003 030f 	and.w	r3, r3, #15
 8009a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	33e0      	adds	r3, #224	; 0xe0
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	440b      	add	r3, r1
 8009a16:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a18:	89fb      	ldrh	r3, [r7, #14]
 8009a1a:	b2db      	uxtb	r3, r3
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 8009a30:	78fb      	ldrb	r3, [r7, #3]
 8009a32:	2b0a      	cmp	r3, #10
 8009a34:	d80d      	bhi.n	8009a52 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a36:	78fb      	ldrb	r3, [r7, #3]
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	33e0      	adds	r3, #224	; 0xe0
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4413      	add	r3, r2
 8009a40:	685a      	ldr	r2, [r3, #4]
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	33e0      	adds	r3, #224	; 0xe0
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	440b      	add	r3, r1
 8009a50:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	73fb      	strb	r3, [r7, #15]
 8009a70:	e00f      	b.n	8009a92 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009a72:	7bfb      	ldrb	r3, [r7, #15]
 8009a74:	687a      	ldr	r2, [r7, #4]
 8009a76:	33e0      	adds	r3, #224	; 0xe0
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d102      	bne.n	8009a8c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009a86:	7bfb      	ldrb	r3, [r7, #15]
 8009a88:	b29b      	uxth	r3, r3
 8009a8a:	e007      	b.n	8009a9c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	73fb      	strb	r3, [r7, #15]
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b0a      	cmp	r3, #10
 8009a96:	d9ec      	bls.n	8009a72 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009a98:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009aac:	2201      	movs	r2, #1
 8009aae:	490e      	ldr	r1, [pc, #56]	; (8009ae8 <MX_USB_HOST_Init+0x40>)
 8009ab0:	480e      	ldr	r0, [pc, #56]	; (8009aec <MX_USB_HOST_Init+0x44>)
 8009ab2:	f7fe fca1 	bl	80083f8 <USBH_Init>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d001      	beq.n	8009ac0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009abc:	f7f7 fa00 	bl	8000ec0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009ac0:	490b      	ldr	r1, [pc, #44]	; (8009af0 <MX_USB_HOST_Init+0x48>)
 8009ac2:	480a      	ldr	r0, [pc, #40]	; (8009aec <MX_USB_HOST_Init+0x44>)
 8009ac4:	f7fe fd26 	bl	8008514 <USBH_RegisterClass>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d001      	beq.n	8009ad2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009ace:	f7f7 f9f7 	bl	8000ec0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009ad2:	4806      	ldr	r0, [pc, #24]	; (8009aec <MX_USB_HOST_Init+0x44>)
 8009ad4:	f7fe fdaa 	bl	800862c <USBH_Start>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d001      	beq.n	8009ae2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009ade:	f7f7 f9ef 	bl	8000ec0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009ae2:	bf00      	nop
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop
 8009ae8:	08009b09 	.word	0x08009b09
 8009aec:	20000240 	.word	0x20000240
 8009af0:	2000000c 	.word	0x2000000c

08009af4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009af8:	4802      	ldr	r0, [pc, #8]	; (8009b04 <MX_USB_HOST_Process+0x10>)
 8009afa:	f7fe fda7 	bl	800864c <USBH_Process>
}
 8009afe:	bf00      	nop
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000240 	.word	0x20000240

08009b08 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009b14:	78fb      	ldrb	r3, [r7, #3]
 8009b16:	3b01      	subs	r3, #1
 8009b18:	2b04      	cmp	r3, #4
 8009b1a:	d819      	bhi.n	8009b50 <USBH_UserProcess+0x48>
 8009b1c:	a201      	add	r2, pc, #4	; (adr r2, 8009b24 <USBH_UserProcess+0x1c>)
 8009b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b22:	bf00      	nop
 8009b24:	08009b51 	.word	0x08009b51
 8009b28:	08009b41 	.word	0x08009b41
 8009b2c:	08009b51 	.word	0x08009b51
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b39 	.word	0x08009b39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009b38:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <USBH_UserProcess+0x58>)
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	701a      	strb	r2, [r3, #0]
  break;
 8009b3e:	e008      	b.n	8009b52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <USBH_UserProcess+0x58>)
 8009b42:	2202      	movs	r2, #2
 8009b44:	701a      	strb	r2, [r3, #0]
  break;
 8009b46:	e004      	b.n	8009b52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009b48:	4b05      	ldr	r3, [pc, #20]	; (8009b60 <USBH_UserProcess+0x58>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
  break;
 8009b4e:	e000      	b.n	8009b52 <USBH_UserProcess+0x4a>

  default:
  break;
 8009b50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
 8009b5e:	bf00      	nop
 8009b60:	200000b0 	.word	0x200000b0

08009b64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b6c:	f107 0314 	add.w	r3, r7, #20
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
 8009b74:	605a      	str	r2, [r3, #4]
 8009b76:	609a      	str	r2, [r3, #8]
 8009b78:	60da      	str	r2, [r3, #12]
 8009b7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009b84:	d147      	bne.n	8009c16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b86:	2300      	movs	r3, #0
 8009b88:	613b      	str	r3, [r7, #16]
 8009b8a:	4b25      	ldr	r3, [pc, #148]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8e:	4a24      	ldr	r2, [pc, #144]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b90:	f043 0301 	orr.w	r3, r3, #1
 8009b94:	6313      	str	r3, [r2, #48]	; 0x30
 8009b96:	4b22      	ldr	r3, [pc, #136]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	613b      	str	r3, [r7, #16]
 8009ba0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009ba2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bac:	2300      	movs	r3, #0
 8009bae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009bb0:	f107 0314 	add.w	r3, r7, #20
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	481b      	ldr	r0, [pc, #108]	; (8009c24 <HAL_HCD_MspInit+0xc0>)
 8009bb8:	f7f7 fd26 	bl	8001608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009bbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8009bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc2:	2302      	movs	r3, #2
 8009bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bca:	2303      	movs	r3, #3
 8009bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bce:	230a      	movs	r3, #10
 8009bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bd2:	f107 0314 	add.w	r3, r7, #20
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	4812      	ldr	r0, [pc, #72]	; (8009c24 <HAL_HCD_MspInit+0xc0>)
 8009bda:	f7f7 fd15 	bl	8001608 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009bde:	4b10      	ldr	r3, [pc, #64]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	4a0f      	ldr	r2, [pc, #60]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be8:	6353      	str	r3, [r2, #52]	; 0x34
 8009bea:	2300      	movs	r3, #0
 8009bec:	60fb      	str	r3, [r7, #12]
 8009bee:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf2:	4a0b      	ldr	r2, [pc, #44]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8009bfa:	4b09      	ldr	r3, [pc, #36]	; (8009c20 <HAL_HCD_MspInit+0xbc>)
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c02:	60fb      	str	r3, [r7, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009c06:	2200      	movs	r2, #0
 8009c08:	2100      	movs	r1, #0
 8009c0a:	2043      	movs	r0, #67	; 0x43
 8009c0c:	f7f7 fcac 	bl	8001568 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009c10:	2043      	movs	r0, #67	; 0x43
 8009c12:	f7f7 fcd5 	bl	80015c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c16:	bf00      	nop
 8009c18:	3728      	adds	r7, #40	; 0x28
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	40023800 	.word	0x40023800
 8009c24:	40020000 	.word	0x40020000

08009c28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7ff f8db 	bl	8008df2 <USBH_LL_IncTimer>
}
 8009c3c:	bf00      	nop
 8009c3e:	3708      	adds	r7, #8
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b082      	sub	sp, #8
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009c52:	4618      	mov	r0, r3
 8009c54:	f7ff f913 	bl	8008e7e <USBH_LL_Connect>
}
 8009c58:	bf00      	nop
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b082      	sub	sp, #8
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff f91c 	bl	8008eac <USBH_LL_Disconnect>
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	460b      	mov	r3, r1
 8009c86:	70fb      	strb	r3, [r7, #3]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009c8c:	bf00      	nop
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff f8cd 	bl	8008e46 <USBH_LL_PortEnabled>
}
 8009cac:	bf00      	nop
 8009cae:	3708      	adds	r7, #8
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7ff f8cd 	bl	8008e62 <USBH_LL_PortDisabled>
}
 8009cc8:	bf00      	nop
 8009cca:	3708      	adds	r7, #8
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d12a      	bne.n	8009d38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009ce2:	4a18      	ldr	r2, [pc, #96]	; (8009d44 <USBH_LL_Init+0x74>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	4a15      	ldr	r2, [pc, #84]	; (8009d44 <USBH_LL_Init+0x74>)
 8009cee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009cf2:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <USBH_LL_Init+0x74>)
 8009cf4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009cf8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009cfa:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <USBH_LL_Init+0x74>)
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009d00:	4b10      	ldr	r3, [pc, #64]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d02:	2201      	movs	r2, #1
 8009d04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d06:	4b0f      	ldr	r3, [pc, #60]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d08:	2200      	movs	r2, #0
 8009d0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009d0c:	4b0d      	ldr	r3, [pc, #52]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d0e:	2202      	movs	r2, #2
 8009d10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d12:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d14:	2200      	movs	r2, #0
 8009d16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009d18:	480a      	ldr	r0, [pc, #40]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d1a:	f7f7 ff6b 	bl	8001bf4 <HAL_HCD_Init>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009d24:	f7f7 f8cc 	bl	8000ec0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009d28:	4806      	ldr	r0, [pc, #24]	; (8009d44 <USBH_LL_Init+0x74>)
 8009d2a:	f7f8 fb5a 	bl	80023e2 <HAL_HCD_GetCurrentFrame>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	4619      	mov	r1, r3
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f7ff f84e 	bl	8008dd4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009d38:	2300      	movs	r3, #0
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	20000618 	.word	0x20000618

08009d48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d54:	2300      	movs	r3, #0
 8009d56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7f8 fac9 	bl	80022f6 <HAL_HCD_Start>
 8009d64:	4603      	mov	r3, r0
 8009d66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d68:	7bfb      	ldrb	r3, [r7, #15]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f000 f95c 	bl	800a028 <USBH_Get_USB_Status>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7f8 fad1 	bl	800233c <HAL_HCD_Stop>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f941 	bl	800a028 <USBH_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7f8 fb19 	bl	80023fe <HAL_HCD_GetCurrentSpeed>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d00c      	beq.n	8009dec <USBH_LL_GetSpeed+0x38>
 8009dd2:	2b02      	cmp	r3, #2
 8009dd4:	d80d      	bhi.n	8009df2 <USBH_LL_GetSpeed+0x3e>
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <USBH_LL_GetSpeed+0x2c>
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d003      	beq.n	8009de6 <USBH_LL_GetSpeed+0x32>
 8009dde:	e008      	b.n	8009df2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009de0:	2300      	movs	r3, #0
 8009de2:	73fb      	strb	r3, [r7, #15]
    break;
 8009de4:	e008      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009de6:	2301      	movs	r3, #1
 8009de8:	73fb      	strb	r3, [r7, #15]
    break;
 8009dea:	e005      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009dec:	2302      	movs	r3, #2
 8009dee:	73fb      	strb	r3, [r7, #15]
    break;
 8009df0:	e002      	b.n	8009df8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009df2:	2301      	movs	r3, #1
 8009df4:	73fb      	strb	r3, [r7, #15]
    break;
 8009df6:	bf00      	nop
  }
  return  speed;
 8009df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}

08009e02 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009e02:	b580      	push	{r7, lr}
 8009e04:	b084      	sub	sp, #16
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f7f8 faac 	bl	8002376 <HAL_HCD_ResetPort>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f8ff 	bl	800a028 <USBH_Get_USB_Status>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7f8 fab3 	bl	80023ba <HAL_HCD_HC_GetXferCount>
 8009e54:	4603      	mov	r3, r0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3708      	adds	r7, #8
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e5e:	b590      	push	{r4, r7, lr}
 8009e60:	b089      	sub	sp, #36	; 0x24
 8009e62:	af04      	add	r7, sp, #16
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	4608      	mov	r0, r1
 8009e68:	4611      	mov	r1, r2
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	70fb      	strb	r3, [r7, #3]
 8009e70:	460b      	mov	r3, r1
 8009e72:	70bb      	strb	r3, [r7, #2]
 8009e74:	4613      	mov	r3, r2
 8009e76:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009e86:	787c      	ldrb	r4, [r7, #1]
 8009e88:	78ba      	ldrb	r2, [r7, #2]
 8009e8a:	78f9      	ldrb	r1, [r7, #3]
 8009e8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e94:	9301      	str	r3, [sp, #4]
 8009e96:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e9a:	9300      	str	r3, [sp, #0]
 8009e9c:	4623      	mov	r3, r4
 8009e9e:	f7f7 ff17 	bl	8001cd0 <HAL_HCD_HC_Init>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ea6:	7bfb      	ldrb	r3, [r7, #15]
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f000 f8bd 	bl	800a028 <USBH_Get_USB_Status>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd90      	pop	{r4, r7, pc}

08009ebc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ed6:	78fa      	ldrb	r2, [r7, #3]
 8009ed8:	4611      	mov	r1, r2
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7f7 ff87 	bl	8001dee <HAL_HCD_HC_Halt>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ee4:	7bfb      	ldrb	r3, [r7, #15]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f000 f89e 	bl	800a028 <USBH_Get_USB_Status>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ef0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009efa:	b590      	push	{r4, r7, lr}
 8009efc:	b089      	sub	sp, #36	; 0x24
 8009efe:	af04      	add	r7, sp, #16
 8009f00:	6078      	str	r0, [r7, #4]
 8009f02:	4608      	mov	r0, r1
 8009f04:	4611      	mov	r1, r2
 8009f06:	461a      	mov	r2, r3
 8009f08:	4603      	mov	r3, r0
 8009f0a:	70fb      	strb	r3, [r7, #3]
 8009f0c:	460b      	mov	r3, r1
 8009f0e:	70bb      	strb	r3, [r7, #2]
 8009f10:	4613      	mov	r3, r2
 8009f12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8009f22:	787c      	ldrb	r4, [r7, #1]
 8009f24:	78ba      	ldrb	r2, [r7, #2]
 8009f26:	78f9      	ldrb	r1, [r7, #3]
 8009f28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8009f2c:	9303      	str	r3, [sp, #12]
 8009f2e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009f30:	9302      	str	r3, [sp, #8]
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	9301      	str	r3, [sp, #4]
 8009f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	f7f7 ff79 	bl	8001e34 <HAL_HCD_HC_SubmitRequest>
 8009f42:	4603      	mov	r3, r0
 8009f44:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f000 f86d 	bl	800a028 <USBH_Get_USB_Status>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd90      	pop	{r4, r7, pc}

08009f5c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	460b      	mov	r3, r1
 8009f66:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009f6e:	78fa      	ldrb	r2, [r7, #3]
 8009f70:	4611      	mov	r1, r2
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7f8 fa0d 	bl	8002392 <HAL_HCD_HC_GetURBState>
 8009f78:	4603      	mov	r3, r0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009f82:	b580      	push	{r7, lr}
 8009f84:	b082      	sub	sp, #8
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d103      	bne.n	8009fa0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009f98:	78fb      	ldrb	r3, [r7, #3]
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f000 f870 	bl	800a080 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009fa0:	20c8      	movs	r0, #200	; 0xc8
 8009fa2:	f7f7 f9cd 	bl	8001340 <HAL_Delay>
  return USBH_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3708      	adds	r7, #8
 8009fac:	46bd      	mov	sp, r7
 8009fae:	bd80      	pop	{r7, pc}

08009fb0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	70fb      	strb	r3, [r7, #3]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009fc6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	212c      	movs	r1, #44	; 0x2c
 8009fce:	fb01 f303 	mul.w	r3, r1, r3
 8009fd2:	4413      	add	r3, r2
 8009fd4:	333b      	adds	r3, #59	; 0x3b
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d009      	beq.n	8009ff0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009fdc:	78fb      	ldrb	r3, [r7, #3]
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	212c      	movs	r1, #44	; 0x2c
 8009fe2:	fb01 f303 	mul.w	r3, r1, r3
 8009fe6:	4413      	add	r3, r2
 8009fe8:	3354      	adds	r3, #84	; 0x54
 8009fea:	78ba      	ldrb	r2, [r7, #2]
 8009fec:	701a      	strb	r2, [r3, #0]
 8009fee:	e008      	b.n	800a002 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	212c      	movs	r1, #44	; 0x2c
 8009ff6:	fb01 f303 	mul.w	r3, r1, r3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	3355      	adds	r3, #85	; 0x55
 8009ffe:	78ba      	ldrb	r2, [r7, #2]
 800a000:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a002:	2300      	movs	r3, #0
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f7f7 f991 	bl	8001340 <HAL_Delay>
}
 800a01e:	bf00      	nop
 800a020:	3708      	adds	r7, #8
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}
	...

0800a028 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d817      	bhi.n	800a06c <USBH_Get_USB_Status+0x44>
 800a03c:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <USBH_Get_USB_Status+0x1c>)
 800a03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a042:	bf00      	nop
 800a044:	0800a055 	.word	0x0800a055
 800a048:	0800a05b 	.word	0x0800a05b
 800a04c:	0800a061 	.word	0x0800a061
 800a050:	0800a067 	.word	0x0800a067
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
    break;
 800a058:	e00b      	b.n	800a072 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a05a:	2302      	movs	r3, #2
 800a05c:	73fb      	strb	r3, [r7, #15]
    break;
 800a05e:	e008      	b.n	800a072 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
    break;
 800a064:	e005      	b.n	800a072 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a066:	2302      	movs	r3, #2
 800a068:	73fb      	strb	r3, [r7, #15]
    break;
 800a06a:	e002      	b.n	800a072 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a06c:	2302      	movs	r3, #2
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	bf00      	nop
  }
  return usb_status;
 800a072:	7bfb      	ldrb	r3, [r7, #15]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	4603      	mov	r3, r0
 800a088:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a08e:	79fb      	ldrb	r3, [r7, #7]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d102      	bne.n	800a09a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a094:	2301      	movs	r3, #1
 800a096:	73fb      	strb	r3, [r7, #15]
 800a098:	e001      	b.n	800a09e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a09a:	2300      	movs	r3, #0
 800a09c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	2101      	movs	r1, #1
 800a0a4:	4803      	ldr	r0, [pc, #12]	; (800a0b4 <MX_DriverVbusFS+0x34>)
 800a0a6:	f7f7 fd4b 	bl	8001b40 <HAL_GPIO_WritePin>
}
 800a0aa:	bf00      	nop
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	40020800 	.word	0x40020800

0800a0b8 <__errno>:
 800a0b8:	4b01      	ldr	r3, [pc, #4]	; (800a0c0 <__errno+0x8>)
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	4770      	bx	lr
 800a0be:	bf00      	nop
 800a0c0:	2000002c 	.word	0x2000002c

0800a0c4 <__libc_init_array>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	4d0d      	ldr	r5, [pc, #52]	; (800a0fc <__libc_init_array+0x38>)
 800a0c8:	4c0d      	ldr	r4, [pc, #52]	; (800a100 <__libc_init_array+0x3c>)
 800a0ca:	1b64      	subs	r4, r4, r5
 800a0cc:	10a4      	asrs	r4, r4, #2
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	42a6      	cmp	r6, r4
 800a0d2:	d109      	bne.n	800a0e8 <__libc_init_array+0x24>
 800a0d4:	4d0b      	ldr	r5, [pc, #44]	; (800a104 <__libc_init_array+0x40>)
 800a0d6:	4c0c      	ldr	r4, [pc, #48]	; (800a108 <__libc_init_array+0x44>)
 800a0d8:	f000 fc5e 	bl	800a998 <_init>
 800a0dc:	1b64      	subs	r4, r4, r5
 800a0de:	10a4      	asrs	r4, r4, #2
 800a0e0:	2600      	movs	r6, #0
 800a0e2:	42a6      	cmp	r6, r4
 800a0e4:	d105      	bne.n	800a0f2 <__libc_init_array+0x2e>
 800a0e6:	bd70      	pop	{r4, r5, r6, pc}
 800a0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0ec:	4798      	blx	r3
 800a0ee:	3601      	adds	r6, #1
 800a0f0:	e7ee      	b.n	800a0d0 <__libc_init_array+0xc>
 800a0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0f6:	4798      	blx	r3
 800a0f8:	3601      	adds	r6, #1
 800a0fa:	e7f2      	b.n	800a0e2 <__libc_init_array+0x1e>
 800a0fc:	0800ac48 	.word	0x0800ac48
 800a100:	0800ac48 	.word	0x0800ac48
 800a104:	0800ac48 	.word	0x0800ac48
 800a108:	0800ac4c 	.word	0x0800ac4c

0800a10c <malloc>:
 800a10c:	4b02      	ldr	r3, [pc, #8]	; (800a118 <malloc+0xc>)
 800a10e:	4601      	mov	r1, r0
 800a110:	6818      	ldr	r0, [r3, #0]
 800a112:	f000 b863 	b.w	800a1dc <_malloc_r>
 800a116:	bf00      	nop
 800a118:	2000002c 	.word	0x2000002c

0800a11c <free>:
 800a11c:	4b02      	ldr	r3, [pc, #8]	; (800a128 <free+0xc>)
 800a11e:	4601      	mov	r1, r0
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	f000 b80b 	b.w	800a13c <_free_r>
 800a126:	bf00      	nop
 800a128:	2000002c 	.word	0x2000002c

0800a12c <memset>:
 800a12c:	4402      	add	r2, r0
 800a12e:	4603      	mov	r3, r0
 800a130:	4293      	cmp	r3, r2
 800a132:	d100      	bne.n	800a136 <memset+0xa>
 800a134:	4770      	bx	lr
 800a136:	f803 1b01 	strb.w	r1, [r3], #1
 800a13a:	e7f9      	b.n	800a130 <memset+0x4>

0800a13c <_free_r>:
 800a13c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a13e:	2900      	cmp	r1, #0
 800a140:	d048      	beq.n	800a1d4 <_free_r+0x98>
 800a142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a146:	9001      	str	r0, [sp, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f1a1 0404 	sub.w	r4, r1, #4
 800a14e:	bfb8      	it	lt
 800a150:	18e4      	addlt	r4, r4, r3
 800a152:	f000 f8cd 	bl	800a2f0 <__malloc_lock>
 800a156:	4a20      	ldr	r2, [pc, #128]	; (800a1d8 <_free_r+0x9c>)
 800a158:	9801      	ldr	r0, [sp, #4]
 800a15a:	6813      	ldr	r3, [r2, #0]
 800a15c:	4615      	mov	r5, r2
 800a15e:	b933      	cbnz	r3, 800a16e <_free_r+0x32>
 800a160:	6063      	str	r3, [r4, #4]
 800a162:	6014      	str	r4, [r2, #0]
 800a164:	b003      	add	sp, #12
 800a166:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a16a:	f000 b8c7 	b.w	800a2fc <__malloc_unlock>
 800a16e:	42a3      	cmp	r3, r4
 800a170:	d90b      	bls.n	800a18a <_free_r+0x4e>
 800a172:	6821      	ldr	r1, [r4, #0]
 800a174:	1862      	adds	r2, r4, r1
 800a176:	4293      	cmp	r3, r2
 800a178:	bf04      	itt	eq
 800a17a:	681a      	ldreq	r2, [r3, #0]
 800a17c:	685b      	ldreq	r3, [r3, #4]
 800a17e:	6063      	str	r3, [r4, #4]
 800a180:	bf04      	itt	eq
 800a182:	1852      	addeq	r2, r2, r1
 800a184:	6022      	streq	r2, [r4, #0]
 800a186:	602c      	str	r4, [r5, #0]
 800a188:	e7ec      	b.n	800a164 <_free_r+0x28>
 800a18a:	461a      	mov	r2, r3
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b10b      	cbz	r3, 800a194 <_free_r+0x58>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d9fa      	bls.n	800a18a <_free_r+0x4e>
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	1855      	adds	r5, r2, r1
 800a198:	42a5      	cmp	r5, r4
 800a19a:	d10b      	bne.n	800a1b4 <_free_r+0x78>
 800a19c:	6824      	ldr	r4, [r4, #0]
 800a19e:	4421      	add	r1, r4
 800a1a0:	1854      	adds	r4, r2, r1
 800a1a2:	42a3      	cmp	r3, r4
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	d1dd      	bne.n	800a164 <_free_r+0x28>
 800a1a8:	681c      	ldr	r4, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	6053      	str	r3, [r2, #4]
 800a1ae:	4421      	add	r1, r4
 800a1b0:	6011      	str	r1, [r2, #0]
 800a1b2:	e7d7      	b.n	800a164 <_free_r+0x28>
 800a1b4:	d902      	bls.n	800a1bc <_free_r+0x80>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	6003      	str	r3, [r0, #0]
 800a1ba:	e7d3      	b.n	800a164 <_free_r+0x28>
 800a1bc:	6825      	ldr	r5, [r4, #0]
 800a1be:	1961      	adds	r1, r4, r5
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf04      	itt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	1949      	addeq	r1, r1, r5
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6054      	str	r4, [r2, #4]
 800a1d2:	e7c7      	b.n	800a164 <_free_r+0x28>
 800a1d4:	b003      	add	sp, #12
 800a1d6:	bd30      	pop	{r4, r5, pc}
 800a1d8:	200000b4 	.word	0x200000b4

0800a1dc <_malloc_r>:
 800a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1de:	1ccd      	adds	r5, r1, #3
 800a1e0:	f025 0503 	bic.w	r5, r5, #3
 800a1e4:	3508      	adds	r5, #8
 800a1e6:	2d0c      	cmp	r5, #12
 800a1e8:	bf38      	it	cc
 800a1ea:	250c      	movcc	r5, #12
 800a1ec:	2d00      	cmp	r5, #0
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	db01      	blt.n	800a1f6 <_malloc_r+0x1a>
 800a1f2:	42a9      	cmp	r1, r5
 800a1f4:	d903      	bls.n	800a1fe <_malloc_r+0x22>
 800a1f6:	230c      	movs	r3, #12
 800a1f8:	6033      	str	r3, [r6, #0]
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1fe:	f000 f877 	bl	800a2f0 <__malloc_lock>
 800a202:	4921      	ldr	r1, [pc, #132]	; (800a288 <_malloc_r+0xac>)
 800a204:	680a      	ldr	r2, [r1, #0]
 800a206:	4614      	mov	r4, r2
 800a208:	b99c      	cbnz	r4, 800a232 <_malloc_r+0x56>
 800a20a:	4f20      	ldr	r7, [pc, #128]	; (800a28c <_malloc_r+0xb0>)
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	b923      	cbnz	r3, 800a21a <_malloc_r+0x3e>
 800a210:	4621      	mov	r1, r4
 800a212:	4630      	mov	r0, r6
 800a214:	f000 f83c 	bl	800a290 <_sbrk_r>
 800a218:	6038      	str	r0, [r7, #0]
 800a21a:	4629      	mov	r1, r5
 800a21c:	4630      	mov	r0, r6
 800a21e:	f000 f837 	bl	800a290 <_sbrk_r>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d123      	bne.n	800a26e <_malloc_r+0x92>
 800a226:	230c      	movs	r3, #12
 800a228:	6033      	str	r3, [r6, #0]
 800a22a:	4630      	mov	r0, r6
 800a22c:	f000 f866 	bl	800a2fc <__malloc_unlock>
 800a230:	e7e3      	b.n	800a1fa <_malloc_r+0x1e>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	1b5b      	subs	r3, r3, r5
 800a236:	d417      	bmi.n	800a268 <_malloc_r+0x8c>
 800a238:	2b0b      	cmp	r3, #11
 800a23a:	d903      	bls.n	800a244 <_malloc_r+0x68>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	441c      	add	r4, r3
 800a240:	6025      	str	r5, [r4, #0]
 800a242:	e004      	b.n	800a24e <_malloc_r+0x72>
 800a244:	6863      	ldr	r3, [r4, #4]
 800a246:	42a2      	cmp	r2, r4
 800a248:	bf0c      	ite	eq
 800a24a:	600b      	streq	r3, [r1, #0]
 800a24c:	6053      	strne	r3, [r2, #4]
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 f854 	bl	800a2fc <__malloc_unlock>
 800a254:	f104 000b 	add.w	r0, r4, #11
 800a258:	1d23      	adds	r3, r4, #4
 800a25a:	f020 0007 	bic.w	r0, r0, #7
 800a25e:	1ac2      	subs	r2, r0, r3
 800a260:	d0cc      	beq.n	800a1fc <_malloc_r+0x20>
 800a262:	1a1b      	subs	r3, r3, r0
 800a264:	50a3      	str	r3, [r4, r2]
 800a266:	e7c9      	b.n	800a1fc <_malloc_r+0x20>
 800a268:	4622      	mov	r2, r4
 800a26a:	6864      	ldr	r4, [r4, #4]
 800a26c:	e7cc      	b.n	800a208 <_malloc_r+0x2c>
 800a26e:	1cc4      	adds	r4, r0, #3
 800a270:	f024 0403 	bic.w	r4, r4, #3
 800a274:	42a0      	cmp	r0, r4
 800a276:	d0e3      	beq.n	800a240 <_malloc_r+0x64>
 800a278:	1a21      	subs	r1, r4, r0
 800a27a:	4630      	mov	r0, r6
 800a27c:	f000 f808 	bl	800a290 <_sbrk_r>
 800a280:	3001      	adds	r0, #1
 800a282:	d1dd      	bne.n	800a240 <_malloc_r+0x64>
 800a284:	e7cf      	b.n	800a226 <_malloc_r+0x4a>
 800a286:	bf00      	nop
 800a288:	200000b4 	.word	0x200000b4
 800a28c:	200000b8 	.word	0x200000b8

0800a290 <_sbrk_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d06      	ldr	r5, [pc, #24]	; (800a2ac <_sbrk_r+0x1c>)
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	602b      	str	r3, [r5, #0]
 800a29c:	f7f6 fefa 	bl	8001094 <_sbrk>
 800a2a0:	1c43      	adds	r3, r0, #1
 800a2a2:	d102      	bne.n	800a2aa <_sbrk_r+0x1a>
 800a2a4:	682b      	ldr	r3, [r5, #0]
 800a2a6:	b103      	cbz	r3, 800a2aa <_sbrk_r+0x1a>
 800a2a8:	6023      	str	r3, [r4, #0]
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}
 800a2ac:	2000091c 	.word	0x2000091c

0800a2b0 <siprintf>:
 800a2b0:	b40e      	push	{r1, r2, r3}
 800a2b2:	b500      	push	{lr}
 800a2b4:	b09c      	sub	sp, #112	; 0x70
 800a2b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a2b8:	9002      	str	r0, [sp, #8]
 800a2ba:	9006      	str	r0, [sp, #24]
 800a2bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2c0:	4809      	ldr	r0, [pc, #36]	; (800a2e8 <siprintf+0x38>)
 800a2c2:	9107      	str	r1, [sp, #28]
 800a2c4:	9104      	str	r1, [sp, #16]
 800a2c6:	4909      	ldr	r1, [pc, #36]	; (800a2ec <siprintf+0x3c>)
 800a2c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2cc:	9105      	str	r1, [sp, #20]
 800a2ce:	6800      	ldr	r0, [r0, #0]
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	a902      	add	r1, sp, #8
 800a2d4:	f000 f874 	bl	800a3c0 <_svfiprintf_r>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	b01c      	add	sp, #112	; 0x70
 800a2e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2e4:	b003      	add	sp, #12
 800a2e6:	4770      	bx	lr
 800a2e8:	2000002c 	.word	0x2000002c
 800a2ec:	ffff0208 	.word	0xffff0208

0800a2f0 <__malloc_lock>:
 800a2f0:	4801      	ldr	r0, [pc, #4]	; (800a2f8 <__malloc_lock+0x8>)
 800a2f2:	f000 baf9 	b.w	800a8e8 <__retarget_lock_acquire_recursive>
 800a2f6:	bf00      	nop
 800a2f8:	20000924 	.word	0x20000924

0800a2fc <__malloc_unlock>:
 800a2fc:	4801      	ldr	r0, [pc, #4]	; (800a304 <__malloc_unlock+0x8>)
 800a2fe:	f000 baf4 	b.w	800a8ea <__retarget_lock_release_recursive>
 800a302:	bf00      	nop
 800a304:	20000924 	.word	0x20000924

0800a308 <__ssputs_r>:
 800a308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a30c:	688e      	ldr	r6, [r1, #8]
 800a30e:	429e      	cmp	r6, r3
 800a310:	4682      	mov	sl, r0
 800a312:	460c      	mov	r4, r1
 800a314:	4690      	mov	r8, r2
 800a316:	461f      	mov	r7, r3
 800a318:	d838      	bhi.n	800a38c <__ssputs_r+0x84>
 800a31a:	898a      	ldrh	r2, [r1, #12]
 800a31c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a320:	d032      	beq.n	800a388 <__ssputs_r+0x80>
 800a322:	6825      	ldr	r5, [r4, #0]
 800a324:	6909      	ldr	r1, [r1, #16]
 800a326:	eba5 0901 	sub.w	r9, r5, r1
 800a32a:	6965      	ldr	r5, [r4, #20]
 800a32c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a330:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a334:	3301      	adds	r3, #1
 800a336:	444b      	add	r3, r9
 800a338:	106d      	asrs	r5, r5, #1
 800a33a:	429d      	cmp	r5, r3
 800a33c:	bf38      	it	cc
 800a33e:	461d      	movcc	r5, r3
 800a340:	0553      	lsls	r3, r2, #21
 800a342:	d531      	bpl.n	800a3a8 <__ssputs_r+0xa0>
 800a344:	4629      	mov	r1, r5
 800a346:	f7ff ff49 	bl	800a1dc <_malloc_r>
 800a34a:	4606      	mov	r6, r0
 800a34c:	b950      	cbnz	r0, 800a364 <__ssputs_r+0x5c>
 800a34e:	230c      	movs	r3, #12
 800a350:	f8ca 3000 	str.w	r3, [sl]
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a364:	6921      	ldr	r1, [r4, #16]
 800a366:	464a      	mov	r2, r9
 800a368:	f000 fac0 	bl	800a8ec <memcpy>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a376:	81a3      	strh	r3, [r4, #12]
 800a378:	6126      	str	r6, [r4, #16]
 800a37a:	6165      	str	r5, [r4, #20]
 800a37c:	444e      	add	r6, r9
 800a37e:	eba5 0509 	sub.w	r5, r5, r9
 800a382:	6026      	str	r6, [r4, #0]
 800a384:	60a5      	str	r5, [r4, #8]
 800a386:	463e      	mov	r6, r7
 800a388:	42be      	cmp	r6, r7
 800a38a:	d900      	bls.n	800a38e <__ssputs_r+0x86>
 800a38c:	463e      	mov	r6, r7
 800a38e:	4632      	mov	r2, r6
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	4641      	mov	r1, r8
 800a394:	f000 fab8 	bl	800a908 <memmove>
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	6822      	ldr	r2, [r4, #0]
 800a39c:	1b9b      	subs	r3, r3, r6
 800a39e:	4432      	add	r2, r6
 800a3a0:	60a3      	str	r3, [r4, #8]
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	e7db      	b.n	800a360 <__ssputs_r+0x58>
 800a3a8:	462a      	mov	r2, r5
 800a3aa:	f000 fac7 	bl	800a93c <_realloc_r>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d1e1      	bne.n	800a378 <__ssputs_r+0x70>
 800a3b4:	6921      	ldr	r1, [r4, #16]
 800a3b6:	4650      	mov	r0, sl
 800a3b8:	f7ff fec0 	bl	800a13c <_free_r>
 800a3bc:	e7c7      	b.n	800a34e <__ssputs_r+0x46>
	...

0800a3c0 <_svfiprintf_r>:
 800a3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c4:	4698      	mov	r8, r3
 800a3c6:	898b      	ldrh	r3, [r1, #12]
 800a3c8:	061b      	lsls	r3, r3, #24
 800a3ca:	b09d      	sub	sp, #116	; 0x74
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	4614      	mov	r4, r2
 800a3d2:	d50e      	bpl.n	800a3f2 <_svfiprintf_r+0x32>
 800a3d4:	690b      	ldr	r3, [r1, #16]
 800a3d6:	b963      	cbnz	r3, 800a3f2 <_svfiprintf_r+0x32>
 800a3d8:	2140      	movs	r1, #64	; 0x40
 800a3da:	f7ff feff 	bl	800a1dc <_malloc_r>
 800a3de:	6028      	str	r0, [r5, #0]
 800a3e0:	6128      	str	r0, [r5, #16]
 800a3e2:	b920      	cbnz	r0, 800a3ee <_svfiprintf_r+0x2e>
 800a3e4:	230c      	movs	r3, #12
 800a3e6:	603b      	str	r3, [r7, #0]
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ec:	e0d1      	b.n	800a592 <_svfiprintf_r+0x1d2>
 800a3ee:	2340      	movs	r3, #64	; 0x40
 800a3f0:	616b      	str	r3, [r5, #20]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f6:	2320      	movs	r3, #32
 800a3f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a400:	2330      	movs	r3, #48	; 0x30
 800a402:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5ac <_svfiprintf_r+0x1ec>
 800a406:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a40a:	f04f 0901 	mov.w	r9, #1
 800a40e:	4623      	mov	r3, r4
 800a410:	469a      	mov	sl, r3
 800a412:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a416:	b10a      	cbz	r2, 800a41c <_svfiprintf_r+0x5c>
 800a418:	2a25      	cmp	r2, #37	; 0x25
 800a41a:	d1f9      	bne.n	800a410 <_svfiprintf_r+0x50>
 800a41c:	ebba 0b04 	subs.w	fp, sl, r4
 800a420:	d00b      	beq.n	800a43a <_svfiprintf_r+0x7a>
 800a422:	465b      	mov	r3, fp
 800a424:	4622      	mov	r2, r4
 800a426:	4629      	mov	r1, r5
 800a428:	4638      	mov	r0, r7
 800a42a:	f7ff ff6d 	bl	800a308 <__ssputs_r>
 800a42e:	3001      	adds	r0, #1
 800a430:	f000 80aa 	beq.w	800a588 <_svfiprintf_r+0x1c8>
 800a434:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a436:	445a      	add	r2, fp
 800a438:	9209      	str	r2, [sp, #36]	; 0x24
 800a43a:	f89a 3000 	ldrb.w	r3, [sl]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	f000 80a2 	beq.w	800a588 <_svfiprintf_r+0x1c8>
 800a444:	2300      	movs	r3, #0
 800a446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a44a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a44e:	f10a 0a01 	add.w	sl, sl, #1
 800a452:	9304      	str	r3, [sp, #16]
 800a454:	9307      	str	r3, [sp, #28]
 800a456:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a45a:	931a      	str	r3, [sp, #104]	; 0x68
 800a45c:	4654      	mov	r4, sl
 800a45e:	2205      	movs	r2, #5
 800a460:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a464:	4851      	ldr	r0, [pc, #324]	; (800a5ac <_svfiprintf_r+0x1ec>)
 800a466:	f7f5 fec3 	bl	80001f0 <memchr>
 800a46a:	9a04      	ldr	r2, [sp, #16]
 800a46c:	b9d8      	cbnz	r0, 800a4a6 <_svfiprintf_r+0xe6>
 800a46e:	06d0      	lsls	r0, r2, #27
 800a470:	bf44      	itt	mi
 800a472:	2320      	movmi	r3, #32
 800a474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a478:	0711      	lsls	r1, r2, #28
 800a47a:	bf44      	itt	mi
 800a47c:	232b      	movmi	r3, #43	; 0x2b
 800a47e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a482:	f89a 3000 	ldrb.w	r3, [sl]
 800a486:	2b2a      	cmp	r3, #42	; 0x2a
 800a488:	d015      	beq.n	800a4b6 <_svfiprintf_r+0xf6>
 800a48a:	9a07      	ldr	r2, [sp, #28]
 800a48c:	4654      	mov	r4, sl
 800a48e:	2000      	movs	r0, #0
 800a490:	f04f 0c0a 	mov.w	ip, #10
 800a494:	4621      	mov	r1, r4
 800a496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a49a:	3b30      	subs	r3, #48	; 0x30
 800a49c:	2b09      	cmp	r3, #9
 800a49e:	d94e      	bls.n	800a53e <_svfiprintf_r+0x17e>
 800a4a0:	b1b0      	cbz	r0, 800a4d0 <_svfiprintf_r+0x110>
 800a4a2:	9207      	str	r2, [sp, #28]
 800a4a4:	e014      	b.n	800a4d0 <_svfiprintf_r+0x110>
 800a4a6:	eba0 0308 	sub.w	r3, r0, r8
 800a4aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	46a2      	mov	sl, r4
 800a4b4:	e7d2      	b.n	800a45c <_svfiprintf_r+0x9c>
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	1d19      	adds	r1, r3, #4
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	9103      	str	r1, [sp, #12]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfbb      	ittet	lt
 800a4c2:	425b      	neglt	r3, r3
 800a4c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a4c8:	9307      	strge	r3, [sp, #28]
 800a4ca:	9307      	strlt	r3, [sp, #28]
 800a4cc:	bfb8      	it	lt
 800a4ce:	9204      	strlt	r2, [sp, #16]
 800a4d0:	7823      	ldrb	r3, [r4, #0]
 800a4d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a4d4:	d10c      	bne.n	800a4f0 <_svfiprintf_r+0x130>
 800a4d6:	7863      	ldrb	r3, [r4, #1]
 800a4d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a4da:	d135      	bne.n	800a548 <_svfiprintf_r+0x188>
 800a4dc:	9b03      	ldr	r3, [sp, #12]
 800a4de:	1d1a      	adds	r2, r3, #4
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	9203      	str	r2, [sp, #12]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	bfb8      	it	lt
 800a4e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4ec:	3402      	adds	r4, #2
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5bc <_svfiprintf_r+0x1fc>
 800a4f4:	7821      	ldrb	r1, [r4, #0]
 800a4f6:	2203      	movs	r2, #3
 800a4f8:	4650      	mov	r0, sl
 800a4fa:	f7f5 fe79 	bl	80001f0 <memchr>
 800a4fe:	b140      	cbz	r0, 800a512 <_svfiprintf_r+0x152>
 800a500:	2340      	movs	r3, #64	; 0x40
 800a502:	eba0 000a 	sub.w	r0, r0, sl
 800a506:	fa03 f000 	lsl.w	r0, r3, r0
 800a50a:	9b04      	ldr	r3, [sp, #16]
 800a50c:	4303      	orrs	r3, r0
 800a50e:	3401      	adds	r4, #1
 800a510:	9304      	str	r3, [sp, #16]
 800a512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a516:	4826      	ldr	r0, [pc, #152]	; (800a5b0 <_svfiprintf_r+0x1f0>)
 800a518:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a51c:	2206      	movs	r2, #6
 800a51e:	f7f5 fe67 	bl	80001f0 <memchr>
 800a522:	2800      	cmp	r0, #0
 800a524:	d038      	beq.n	800a598 <_svfiprintf_r+0x1d8>
 800a526:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <_svfiprintf_r+0x1f4>)
 800a528:	bb1b      	cbnz	r3, 800a572 <_svfiprintf_r+0x1b2>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	3307      	adds	r3, #7
 800a52e:	f023 0307 	bic.w	r3, r3, #7
 800a532:	3308      	adds	r3, #8
 800a534:	9303      	str	r3, [sp, #12]
 800a536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a538:	4433      	add	r3, r6
 800a53a:	9309      	str	r3, [sp, #36]	; 0x24
 800a53c:	e767      	b.n	800a40e <_svfiprintf_r+0x4e>
 800a53e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a542:	460c      	mov	r4, r1
 800a544:	2001      	movs	r0, #1
 800a546:	e7a5      	b.n	800a494 <_svfiprintf_r+0xd4>
 800a548:	2300      	movs	r3, #0
 800a54a:	3401      	adds	r4, #1
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	4619      	mov	r1, r3
 800a550:	f04f 0c0a 	mov.w	ip, #10
 800a554:	4620      	mov	r0, r4
 800a556:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a55a:	3a30      	subs	r2, #48	; 0x30
 800a55c:	2a09      	cmp	r2, #9
 800a55e:	d903      	bls.n	800a568 <_svfiprintf_r+0x1a8>
 800a560:	2b00      	cmp	r3, #0
 800a562:	d0c5      	beq.n	800a4f0 <_svfiprintf_r+0x130>
 800a564:	9105      	str	r1, [sp, #20]
 800a566:	e7c3      	b.n	800a4f0 <_svfiprintf_r+0x130>
 800a568:	fb0c 2101 	mla	r1, ip, r1, r2
 800a56c:	4604      	mov	r4, r0
 800a56e:	2301      	movs	r3, #1
 800a570:	e7f0      	b.n	800a554 <_svfiprintf_r+0x194>
 800a572:	ab03      	add	r3, sp, #12
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	462a      	mov	r2, r5
 800a578:	4b0f      	ldr	r3, [pc, #60]	; (800a5b8 <_svfiprintf_r+0x1f8>)
 800a57a:	a904      	add	r1, sp, #16
 800a57c:	4638      	mov	r0, r7
 800a57e:	f3af 8000 	nop.w
 800a582:	1c42      	adds	r2, r0, #1
 800a584:	4606      	mov	r6, r0
 800a586:	d1d6      	bne.n	800a536 <_svfiprintf_r+0x176>
 800a588:	89ab      	ldrh	r3, [r5, #12]
 800a58a:	065b      	lsls	r3, r3, #25
 800a58c:	f53f af2c 	bmi.w	800a3e8 <_svfiprintf_r+0x28>
 800a590:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a592:	b01d      	add	sp, #116	; 0x74
 800a594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a598:	ab03      	add	r3, sp, #12
 800a59a:	9300      	str	r3, [sp, #0]
 800a59c:	462a      	mov	r2, r5
 800a59e:	4b06      	ldr	r3, [pc, #24]	; (800a5b8 <_svfiprintf_r+0x1f8>)
 800a5a0:	a904      	add	r1, sp, #16
 800a5a2:	4638      	mov	r0, r7
 800a5a4:	f000 f87a 	bl	800a69c <_printf_i>
 800a5a8:	e7eb      	b.n	800a582 <_svfiprintf_r+0x1c2>
 800a5aa:	bf00      	nop
 800a5ac:	0800ac0c 	.word	0x0800ac0c
 800a5b0:	0800ac16 	.word	0x0800ac16
 800a5b4:	00000000 	.word	0x00000000
 800a5b8:	0800a309 	.word	0x0800a309
 800a5bc:	0800ac12 	.word	0x0800ac12

0800a5c0 <_printf_common>:
 800a5c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c4:	4616      	mov	r6, r2
 800a5c6:	4699      	mov	r9, r3
 800a5c8:	688a      	ldr	r2, [r1, #8]
 800a5ca:	690b      	ldr	r3, [r1, #16]
 800a5cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	bfb8      	it	lt
 800a5d4:	4613      	movlt	r3, r2
 800a5d6:	6033      	str	r3, [r6, #0]
 800a5d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5dc:	4607      	mov	r7, r0
 800a5de:	460c      	mov	r4, r1
 800a5e0:	b10a      	cbz	r2, 800a5e6 <_printf_common+0x26>
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	6033      	str	r3, [r6, #0]
 800a5e6:	6823      	ldr	r3, [r4, #0]
 800a5e8:	0699      	lsls	r1, r3, #26
 800a5ea:	bf42      	ittt	mi
 800a5ec:	6833      	ldrmi	r3, [r6, #0]
 800a5ee:	3302      	addmi	r3, #2
 800a5f0:	6033      	strmi	r3, [r6, #0]
 800a5f2:	6825      	ldr	r5, [r4, #0]
 800a5f4:	f015 0506 	ands.w	r5, r5, #6
 800a5f8:	d106      	bne.n	800a608 <_printf_common+0x48>
 800a5fa:	f104 0a19 	add.w	sl, r4, #25
 800a5fe:	68e3      	ldr	r3, [r4, #12]
 800a600:	6832      	ldr	r2, [r6, #0]
 800a602:	1a9b      	subs	r3, r3, r2
 800a604:	42ab      	cmp	r3, r5
 800a606:	dc26      	bgt.n	800a656 <_printf_common+0x96>
 800a608:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a60c:	1e13      	subs	r3, r2, #0
 800a60e:	6822      	ldr	r2, [r4, #0]
 800a610:	bf18      	it	ne
 800a612:	2301      	movne	r3, #1
 800a614:	0692      	lsls	r2, r2, #26
 800a616:	d42b      	bmi.n	800a670 <_printf_common+0xb0>
 800a618:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a61c:	4649      	mov	r1, r9
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	3001      	adds	r0, #1
 800a624:	d01e      	beq.n	800a664 <_printf_common+0xa4>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	68e5      	ldr	r5, [r4, #12]
 800a62a:	6832      	ldr	r2, [r6, #0]
 800a62c:	f003 0306 	and.w	r3, r3, #6
 800a630:	2b04      	cmp	r3, #4
 800a632:	bf08      	it	eq
 800a634:	1aad      	subeq	r5, r5, r2
 800a636:	68a3      	ldr	r3, [r4, #8]
 800a638:	6922      	ldr	r2, [r4, #16]
 800a63a:	bf0c      	ite	eq
 800a63c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a640:	2500      	movne	r5, #0
 800a642:	4293      	cmp	r3, r2
 800a644:	bfc4      	itt	gt
 800a646:	1a9b      	subgt	r3, r3, r2
 800a648:	18ed      	addgt	r5, r5, r3
 800a64a:	2600      	movs	r6, #0
 800a64c:	341a      	adds	r4, #26
 800a64e:	42b5      	cmp	r5, r6
 800a650:	d11a      	bne.n	800a688 <_printf_common+0xc8>
 800a652:	2000      	movs	r0, #0
 800a654:	e008      	b.n	800a668 <_printf_common+0xa8>
 800a656:	2301      	movs	r3, #1
 800a658:	4652      	mov	r2, sl
 800a65a:	4649      	mov	r1, r9
 800a65c:	4638      	mov	r0, r7
 800a65e:	47c0      	blx	r8
 800a660:	3001      	adds	r0, #1
 800a662:	d103      	bne.n	800a66c <_printf_common+0xac>
 800a664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66c:	3501      	adds	r5, #1
 800a66e:	e7c6      	b.n	800a5fe <_printf_common+0x3e>
 800a670:	18e1      	adds	r1, r4, r3
 800a672:	1c5a      	adds	r2, r3, #1
 800a674:	2030      	movs	r0, #48	; 0x30
 800a676:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a67a:	4422      	add	r2, r4
 800a67c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a680:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a684:	3302      	adds	r3, #2
 800a686:	e7c7      	b.n	800a618 <_printf_common+0x58>
 800a688:	2301      	movs	r3, #1
 800a68a:	4622      	mov	r2, r4
 800a68c:	4649      	mov	r1, r9
 800a68e:	4638      	mov	r0, r7
 800a690:	47c0      	blx	r8
 800a692:	3001      	adds	r0, #1
 800a694:	d0e6      	beq.n	800a664 <_printf_common+0xa4>
 800a696:	3601      	adds	r6, #1
 800a698:	e7d9      	b.n	800a64e <_printf_common+0x8e>
	...

0800a69c <_printf_i>:
 800a69c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	4691      	mov	r9, r2
 800a6a4:	7e27      	ldrb	r7, [r4, #24]
 800a6a6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a6a8:	2f78      	cmp	r7, #120	; 0x78
 800a6aa:	4680      	mov	r8, r0
 800a6ac:	469a      	mov	sl, r3
 800a6ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a6b2:	d807      	bhi.n	800a6c4 <_printf_i+0x28>
 800a6b4:	2f62      	cmp	r7, #98	; 0x62
 800a6b6:	d80a      	bhi.n	800a6ce <_printf_i+0x32>
 800a6b8:	2f00      	cmp	r7, #0
 800a6ba:	f000 80d8 	beq.w	800a86e <_printf_i+0x1d2>
 800a6be:	2f58      	cmp	r7, #88	; 0x58
 800a6c0:	f000 80a3 	beq.w	800a80a <_printf_i+0x16e>
 800a6c4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a6c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6cc:	e03a      	b.n	800a744 <_printf_i+0xa8>
 800a6ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6d2:	2b15      	cmp	r3, #21
 800a6d4:	d8f6      	bhi.n	800a6c4 <_printf_i+0x28>
 800a6d6:	a001      	add	r0, pc, #4	; (adr r0, 800a6dc <_printf_i+0x40>)
 800a6d8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800a6dc:	0800a735 	.word	0x0800a735
 800a6e0:	0800a749 	.word	0x0800a749
 800a6e4:	0800a6c5 	.word	0x0800a6c5
 800a6e8:	0800a6c5 	.word	0x0800a6c5
 800a6ec:	0800a6c5 	.word	0x0800a6c5
 800a6f0:	0800a6c5 	.word	0x0800a6c5
 800a6f4:	0800a749 	.word	0x0800a749
 800a6f8:	0800a6c5 	.word	0x0800a6c5
 800a6fc:	0800a6c5 	.word	0x0800a6c5
 800a700:	0800a6c5 	.word	0x0800a6c5
 800a704:	0800a6c5 	.word	0x0800a6c5
 800a708:	0800a855 	.word	0x0800a855
 800a70c:	0800a779 	.word	0x0800a779
 800a710:	0800a837 	.word	0x0800a837
 800a714:	0800a6c5 	.word	0x0800a6c5
 800a718:	0800a6c5 	.word	0x0800a6c5
 800a71c:	0800a877 	.word	0x0800a877
 800a720:	0800a6c5 	.word	0x0800a6c5
 800a724:	0800a779 	.word	0x0800a779
 800a728:	0800a6c5 	.word	0x0800a6c5
 800a72c:	0800a6c5 	.word	0x0800a6c5
 800a730:	0800a83f 	.word	0x0800a83f
 800a734:	680b      	ldr	r3, [r1, #0]
 800a736:	1d1a      	adds	r2, r3, #4
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	600a      	str	r2, [r1, #0]
 800a73c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800a740:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a744:	2301      	movs	r3, #1
 800a746:	e0a3      	b.n	800a890 <_printf_i+0x1f4>
 800a748:	6825      	ldr	r5, [r4, #0]
 800a74a:	6808      	ldr	r0, [r1, #0]
 800a74c:	062e      	lsls	r6, r5, #24
 800a74e:	f100 0304 	add.w	r3, r0, #4
 800a752:	d50a      	bpl.n	800a76a <_printf_i+0xce>
 800a754:	6805      	ldr	r5, [r0, #0]
 800a756:	600b      	str	r3, [r1, #0]
 800a758:	2d00      	cmp	r5, #0
 800a75a:	da03      	bge.n	800a764 <_printf_i+0xc8>
 800a75c:	232d      	movs	r3, #45	; 0x2d
 800a75e:	426d      	negs	r5, r5
 800a760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a764:	485e      	ldr	r0, [pc, #376]	; (800a8e0 <_printf_i+0x244>)
 800a766:	230a      	movs	r3, #10
 800a768:	e019      	b.n	800a79e <_printf_i+0x102>
 800a76a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a76e:	6805      	ldr	r5, [r0, #0]
 800a770:	600b      	str	r3, [r1, #0]
 800a772:	bf18      	it	ne
 800a774:	b22d      	sxthne	r5, r5
 800a776:	e7ef      	b.n	800a758 <_printf_i+0xbc>
 800a778:	680b      	ldr	r3, [r1, #0]
 800a77a:	6825      	ldr	r5, [r4, #0]
 800a77c:	1d18      	adds	r0, r3, #4
 800a77e:	6008      	str	r0, [r1, #0]
 800a780:	0628      	lsls	r0, r5, #24
 800a782:	d501      	bpl.n	800a788 <_printf_i+0xec>
 800a784:	681d      	ldr	r5, [r3, #0]
 800a786:	e002      	b.n	800a78e <_printf_i+0xf2>
 800a788:	0669      	lsls	r1, r5, #25
 800a78a:	d5fb      	bpl.n	800a784 <_printf_i+0xe8>
 800a78c:	881d      	ldrh	r5, [r3, #0]
 800a78e:	4854      	ldr	r0, [pc, #336]	; (800a8e0 <_printf_i+0x244>)
 800a790:	2f6f      	cmp	r7, #111	; 0x6f
 800a792:	bf0c      	ite	eq
 800a794:	2308      	moveq	r3, #8
 800a796:	230a      	movne	r3, #10
 800a798:	2100      	movs	r1, #0
 800a79a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a79e:	6866      	ldr	r6, [r4, #4]
 800a7a0:	60a6      	str	r6, [r4, #8]
 800a7a2:	2e00      	cmp	r6, #0
 800a7a4:	bfa2      	ittt	ge
 800a7a6:	6821      	ldrge	r1, [r4, #0]
 800a7a8:	f021 0104 	bicge.w	r1, r1, #4
 800a7ac:	6021      	strge	r1, [r4, #0]
 800a7ae:	b90d      	cbnz	r5, 800a7b4 <_printf_i+0x118>
 800a7b0:	2e00      	cmp	r6, #0
 800a7b2:	d04d      	beq.n	800a850 <_printf_i+0x1b4>
 800a7b4:	4616      	mov	r6, r2
 800a7b6:	fbb5 f1f3 	udiv	r1, r5, r3
 800a7ba:	fb03 5711 	mls	r7, r3, r1, r5
 800a7be:	5dc7      	ldrb	r7, [r0, r7]
 800a7c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a7c4:	462f      	mov	r7, r5
 800a7c6:	42bb      	cmp	r3, r7
 800a7c8:	460d      	mov	r5, r1
 800a7ca:	d9f4      	bls.n	800a7b6 <_printf_i+0x11a>
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d10b      	bne.n	800a7e8 <_printf_i+0x14c>
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	07df      	lsls	r7, r3, #31
 800a7d4:	d508      	bpl.n	800a7e8 <_printf_i+0x14c>
 800a7d6:	6923      	ldr	r3, [r4, #16]
 800a7d8:	6861      	ldr	r1, [r4, #4]
 800a7da:	4299      	cmp	r1, r3
 800a7dc:	bfde      	ittt	le
 800a7de:	2330      	movle	r3, #48	; 0x30
 800a7e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7e4:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800a7e8:	1b92      	subs	r2, r2, r6
 800a7ea:	6122      	str	r2, [r4, #16]
 800a7ec:	f8cd a000 	str.w	sl, [sp]
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	aa03      	add	r2, sp, #12
 800a7f4:	4621      	mov	r1, r4
 800a7f6:	4640      	mov	r0, r8
 800a7f8:	f7ff fee2 	bl	800a5c0 <_printf_common>
 800a7fc:	3001      	adds	r0, #1
 800a7fe:	d14c      	bne.n	800a89a <_printf_i+0x1fe>
 800a800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a804:	b004      	add	sp, #16
 800a806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a80a:	4835      	ldr	r0, [pc, #212]	; (800a8e0 <_printf_i+0x244>)
 800a80c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a810:	6823      	ldr	r3, [r4, #0]
 800a812:	680e      	ldr	r6, [r1, #0]
 800a814:	061f      	lsls	r7, r3, #24
 800a816:	f856 5b04 	ldr.w	r5, [r6], #4
 800a81a:	600e      	str	r6, [r1, #0]
 800a81c:	d514      	bpl.n	800a848 <_printf_i+0x1ac>
 800a81e:	07d9      	lsls	r1, r3, #31
 800a820:	bf44      	itt	mi
 800a822:	f043 0320 	orrmi.w	r3, r3, #32
 800a826:	6023      	strmi	r3, [r4, #0]
 800a828:	b91d      	cbnz	r5, 800a832 <_printf_i+0x196>
 800a82a:	6823      	ldr	r3, [r4, #0]
 800a82c:	f023 0320 	bic.w	r3, r3, #32
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	2310      	movs	r3, #16
 800a834:	e7b0      	b.n	800a798 <_printf_i+0xfc>
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	f043 0320 	orr.w	r3, r3, #32
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	2378      	movs	r3, #120	; 0x78
 800a840:	4828      	ldr	r0, [pc, #160]	; (800a8e4 <_printf_i+0x248>)
 800a842:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a846:	e7e3      	b.n	800a810 <_printf_i+0x174>
 800a848:	065e      	lsls	r6, r3, #25
 800a84a:	bf48      	it	mi
 800a84c:	b2ad      	uxthmi	r5, r5
 800a84e:	e7e6      	b.n	800a81e <_printf_i+0x182>
 800a850:	4616      	mov	r6, r2
 800a852:	e7bb      	b.n	800a7cc <_printf_i+0x130>
 800a854:	680b      	ldr	r3, [r1, #0]
 800a856:	6826      	ldr	r6, [r4, #0]
 800a858:	6960      	ldr	r0, [r4, #20]
 800a85a:	1d1d      	adds	r5, r3, #4
 800a85c:	600d      	str	r5, [r1, #0]
 800a85e:	0635      	lsls	r5, r6, #24
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	d501      	bpl.n	800a868 <_printf_i+0x1cc>
 800a864:	6018      	str	r0, [r3, #0]
 800a866:	e002      	b.n	800a86e <_printf_i+0x1d2>
 800a868:	0671      	lsls	r1, r6, #25
 800a86a:	d5fb      	bpl.n	800a864 <_printf_i+0x1c8>
 800a86c:	8018      	strh	r0, [r3, #0]
 800a86e:	2300      	movs	r3, #0
 800a870:	6123      	str	r3, [r4, #16]
 800a872:	4616      	mov	r6, r2
 800a874:	e7ba      	b.n	800a7ec <_printf_i+0x150>
 800a876:	680b      	ldr	r3, [r1, #0]
 800a878:	1d1a      	adds	r2, r3, #4
 800a87a:	600a      	str	r2, [r1, #0]
 800a87c:	681e      	ldr	r6, [r3, #0]
 800a87e:	6862      	ldr	r2, [r4, #4]
 800a880:	2100      	movs	r1, #0
 800a882:	4630      	mov	r0, r6
 800a884:	f7f5 fcb4 	bl	80001f0 <memchr>
 800a888:	b108      	cbz	r0, 800a88e <_printf_i+0x1f2>
 800a88a:	1b80      	subs	r0, r0, r6
 800a88c:	6060      	str	r0, [r4, #4]
 800a88e:	6863      	ldr	r3, [r4, #4]
 800a890:	6123      	str	r3, [r4, #16]
 800a892:	2300      	movs	r3, #0
 800a894:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a898:	e7a8      	b.n	800a7ec <_printf_i+0x150>
 800a89a:	6923      	ldr	r3, [r4, #16]
 800a89c:	4632      	mov	r2, r6
 800a89e:	4649      	mov	r1, r9
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	47d0      	blx	sl
 800a8a4:	3001      	adds	r0, #1
 800a8a6:	d0ab      	beq.n	800a800 <_printf_i+0x164>
 800a8a8:	6823      	ldr	r3, [r4, #0]
 800a8aa:	079b      	lsls	r3, r3, #30
 800a8ac:	d413      	bmi.n	800a8d6 <_printf_i+0x23a>
 800a8ae:	68e0      	ldr	r0, [r4, #12]
 800a8b0:	9b03      	ldr	r3, [sp, #12]
 800a8b2:	4298      	cmp	r0, r3
 800a8b4:	bfb8      	it	lt
 800a8b6:	4618      	movlt	r0, r3
 800a8b8:	e7a4      	b.n	800a804 <_printf_i+0x168>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	4632      	mov	r2, r6
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4640      	mov	r0, r8
 800a8c2:	47d0      	blx	sl
 800a8c4:	3001      	adds	r0, #1
 800a8c6:	d09b      	beq.n	800a800 <_printf_i+0x164>
 800a8c8:	3501      	adds	r5, #1
 800a8ca:	68e3      	ldr	r3, [r4, #12]
 800a8cc:	9903      	ldr	r1, [sp, #12]
 800a8ce:	1a5b      	subs	r3, r3, r1
 800a8d0:	42ab      	cmp	r3, r5
 800a8d2:	dcf2      	bgt.n	800a8ba <_printf_i+0x21e>
 800a8d4:	e7eb      	b.n	800a8ae <_printf_i+0x212>
 800a8d6:	2500      	movs	r5, #0
 800a8d8:	f104 0619 	add.w	r6, r4, #25
 800a8dc:	e7f5      	b.n	800a8ca <_printf_i+0x22e>
 800a8de:	bf00      	nop
 800a8e0:	0800ac1d 	.word	0x0800ac1d
 800a8e4:	0800ac2e 	.word	0x0800ac2e

0800a8e8 <__retarget_lock_acquire_recursive>:
 800a8e8:	4770      	bx	lr

0800a8ea <__retarget_lock_release_recursive>:
 800a8ea:	4770      	bx	lr

0800a8ec <memcpy>:
 800a8ec:	440a      	add	r2, r1
 800a8ee:	4291      	cmp	r1, r2
 800a8f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a8f4:	d100      	bne.n	800a8f8 <memcpy+0xc>
 800a8f6:	4770      	bx	lr
 800a8f8:	b510      	push	{r4, lr}
 800a8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a902:	4291      	cmp	r1, r2
 800a904:	d1f9      	bne.n	800a8fa <memcpy+0xe>
 800a906:	bd10      	pop	{r4, pc}

0800a908 <memmove>:
 800a908:	4288      	cmp	r0, r1
 800a90a:	b510      	push	{r4, lr}
 800a90c:	eb01 0402 	add.w	r4, r1, r2
 800a910:	d902      	bls.n	800a918 <memmove+0x10>
 800a912:	4284      	cmp	r4, r0
 800a914:	4623      	mov	r3, r4
 800a916:	d807      	bhi.n	800a928 <memmove+0x20>
 800a918:	1e43      	subs	r3, r0, #1
 800a91a:	42a1      	cmp	r1, r4
 800a91c:	d008      	beq.n	800a930 <memmove+0x28>
 800a91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a926:	e7f8      	b.n	800a91a <memmove+0x12>
 800a928:	4402      	add	r2, r0
 800a92a:	4601      	mov	r1, r0
 800a92c:	428a      	cmp	r2, r1
 800a92e:	d100      	bne.n	800a932 <memmove+0x2a>
 800a930:	bd10      	pop	{r4, pc}
 800a932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a93a:	e7f7      	b.n	800a92c <memmove+0x24>

0800a93c <_realloc_r>:
 800a93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a93e:	4607      	mov	r7, r0
 800a940:	4614      	mov	r4, r2
 800a942:	460e      	mov	r6, r1
 800a944:	b921      	cbnz	r1, 800a950 <_realloc_r+0x14>
 800a946:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a94a:	4611      	mov	r1, r2
 800a94c:	f7ff bc46 	b.w	800a1dc <_malloc_r>
 800a950:	b922      	cbnz	r2, 800a95c <_realloc_r+0x20>
 800a952:	f7ff fbf3 	bl	800a13c <_free_r>
 800a956:	4625      	mov	r5, r4
 800a958:	4628      	mov	r0, r5
 800a95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a95c:	f000 f814 	bl	800a988 <_malloc_usable_size_r>
 800a960:	42a0      	cmp	r0, r4
 800a962:	d20f      	bcs.n	800a984 <_realloc_r+0x48>
 800a964:	4621      	mov	r1, r4
 800a966:	4638      	mov	r0, r7
 800a968:	f7ff fc38 	bl	800a1dc <_malloc_r>
 800a96c:	4605      	mov	r5, r0
 800a96e:	2800      	cmp	r0, #0
 800a970:	d0f2      	beq.n	800a958 <_realloc_r+0x1c>
 800a972:	4631      	mov	r1, r6
 800a974:	4622      	mov	r2, r4
 800a976:	f7ff ffb9 	bl	800a8ec <memcpy>
 800a97a:	4631      	mov	r1, r6
 800a97c:	4638      	mov	r0, r7
 800a97e:	f7ff fbdd 	bl	800a13c <_free_r>
 800a982:	e7e9      	b.n	800a958 <_realloc_r+0x1c>
 800a984:	4635      	mov	r5, r6
 800a986:	e7e7      	b.n	800a958 <_realloc_r+0x1c>

0800a988 <_malloc_usable_size_r>:
 800a988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98c:	1f18      	subs	r0, r3, #4
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bfbc      	itt	lt
 800a992:	580b      	ldrlt	r3, [r1, r0]
 800a994:	18c0      	addlt	r0, r0, r3
 800a996:	4770      	bx	lr

0800a998 <_init>:
 800a998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a99a:	bf00      	nop
 800a99c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a99e:	bc08      	pop	{r3}
 800a9a0:	469e      	mov	lr, r3
 800a9a2:	4770      	bx	lr

0800a9a4 <_fini>:
 800a9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9a6:	bf00      	nop
 800a9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9aa:	bc08      	pop	{r3}
 800a9ac:	469e      	mov	lr, r3
 800a9ae:	4770      	bx	lr
